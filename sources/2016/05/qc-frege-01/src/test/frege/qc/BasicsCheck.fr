module qc.BasicsCheck where

import Test.QuickCheck
import qc.Basics

-- tag::sumcommutativity[]
propertyOne :: [Int] -> Bool
propertyOne xs = sum xs == (sum . reverse) xs

commutativity = property (propertyOne)
-- end::sumcommutativity[]

-- tag::controllingeneration[]
propertyTwo :: [Int] -> Bool -- <1>
propertyTwo xs = sum xs == (sum . reverse) xs

dataset = listOf $ choose (0, 100) -- <2>
rangeRestriction = forAll dataset propertyTwo -- <3>
-- end::controllingeneration[]

-- tag::outputfeedback[]
propertyThree :: [Int] -> Property -- <1>
propertyThree xs = collect (length xs) $ sum xs == (sum . reverse) xs  -- <2>

rangeRestrictionWithFeedback = forAll dataset propertyThree -- <3>
-- end::outputfeedback[]
