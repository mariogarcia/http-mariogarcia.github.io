module qc.CombineCheck where

import Test.QuickCheck
import qc.Combine (Risk, Loan, calculateRisk)

instance Arbitrary Loan where
  arbitrary = genLoan

genLoan :: Gen Loan
genLoan = liftM3 Loan nameGen amountGen riskGen
  where nameGen   = genName
        amountGen = choose (0,100_000)
        riskGen   = elements [PENDING .. REJECTED]

genName :: Gen (Maybe String)
genName = suchThatMaybe genString $ \word -> length word == 3

genString :: Gen String
genString = liftM packed $ listOf $ elements ['a'..'z']

-- tag::rejectNegative[]
rejectNegative :: Loan -> Bool
rejectNegative loan = if isNegative
                      then statusResult == Risk.REJECTED
                      else true
  where isNegative   = loan.amount < 0
        loanResult   = calculateRisk loan
        statusResult = loanResult.risk
-- end::rejectNegative[]

-- tag::rejectBeyondMax[]
rejectBeyondMax :: Loan -> Bool
rejectBeyondMax loan = if isBeyondMax
                       then statusResult == Risk.REJECTED
                       else true
  where isBeyondMax  = loan.amount > 100_000
        loanResult   = calculateRisk loan
        statusResult = loanResult.risk
-- end::rejectBeyondMax[]

-- tag::checkAnonymous[]
rejectAnonymous :: Loan -> Bool
rejectAnonymous loan = if isAnonymous
                       then statusResult == Risk.REJECTED
                       else true
  where isAnonymous  = loan.name == Nothing
        loanResult   = calculateRisk loan
        statusResult = loanResult.risk
-- end::checkAnonymous[]

-- tag::checkIndividually[]
checkName = property rejectAnonymous
checkMin  = property rejectNegative
checkMax  = property rejectBeyondMax
-- end::checkIndividually[]

-- tag::conjoin[]
calculateRiskCheck = conjoin [rejectNegative, rejectBeyondMax, rejectAnonymous]
-- end::conjoin[]

-- tag::conjoin2[]
calculateRiskCheck2 = rejectNegative .&&.rejectBeyondMax .&&. rejectAnonymous
-- end::conjoin2[]
