module qc.Combine where

-- tag::loandata[]
data Risk = PENDING | NORMAL | RISKY | REJECTED

derive Eq   Risk
derive Show Risk
derive Enum Risk

data Loan = Loan { name :: Maybe String , amount :: Double, risk :: Risk }

derive Show Loan
-- end::loandata[]

inRange :: Ord a => (a,a) -> a -> Bool
inRange (min,max) value = value >= min && value <= max

-- tag::calculateRisk[]
calculateAmountRisk :: Loan -> Loan -- <1>
calculateAmountRisk loan
  | inRange (1,9999) loan.amount         = loan.{ risk = NORMAL }
  | inRange (10_000,100_000) loan.amount = loan.{ risk = RISKY }
  | otherwise                            = loan.{ risk = REJECTED }

calculateAnonymousRisk :: Loan -> Loan -- <2>
calculateAnonymousRisk loan = case loan of
  Loan Nothing _ _ -> loan.{ risk = REJECTED }
  _                -> loan

calculateRisk :: Loan -> Loan -- <3>
calculateRisk loan = (calculateAnonymousRisk . calculateAmountRisk) loan
-- end::calculateRisk[]
