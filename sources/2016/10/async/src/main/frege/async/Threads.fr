module async.Threads where

import frege.control.Concurrent

-- tag::createThread[]
executeInNewThread :: IO () -> IO ()
executeInNewThread action = do
  thread <- forkOS action -- <1>
  name   <- thread.getName -- <2>
  Thread.sleep 2000
  println ("Thread name: " ++ name)

doSomething :: IO ()
doSomething = do
  println "Launching a new thread"
  executeInNewThread ioAction
  println "Main process continues"
  where ioAction = (println . sum) [1..200]
-- end::createThread[]


-- tag::executorService[]
executeFromThreadPool :: IO () -> IO ()
executeFromThreadPool action = do
  forkIO action -- <1>
  println "No information of thread is provided"
-- end::executorService[]


-- tag::mvar[]
useMVar = do
   mvar1 <- newEmptyMVar       -- <1>
   mvar2 <- newEmptyMVar       -- <2>
   forkIO do                   -- <3>
     mvar1.put $ sum [2,3]     -- <4>
     Thread.sleep 5000
     println "end computation1"
   forkIO do                   -- <5>
     mvar2.put 10              -- <6>
     println "end computation2"
   res1 <- mvar1.take          -- <7>
   res2 <- mvar2.take          -- <8>
   return $ res1 + res2        -- <9>
-- end::mvar[]
