<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Working in Progress</title>
    <link href="http://github.com/mariogarcia/"/>
    <link rel="self" type="application/atom+xml" href="http://github.com/mariogarcia/feed.xml"/>
    <subtitle>null</subtitle>
    <updated>2021-03-16T13:05:07Z</updated>
    <id>tag:null,2021:03</id>
    <entry>
        <title>Model Evaluation: Confusion Matrix</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2021/03/ml_confusion_matrix.html"/>
        <updated>2021-03-15T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2021/03/ml_confusion_matrix.html</id>
        <category term="ds"/>
        <category term="ml"/>
        <category term="python"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2021/03/ml_confusion_matrix/header.png&quot; alt=&quot;ConfusionAndMatrix&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The machine learning workflow usually involves several steps: getting a &lt;strong&gt;representation of the data&lt;/strong&gt;, looking for the most suitable &lt;strong&gt;features&lt;/strong&gt;,
&lt;strong&gt;train the model&lt;/strong&gt; with those features, and finally &lt;strong&gt;check whether the current model fits the solution&lt;/strong&gt; we were aiming for or not.
This last step is called &lt;strong&gt;evaluation&lt;/strong&gt; and tries to check whether our model fits our purposes or not.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;accuracy&quot;&gt;Accuracy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the time I&amp;#8217;m focusing on getting the highest score when training my machine learning models. The score I&amp;#8217;m looking for is based on accuracy. The accuracy here is the &lt;strong&gt;number of predicted samples that were correctly labeled divided by the total number of samples&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/54b5899f9d81d5aacad393ee14400f9b.png&quot; alt=&quot;54b5899f9d81d5aacad393ee14400f9b.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. accuracy formula&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is not a bad estimate to get started but &lt;strong&gt;is not a silver bullet&lt;/strong&gt;. Depending on the problem, accuracy may not be the best evaluation method. For example, if we&amp;#8217;re dealing with a health related machine learning problem, such as classifying a certain type of cancer cases, even a 90% of accuracy is not good enough. In this case we are ok by having false positives if we&amp;#8217;re sure that we don&amp;#8217;t miss any true positive. False positives can be validated by a doctor afterwards.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;confusion_matrix&quot;&gt;Confusion Matrix&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to choose which could be the most suitable metric used for a given problem, we need to know which is the goal of the solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Is a health related app and we want to &lt;strong&gt;make sure we don&amp;#8217;t miss any positive case&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to store items into boxes and we need to &lt;strong&gt;make sure the accuracy is close to 100%&lt;/strong&gt;, in other words, to be accurate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One helpful way to visualize how the model is performing is to use a confusion matrix. A confusion matrix is &lt;strong&gt;a matrix were all posible outcomes of
the model are classified in different quadrants&lt;/strong&gt;. Depending on which quadrant is most important for us to highlight as result,
&lt;strong&gt;we will choose the classifier that fits best the quadrants we are interested in&lt;/strong&gt;. An evaluation matrix for a binary classification problem could look like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-b9576e02d6f87bbe683b9b888762b778.png&quot; alt=&quot;Confusion matrix&quot; width=&quot;370&quot; height=&quot;308&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Confusion matrix&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets create a theoretical example. Lets say we have a binary classification problem. We&amp;#8217;re classifying images, and we need to classify 100 images between cats and dogs. The confusion matrix for my actual model is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-37ba68dacf2cfa390df4dfc1ea237905.png&quot; alt=&quot;Binary classification&quot; width=&quot;230&quot; height=&quot;182&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Binary classification&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we establish that the positive class (1) is to find a dog and a negative class (0) is to find a cat, according to this confusion matrix of a 100 samples we can make certain assumptions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20% of the time&lt;/strong&gt; the model &lt;strong&gt;classifies correctly that a given animal is not a dog&lt;/strong&gt; (True Negative - TN)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;30% of the time&lt;/strong&gt; the model &lt;strong&gt;classifies incorrectly that a given animal is not a dog&lt;/strong&gt;  (False Negative - FN)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19% of the time&lt;/strong&gt; the model &lt;strong&gt;classifies incorrectly that a given animal is a dog&lt;/strong&gt; (False Positive - FP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;31% of the time&lt;/strong&gt; the model &lt;strong&gt;classifies correctly that a given animal is a dog&lt;/strong&gt;  (True Positive - TP)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The evaluation matrix helps us to sort all of the samples in four different boxes and then applying different metrics depending on the goal we&amp;#8217;re aiming, Do we want to not miss any dog even if we accept to classify a cat as a dog from time to time ? Do we want to have a 100% of accuracy classifying dogs ? How 100% of accuracy would be represented in the confusion matrix by the way ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-89a77d67a4b8a56ee372c45cf6f23bd1.png&quot; alt=&quot;Accuracy metric&quot; width=&quot;230&quot; height=&quot;182&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Accuracy metric&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But as we&amp;#8217;re mentioned so far, we may want to prioritize some other type of metric. Other metrics could be: &lt;strong&gt;precision, recall or specificity&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;precision_recall_and_f1_score&quot;&gt;Precision, Recall and F1 score&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;precision&quot;&gt;Precision&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;d like to maximize precision, that would mean (in the current example), that everytime we say a given sample is a dog, it&amp;#8217;s going to be a dog. But that also could mean that when we say something is a cat we may find out it&amp;#8217;s a dog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/96d2dbcd621a2da7cff58eaed68d87c2.png&quot; alt=&quot;96d2dbcd621a2da7cff58eaed68d87c2.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. precision formula&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our example our first model was performing like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-68d1981304602339732316ef075af471.png&quot; alt=&quot;Precision&quot; width=&quot;230&quot; height=&quot;182&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Precision&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Calculating the precision would give us 31 / 31 + 19 = 0.62, 62% precision. A model that improves precision would look like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-4f5e940fa1cc0908c1d1c91a57c7e629.png&quot; alt=&quot;Improved precission&quot; width=&quot;230&quot; height=&quot;182&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Improved precission&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which would give us a precision of: 41 / 41 + 0 = 1, 100% precision. Notice we are still missing some dogs (49 dogs are classified as false negatives), but here &lt;strong&gt;the point is that whenever the model say it&amp;#8217;s a dog, it&amp;#8217;s a dog&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Precision is good for&amp;#8230;&amp;#8203;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general &lt;strong&gt;precision could be a good metric for&lt;/strong&gt; tasks such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;search engine rankings, query suggestion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;document classification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;many customer-facing tasks as customers are very sensitive to errors&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;recall&quot;&gt;Recall&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if we don&amp;#8217;t want to miss any dog even though we can end up classifying cats as a dog ? We want a high recall. First the formula:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/9fc030ab004eb3b12a815227ce62da52.png&quot; alt=&quot;9fc030ab004eb3b12a815227ce62da52.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. recall formula&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We start with a model that performs like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-5617d16bad9ec93391f16c79749a657c.png&quot; alt=&quot;Recall&quot; width=&quot;230&quot; height=&quot;182&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Recall&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Calculating the recall we end up with: 31 / 31 + 30 = 0.508, around 50% of time time when we say it&amp;#8217;s a dog it&amp;#8217;s a dog, that&amp;#8217;s not better than flipping a coin. Let&amp;#8217;s checkout another model:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-17d45278c488a99230a68ffe7a7f7708.png&quot; alt=&quot;Improved recall&quot; width=&quot;230&quot; height=&quot;182&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Improved recall&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this ocassion we&amp;#8217;ve got that: 31 / 31 + 0 = 1, 100% of recall. This time this would mean that every time we say a dog is a dog we may get a cat, but we are completely sure, that no dogs have been classified as cats. Looking at the matrix:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;50% of the samples&lt;/strong&gt; have been &lt;strong&gt;correctly classified as cats&lt;/strong&gt; (True Negative - TN)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;0% of the samples&lt;/strong&gt; have been &lt;strong&gt;incorrectly classified as cats&lt;/strong&gt; (False Negative - FN)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19% of the samples&lt;/strong&gt; have been &lt;strong&gt;incorrectly classified as dogs&lt;/strong&gt; (False Positive - FP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;31% of the samples&lt;/strong&gt; have been &lt;strong&gt;correctly classified as dogs&lt;/strong&gt; (True Positive - TP)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Recall is good for&amp;#8230;&amp;#8203;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general &lt;strong&gt;recall could be a good metric for tasks&lt;/strong&gt; such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Search and information extraction in legal discovery&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tumor detection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tasks with a man-in-the-loop to filter out false positives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;f1_score&quot;&gt;F1 score&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;F1 score combines precision and recall into a single number. The formula is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/f7ce964042ecded59c4495ac23e5e10b.png&quot; alt=&quot;f7ce964042ecded59c4495ac23e5e10b.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. f1 score formula&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As it&amp;#8217;s mentioned &lt;a href=&quot;https://towardsdatascience.com/accuracy-precision-recall-or-f1-331fb37c5cb9&quot;&gt;this article&lt;/a&gt; F1 Score might be a better measure to use &lt;strong&gt;if we need to seek a balance between Precision and Recall AND there is an uneven class distribution&lt;/strong&gt; (large number of Actual Negatives).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;using_scikit_to_show_metrics&quot;&gt;Using Scikit to show metrics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To show how confusion matrix can help deciding which classifier to use I&amp;#8217;m using a dataset from Madrid City Open Data.
This &lt;a href=&quot;https://datos.madrid.es/portal/site/egob/menuitem.c05c1f754a33a9fbe4b2e4b284f1a5a0/?vgnextoid=50d7d35982d6f510VgnVCM1000001d4a900aRCRD&amp;amp;vgnextchannel=374512b9ace9f310VgnVCM100000171f5a0aRCRD&amp;amp;vgnextfmt=default&quot;&gt;dataset&lt;/a&gt;
shows the interventions of the urgency and rescue city service (SAMUR in spanish) in 2020.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2021/03/ml_confusion_matrix/samur_data.png&quot; alt=&quot;SAMUR&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this dataset I&amp;#8217;d like to be able to find a classifier that answers the question: &lt;strong&gt;Is this type of intervention going to take
to the urgency service more time than average to respond ?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First I did some work to prepare the data the best I could:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Converting categorical data to numerical&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Applying under-sampling to correct imbalance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choosing best features&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then I chose several classifiers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;classifiers&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.dummy import DummyClassifier

# different classifiers
logistic    = LogisticRegression().fit(X_train, y_train)
svc         = LinearSVC(random_state=0).fit(X_train, y_train)
knn         = KNeighborsClassifier(5).fit(X_train, y_train)
tree        = DecisionTreeClassifier(max_depth=3).fit(X_train, y_train)
rff         = RandomForestClassifier(max_depth=2, n_estimators=4, max_features=2).fit(X_train, y_train)
ada         = AdaBoostClassifier(n_estimators=100).fit(X_train, y_train)
dummy       = DummyClassifier(strategy = &apos;most_frequent&apos;).fit(X_train, y_train)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And then I printed out their confusion matrices:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;confusion matrix of every classifier&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.metrics import confusion_matrix

classifiers = [dummy, logistic, svc, knn, tree, rff, ada]

for clsf in classifiers:
    y_predicted = clsf.predict(X_test)
    print(clsf.__class__.__name__)
    print(&apos;===========================================&apos;)
    print(confusion_matrix(y_test, y_predicted))
    print()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a nicer representation of the confusion matrices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-83c2392ea6863c27796bbacd74ed2018.png&quot; alt=&quot;Confusion matrices&quot; width=&quot;860&quot; height=&quot;350&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Confusion matrices&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First impressions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;None of them&lt;/strong&gt; is performing at a decent level&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is &lt;strong&gt;not even possible to see a decent recall&lt;/strong&gt; because both dummy and linear classifiers are the different sides of choosing the most frequent outcome&amp;#8230;&amp;#8203; useless.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;#8217;d say that &lt;strong&gt;the classifier  that gives me the highest precision is the AdaBoostClassifier&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But to be sure, I&amp;#8217;m producing the precision, recall and f1-score summary with sklearn&amp;#8217;s &lt;strong&gt;classification_report&lt;/strong&gt; of each of them:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;summary&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.metrics import classification_report

classifiers = [dummy, logistic, svc, knn, tree, rff, ada]

for clsf in classifiers:
    y_predicted = clsf.predict(X_test)
    print(clsf.__class__.__name__)
    print(&apos;===========================================&apos;)
    print(classification_report(y_test, y_predicted, target_names = [&apos;above_avg&apos;, &apos;not_above_avg&apos;]))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m summarizing the results in the following table:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Highest results for possitive class&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Classifier&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Precision&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Recall&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;F1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DummyClassifier&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.50&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.57&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LogisticRegression&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.57&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.70&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.63&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LinearSVC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;KNeighborsClassifier&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.61&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.61&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.61&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DecisionTreeClassifier&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.56&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.83&lt;/strong&gt; &amp;#8592;----&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.67&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RandomForestClassifier&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.58&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.66&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.61&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;AdaBoostClassifier&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.62&lt;/strong&gt; &amp;#8592;----&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.70&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.66&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The summary is telling me that the classifier that ranks best for &lt;strong&gt;precision&lt;/strong&gt; is the &lt;strong&gt;AdaBoostClassifier&lt;/strong&gt; and the classifier that
ranks best for &lt;strong&gt;recall&lt;/strong&gt; is the &lt;strong&gt;DecisionTreeClassifier&lt;/strong&gt;. The take-away is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If I wanted to be sure that &lt;strong&gt;I&amp;#8217;m missing the few positive samples possible&lt;/strong&gt; I&amp;#8217;d look for the &lt;strong&gt;highest recall&lt;/strong&gt; classifier&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If I wanted to be sure that &lt;strong&gt;I&amp;#8217;m getting a true positive sample every time&lt;/strong&gt; I&amp;#8217;d look for the &lt;strong&gt;highest precision&lt;/strong&gt; classifier&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, &lt;strong&gt;this whole evaluation process has serve to realize that I need to go back to square one&lt;/strong&gt;, because as I mentioned
earlier &lt;strong&gt;NONE of the classifiers is performing decently&lt;/strong&gt;, so I need to &lt;strong&gt;check where I can improve the process&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Enrich data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Increase/Decrease samples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tune classifiers to get the desired precision/recall/accuracy&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Confusion_matrix&quot;&gt;Confusion Matrix&lt;/a&gt;: Wikipedia definition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/metrics-to-evaluate-your-machine-learning-algorithm-f10ba6e38234&quot;&gt;Different Evaluation Metrics&lt;/a&gt;: Interesting article talking about different evaluation metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/accuracy-precision-recall-or-f1-331fb37c5cb9&quot;&gt;Accuracy, precision, recall or F1&lt;/a&gt;: article in towardsdatascience.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/files/2021/03/ml_confusion_matrix/SAMUR.ipynb&quot;&gt;SAMUR.ipynb Jupyter Notebook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Imbalanced classes</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2021/02/ml_imbalanced_classes.html"/>
        <updated>2021-02-10T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2021/02/ml_imbalanced_classes.html</id>
        <category term="ds"/>
        <category term="ml"/>
        <category term="python"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2021/02/ml_imbalanced_classes/header.png&quot; alt=&quot;raw&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;accuracy_is_not_always_what_you_think&quot;&gt;Accuracy is not always what you think&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the time I&amp;#8217;m focusing on getting the highest score when training my machine learning models. Lets remember the definition of accuracy: &lt;strong&gt;The number of predicted samples that were correctly labeled divided by the total number of samples&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/54b5899f9d81d5aacad393ee14400f9b.png&quot; alt=&quot;54b5899f9d81d5aacad393ee14400f9b.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. accuracy formula&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But what happens (imagine we&amp;#8217;re in a binary classification problem) and there are many samples labeled with a possitive class or the other way around, How that situation could affect the score? Moreover, What the score would mean in these situations ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To dig a little bit into that I&amp;#8217;m creating a classification model with the &lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets/Haberman%27s+Survival&quot;&gt;Haberman&amp;#8217;s Survival Data Set&lt;/a&gt; which contains cases from a study that was conducted between 1958 and 1970 at the University of Chicago&amp;#8217;s Billings Hospital on the survival of patients who had undergone surgery for breast cancer. This dataset is available from the &lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets.php&quot;&gt;UCI Machine Learning Repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Loading data&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

df = pd.read_csv(&quot;haberman.data&quot;, names=[&apos;age&apos;, &apos;year&apos;, &apos;aux_nodes&apos;, &apos;status&apos;])
df.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2021/02/ml_imbalanced_classes/imbalanced_01.png&quot; alt=&quot;Cancer cells&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;d like to train a classifier to choose between target values (possible values in the &lt;strong&gt;status&lt;/strong&gt; column):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;: the patient survived 5 years or longer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;: the patient died within 5 year&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The firts classification uses a support vector classifier (SVC) and I&amp;#8217;m getting the following score:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Classifying with SVC&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.model_selection import train_test_split
from sklearn.svm import SVC

features = [col for col in df.columns.values if col != &apos;status&apos;]

X = df[features]
y = df[&apos;status&apos;]

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0)

svc = SVC().fit(X_train, y_train)
svc.score(X_test, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;accuracy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;0.5974025974025974&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hold on a second. &lt;strong&gt;Is this the best I could do ?&lt;/strong&gt; Well, there&amp;#8217;s the concept of a &lt;strong&gt;baseline model&lt;/strong&gt;. You can think of the baseline as &lt;strong&gt;the worst possible classificator you could come up with&lt;/strong&gt;. In other words &lt;strong&gt;I should always come up with something better than the baseline model&lt;/strong&gt;. If not, my model is as useful as tossing a coin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Scikit you can create a baseline classification model using the dummy classifier. I&amp;#8217;m creating a baseline for my dataset:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Using DummyClassifier for the baseline&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.dummy import DummyClassifier

dummy = DummyClassifier(strategy = &quot;most_frequent&quot;).fit(X_train, y_train)
dummy.score(X_test, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;accuracy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;0.5974025974025974&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2021/02/ml_imbalanced_classes/wtf.jpg&quot; alt=&quot;Why?&quot; width=&quot;30%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Why am I getting the same score ?&lt;/strong&gt; There could be several reasons why my classification model is scoring as bad as the dummy classifier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Imbalanced class&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Innefective, erroneous or missing features&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Poor choice of kernel or hyperparams&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
If my model performs almost the same as the baseline model, it could be considered as good as tossing a coin.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the shake of the article, lets say I suspect my dataset is imbalanced. How can I be sure that&amp;#8217;s the case ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Checking the percentages of each target class&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def show_balance(dataframe):
    rates_df = dataframe[[&apos;status&apos;, &apos;age&apos;]]\
        .copy()\
        .groupby(&apos;status&apos;)\
        .count()\
        .rename(columns={&apos;age&apos;: &apos;count&apos;})\
        .reset_index(drop=False)
    rates_df[&apos;pct&apos;] = rates_df[&apos;count&apos;] / rates_df[&apos;count&apos;].sum()

    return rates_df

show_balance(df)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2021/02/ml_imbalanced_classes/imbalanced_02.png&quot; alt=&quot;imbalanced&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok so instead of having the same amount of samples of each target class, I&amp;#8217;ve got 73% of class &quot;1&quot; and 27% of class &quot;2&quot;, so &lt;strong&gt;it&amp;#8217;s clearly imbalanced&lt;/strong&gt;. That situation favors that the dummy classifier because the dummy classifier only classifies correctly the majority class, meaning that 73% of the time would be getting the right outcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You may be wondering (I did)&amp;#8230;&amp;#8203; if the majority class is 73% of the samples, then &lt;strong&gt;Why the dummy classifier is not getting 73% of accuracy ?&lt;/strong&gt; The answer is because we&amp;#8217;re splitting the samples into training and test sets, and that changes the percentages, decreasing them.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The objective now would be having the same amount of samples for each class. There&amp;#8217;re several techniques that can help me mitigating the problem with imbalanced classes. In this entry I&amp;#8217;m focusing in two of them:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resampling the dataset&lt;/strong&gt;: ways of increasing an under-represented class or decreasing an over-represented target class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using penalized models&lt;/strong&gt;: penalizations applied to models to take into account the under/over representation of a given target class.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To check out more techniques to reduce the impact of imbalanced classes I recommend you to take a look to &lt;a href=&quot;https://machinelearningmastery.com/tactics-to-combat-imbalanced-classes-in-your-machine-learning-dataset/&quot;&gt;this wonderful article from machinelearningmastery.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets/Haberman%27s+Survival&quot; class=&quot;bare&quot;&gt;http://archive.ics.uci.edu/ml/datasets/Haberman%27s+Survival&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://machinelearningmastery.com/tactics-to-combat-imbalanced-classes-in-your-machine-learning-dataset/&quot; class=&quot;bare&quot;&gt;https://machinelearningmastery.com/tactics-to-combat-imbalanced-classes-in-your-machine-learning-dataset/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;over_sampling_vs_under_sampling&quot;&gt;Over-Sampling vs Under-Sampling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a binary classification problem when you have many samples from one class and very few from the other you can choose between:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Over-Sampling&lt;/strong&gt;: Create more samples from the under-represented class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Under-Sampling&lt;/strong&gt;: Reduce the number of samples from the over-represented class&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In any case the optimal situation would be to have both classes equally represented. There&amp;#8217;re a couple of things worth mentioning when trying to decide whether to choose one technique or the other:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;strong&gt;under-sampling&lt;/strong&gt; when you have a &lt;strong&gt;big dataset&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;strong&gt;over-sampling&lt;/strong&gt; when you have a &lt;strong&gt;small dataset&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the dataset I&amp;#8217;m working on, the problem is that there&amp;#8217;s not much data, just 300 samples, it doesn&amp;#8217;t make sense to reduce even more the dataset by under-sampling the over-represented class. Therefore I&amp;#8217;m going to over-sampling the under-represented class. To do so, I&amp;#8217;m adding to my toolbox the &lt;a href=&quot;https://imbalanced-learn.org&quot; class=&quot;bare&quot;&gt;https://imbalanced-learn.org&lt;/a&gt; library, which is an add-on to the scikit-learn framework focused (as the name implies) on dealing with imbalanced classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install a Python library in my Jupyter notebook using pip I followed the instructions found at &lt;a href=&quot;https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/&quot; class=&quot;bare&quot;&gt;https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;installing imbalance-learn in my jupyter notebook&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# Install a pip package in the current Jupyter kernel
import sys
!{sys.executable} -m pip install -U imbalanced-learn&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then I applied the over-sampling strategy over my dataset. &lt;strong&gt;You don&amp;#8217;t have to tell the library which target class is under-represented, the algorithm figures it out&lt;/strong&gt;. As a result the execution it returns the new resampled X and y.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;over-sampling under-represented class&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from imblearn.over_sampling import SMOTE

smote = SMOTE()
X_resampled, y_resampled = smote.fit_resample(X, y)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now both target classes should be even:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;show classes new balance&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;new_df = X_resampled.copy()
new_df[&apos;status&apos;] = y_resampled.copy()

show_balance(new_df)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2021/02/ml_imbalanced_classes/imbalanced_03.png&quot; alt=&quot;balanced&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then I can start using the new resampled dataset to create the new training/test sets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;creating the new TRAINING/TEST sets&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, random_state=0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow up I&amp;#8217;m applying the new training/testing datasets to the baseline:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;baseline resampled&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.dummy import DummyClassifier

dummy = DummyClassifier(strategy = &quot;most_frequent&quot;).fit(X_train, y_train)
dummy.score(X_test, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;resampled dummy score&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;0.48672566371681414&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now the score is lower than before and close to the 50%. That makes sense due to the fact that now both target classes are even and there&amp;#8217;s no target class more predominant than the other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the most important thing is to check how the SVC classificator is now performing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;resampled SVC model&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.svm import SVC

svc = SVC().fit(X_train, y_train)
svc.score(X_test, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;resampled SVC score&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;0.6283185840707964&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well is performing slightly better than before, and it&amp;#8217;s performing way better than the baseline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
All target classes should be equally represented
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_2&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Oversampling_and_undersampling_in_data_analysis&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/Oversampling_and_undersampling_in_data_analysis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://imbalanced-learn.org/stable/index.html&quot; class=&quot;bare&quot;&gt;https://imbalanced-learn.org/stable/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://machinelearningmastery.com/tactics-to-combat-imbalanced-classes-in-your-machine-learning-dataset/&quot;&gt;machinelearningmastery.com article on dealing with imbalanced classes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;penalized_models&quot;&gt;Penalized models&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another technique is to tune machine learning algorithms to make them aware of the target class imbalance. Lets get the initial imbalanced train/test sets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now using SVC I&amp;#8217;m telling the algorithm to be aware of imbalance classes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tuned SVC&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.svm import SVC

# https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html
svc = SVC(class_weight=&apos;balanced&apos;).fit(X_train, y_train)
svc.score(X_test, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;score&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;0.6363636363636364&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the same goes with LogisticRegression:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tuned LogisticRegression&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.linear_model import LogisticRegression

# https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html
logistic = LogisticRegression(class_weight=&apos;balanced&apos;).fit(X_train, y_train)
logistic.score(X_test, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;score&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;0.6493506493506493&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to the Scikit documentation the “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y)). &lt;strong&gt;You can also tune it manually passing the weight associated with classes&lt;/strong&gt; in the form {class_label: weight}.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It seems that a general rule of thumb could be &lt;strong&gt;using the inverse of the class distribution present in the training dataset&lt;/strong&gt;. In the example class &quot;1&quot; had 73% and class &quot;2&quot; had 27%, so if we inverted the weights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;manually tuned&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.linear_model import LogisticRegression

# https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html
weights  = {1: 0.27, 2: 0.73}
logistic = LogisticRegression(class_weight=weights).fit(X_train, y_train)

logistic.score(X_test, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As expected I&amp;#8217;m getting a similar score:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;score&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;0.6493506493506493&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_3&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.analyticsvidhya.com/blog/2020/10/improve-class-imbalance-class-weights/&quot; class=&quot;bare&quot;&gt;https://www.analyticsvidhya.com/blog/2020/10/improve-class-imbalance-class-weights/&lt;/a&gt;
TODO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://machinelearningmastery.com/cost-sensitive-logistic-regression/&quot; class=&quot;bare&quot;&gt;https://machinelearningmastery.com/cost-sensitive-logistic-regression/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/files/2021/02/ml_imbalanced_classes/haberman_survival_data.ipynb&quot;&gt;Jupyter notebook source of this article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Links of the week</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2021/02/links_of_the_week_01.html"/>
        <updated>2021-02-05T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2021/02/links_of_the_week_01.html</id>
        <category term="ds"/>
        <category term="java"/>
        <category term="vue"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;data_science&quot;&gt;Data Science&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jack-clark.net/&quot;&gt;Import AI&lt;/a&gt;: Import AI is a weekly newsletter about artificial intelligence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://openai.com/&quot;&gt;OpenAI&lt;/a&gt;: OpenAI is an AI research and deployment company&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/dataprophet/4-big-data-architectures-data-streaming-lambda-architecture-kappa-architecture-and-unifield-d9bcbf711eb9&quot;&gt;Machine Learning Architecture&lt;/a&gt;: Once you start having problems scaling your ML projects, Which architecture would fit the best ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.quandl.com&quot;&gt;Quandl&lt;/a&gt;:  sources for financial, economic, and alternative datasets&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These days I&amp;#8217;m looking into model evaluation and there&amp;#8217;re plenty of links I&amp;#8217;ve used both to study and practice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://machinelearningmastery.com/feature-selection-with-real-and-categorical-data/&quot; class=&quot;bare&quot;&gt;https://machinelearningmastery.com/feature-selection-with-real-and-categorical-data/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://machinelearningmastery.com/classification-accuracy-is-not-enough-more-performance-measures-you-can-use/&quot; class=&quot;bare&quot;&gt;https://machinelearningmastery.com/classification-accuracy-is-not-enough-more-performance-measures-you-can-use/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://machinelearningmastery.com/tactics-to-combat-imbalanced-classes-in-your-machine-learning-dataset/&quot; class=&quot;bare&quot;&gt;https://machinelearningmastery.com/tactics-to-combat-imbalanced-classes-in-your-machine-learning-dataset/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://imbalanced-learn.org/stable/over_sampling.html&quot; class=&quot;bare&quot;&gt;https://imbalanced-learn.org/stable/over_sampling.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;vue&quot;&gt;Vue&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://euvl.github.io/vue-js-modal/&quot;&gt;vue-js-modal&lt;/a&gt;: a modal windows library&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/euvl/vue-notification&quot;&gt;vue-notification&lt;/a&gt;: Notifications library&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When bootstraping a project it comes handy to have a UI admin template to build the backoffice. I&amp;#8217;ve found two Vue projects that look great:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wobsoriano/v-dashboard&quot; class=&quot;bare&quot;&gt;https://github.com/wobsoriano/v-dashboard&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/pratik227/quasar-admin&quot; class=&quot;bare&quot;&gt;https://github.com/pratik227/quasar-admin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;re a couple more to keep in mind:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://adminlte.io/&quot;&gt;AdminLTE&lt;/a&gt;: A very popular HTML5 admin template&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/BootstrapDash/corona-free-dark-bootstrap-admin-template&quot;&gt;Corona&lt;/a&gt;: A dark theme HTML5 admin template&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java&quot;&gt;Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hierynomus/sshj&quot;&gt;SSHJ&lt;/a&gt;: Library to establish SSH and SCP sessions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hierynomus/sshj/blob/master/examples/src/main/java/net/schmizz/sshj/examples/Exec.java&quot;&gt;Simple example of SSHJ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/rxjava-string&quot;&gt;rxjava-string&lt;/a&gt;: Very util library to capture output executions and stream them to different destinations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/java-metrics&quot;&gt;Getting Hardware Metrics with Java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Voltage drop across resistors</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/11/el_voltage_drop.html"/>
        <updated>2020-11-30T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/11/el_voltage_drop.html</id>
        <category term="electronics"/>
        <category term="basics"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the ways to step down a circuit tension is using resistors and obtain a voltage drop between those resistors. The technique is pretty forward: in a circuit with a given tension the tension is chopped inversely proportional across the resistors sections depending on each resistor value. This means that a section with a higher resistor value will have a lower tension value.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;calculating_voltage_drop&quot;&gt;Calculating voltage drop&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow up we have a circuit with an input tension of &lt;strong&gt;3V&lt;/strong&gt; and &lt;strong&gt;two resistors&lt;/strong&gt; (R1 and R2) in series. That means that the total resistor value is R1 + R2. So lets say R1 has a value of &lt;strong&gt;1KΩ&lt;/strong&gt; and R2 has a value of &lt;strong&gt;2KΩ&lt;/strong&gt;, making a total value of &lt;strong&gt;3KΩ&lt;/strong&gt;. If we look at the picture, we would like to know what is the voltage drop across the first resistor, and what is the voltage drop across the second resistor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/el_voltage_drop/voltage_drop_circuit.png&quot; alt=&quot;example&quot; width=&quot;400&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Circuit&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The beauty of the problem is that &lt;strong&gt;in the end the sum of the voltage across R1 and R2 must be the total voltage we had from the input source&lt;/strong&gt;. That way we will know whether our calculations were ok or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;using_ohms_law&quot;&gt;Using Ohm&amp;#8217;s law&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, &lt;strong&gt;How do I calculate the voltage across R1 ?&lt;/strong&gt; Well, short answer is, &lt;strong&gt;using &lt;a href=&quot;https://en.wikipedia.org/wiki/Ohm%27s_law&quot;&gt;Ohm&amp;#8217;s law&lt;/a&gt;&lt;/strong&gt; which says that tension equals current times resistance. Here&amp;#8217;s the formula and its derivatives:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/0c02315625ddcbb871d00b77526a6eb9.png&quot; alt=&quot;0c02315625ddcbb871d00b77526a6eb9.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Ohm&amp;#8217;s law&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to use the Ohm&amp;#8217;s law in each section, first &lt;strong&gt;we need to know the total current of the circuit&lt;/strong&gt;. Applying the formula we&amp;#8217;ve got that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/380397178623ad7bdc4475f9333c4ad5.png&quot; alt=&quot;380397178623ad7bdc4475f9333c4ad5.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Calculate total current&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then with this value we can apply the Ohm&amp;#8217;s law in each section:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2d3b9b453b83f7662ce654005578744e.png&quot; alt=&quot;2d3b9b453b83f7662ce654005578744e.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Calculate voltage across section 1 and section 2&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s another formula based on Ohm&amp;#8217;s law that I&amp;#8217;ve found in this &lt;a href=&quot;https://www.youtube.com/watch?v=XxLKfAZrhbM&amp;amp;list=PLYVmB1muVDvVqIoek40gkdb9-kYH9JHni&amp;amp;index=4&quot;&gt;Youtube video&lt;/a&gt;, I&amp;#8217;ve found it very direct and practical:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/ffc62ebbd9ec1126e6b72e14ddf83f78.png&quot; alt=&quot;ffc62ebbd9ec1126e6b72e14ddf83f78.png&quot; height=&quot;70&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Calculate voltage across section with new formula&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I mentioned earlier, we can now whether this new formula works or not because we should get the same results:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/5504335e95897cd329152654796047ba.png&quot; alt=&quot;5504335e95897cd329152654796047ba.png&quot; height=&quot;120&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Calculate voltage across section 1 and section 2&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, so we can use each section to provide different tension to different components.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;calculating_power_dissipation&quot;&gt;Calculating Power dissipation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resistor choice should take into account the power dissipation. The amount of Watts the resistors are going to dissipate. &lt;strong&gt;A low ohm value for your resistors could end up with your resistors burning out in a blink of an eye&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/c45553e0fb5dda4fed3eca95056244da.png&quot; alt=&quot;c45553e0fb5dda4fed3eca95056244da.png&quot; height=&quot;70&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. Calculate power dissipation&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this formula in mind, we can calculate the power dissipation of our current resistors:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/953cf3cb8e7f088db40a5a9cb34d288b.png&quot; alt=&quot;953cf3cb8e7f088db40a5a9cb34d288b.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. Current power dissipation&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see is almost nothing. Maybe we could even chose a lower resistor value. But imagine we were using resistors adding up &lt;strong&gt;3Ω&lt;/strong&gt; with an input value of &lt;strong&gt;12V&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/d9a13e6c06c6befea1320810705d3b5f.png&quot; alt=&quot;d9a13e6c06c6befea1320810705d3b5f.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 9. catastrophic&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well &lt;strong&gt;72W&lt;/strong&gt; for such a small circuit is a lot of heat to handle and resistors could end up burning out. So bear in mind to calculate the power dissipation to avoid further problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;measuring_voltage_drop_with_multimeter&quot;&gt;Measuring voltage drop with multimeter&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we know how to split the circuit so that we can have different voltage sections, I would like to know how to wire different components requiring different voltage. I drawed a couple of examples showing how I should be using the multimeter to make sure sections have the expected voltage drop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/el_voltage_drop/voltage_drop_multimeter.png&quot; alt=&quot;example&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 10. Multimeter measurement&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a_practical_example&quot;&gt;A practical example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve a led which supports maximum tension of &lt;strong&gt;2V&lt;/strong&gt; and a couple of &lt;strong&gt;AA&lt;/strong&gt; batteries providing &lt;strong&gt;3V&lt;/strong&gt; to feed the circuit. I&amp;#8217;ve put a couple of resistors following the previous circuit layout to extract the &lt;strong&gt;2V&lt;/strong&gt; required for the led across the second resistor section (2KΩ).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/el_voltage_drop/led_circuit.jpg&quot; alt=&quot;example&quot; height=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 11. Led circuit&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ohm%27s_law&quot;&gt;Ohm&amp;#8217;s law (Wikipedia)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=YYSKRU1kDt4&quot;&gt;How To Calculate The Voltage Drop Across a Resistor - Electronics (Youtube)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=XxLKfAZrhbM&amp;amp;list=PLYVmB1muVDvVqIoek40gkdb9-kYH9JHni&amp;amp;index=4&quot;&gt;Voltage divider tutorial (Youtube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Credit approval using SVM</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/11/ml_slc_svm_german_credit.html"/>
        <updated>2020-11-15T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/11/ml_slc_svm_german_credit.html</id>
        <category term="ds"/>
        <category term="ml"/>
        <category term="python"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;SVM clearly explained!&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here I&amp;#8217;m just working with a particular case of SVM, if you&amp;#8217;d like to known more, I really recommend you this &lt;a href=&quot;https://www.youtube.com/watch?v=efR1C6CvhmE&quot;&gt;wonderful video&lt;/a&gt; explaining how SVM works in a nutshell for linear and non linear spaces. There&amp;#8217;re also a few other references in the resources section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a_little_bit_of_theory&quot;&gt;A little bit of theory&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another type of supervised learning model is SVM or &lt;strong&gt;Support Vector Machines&lt;/strong&gt; or &lt;strong&gt;SVM&lt;/strong&gt;. SVM can be used for both regression and classification purposes. SVM tries to find a decision boundary that best separates different target classes. For linear spaces with two different target classes, we need to find the line (decision boundary for 1-dimensional space) that best classifies both classes. And which is the best line ? The one that maximizes the margin from both classes to the decision boundary or hyperplane.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SVM rewards classifiers by the &lt;strong&gt;maximum margin classifier&lt;/strong&gt; between two different target classes. &lt;strong&gt;The higher the distance between two classes the higher is the classifier ranked&lt;/strong&gt;. This margin can be customized by the classifier&amp;#8217;s regularization parameter (normally named &lt;strong&gt;C&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How do we know which is the best margin ? Using &lt;a href=&quot;https://towardsdatascience.com/cross-validation-in-machine-learning-72924a69872f?gi=8733cf0be132&quot;&gt;cross-validation&lt;/a&gt; to validate how well the different margins perform and pick up the one that performs the best. Some rules of thumb to keep in mind:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch compressed&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Regularization parameter &amp;#169; consequences&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;AS C &amp;#8230;&amp;#8203;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;REGULARIZATION&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;OVERFITTING&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;MARGIN&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;SENSITIVE TO IND. VALUES&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;INCREASES&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DECREASES&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;EASIER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SMALLER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;YES&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DECREASES&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;INCREASES&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;HARDER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BIGGER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NO&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s also the &lt;strong&gt;gamma&lt;/strong&gt; parameter when the SVM kernel used is &lt;a href=&quot;https://scikit-learn.org/stable/auto_examples/svm/plot_rbf_parameters.html&quot;&gt;Radial Basis Function (RBF)&lt;/a&gt; (which is the default in scikit learn SVC). The gamma parameter defines how far the influence of a single training example reaches, with low values meaning ‘far’ and high values meaning ‘close’. The behavior of the model is very sensitive to the gamma parameter. &lt;strong&gt;If gamma is too large, the radius of the area of influence of the support vectors only includes the support vector itself and no amount of regularization with C will be able to prevent overfitting&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch compressed&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Gamma parameter consequences&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;AS Gamma &amp;#8230;&amp;#8203;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;REGULARIZATION&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;OVERFITTING&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;MARGIN&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;SENSITIVE TO IND. VALUES&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;INCREASES&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DECREASES&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;EASIER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SMALLER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CLOSE&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DECREASES&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;INCREASES&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;HARDER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BIGGER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;FAR&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;credit_risks&quot;&gt;Credit risks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m using &lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets/Statlog+%28German+Credit+Data%29&quot;&gt;a dataset&lt;/a&gt; that classifies people described by a set of attributes as good or bad credit risks. There dataset has two versions, I&amp;#8217;m using the dataset with all attributes converted to numeric values (german.data-numeric file).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-d33b4b7e5f331db6af3c5f0aeb387b79.png&quot; alt=&quot;process steps&quot; width=&quot;90%&quot; height=&quot;196&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;process steps&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;loading_and_preparing_data&quot;&gt;Loading and preparing data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all I&amp;#8217;m loading the credit data and see how it looks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;loading data&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

cols = [
    &apos;status&apos;,
    &apos;duration&apos;,
    &apos;history&apos;,
    &apos;purpose&apos;,
    &apos;amount&apos;,
    &apos;savings&apos;,
    &apos;employment_since&apos;,
    &apos;installment_rate&apos;,
    &apos;personal_status&apos;,
    &apos;debtors&apos;,
    &apos;residence_since&apos;,
    &apos;property&apos;,
    &apos;age&apos;,
    &apos;installment_others&apos;,
    &apos;housing&apos;,
    &apos;existing_credits&apos;,
    &apos;job&apos;,
    &apos;people_being_liable&apos;,
    &apos;telephone&apos;,
    &apos;foreign_worker&apos;,
    &apos;label&apos;
]

credit = pd.read_csv(&apos;german.data&apos;, engine=&apos;python&apos;, sep=&apos;\s+&apos;, names=cols)
credit.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_svm_german_credit/svm_loading_data.png&quot; alt=&quot;data&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. raw data&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem is that I need to get rid of categorical data and convert everything into numerical data. I&amp;#8217;m creating a function that takes all unique values of a given series and maps every categorical value to a given number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;converting categorical data to numeric&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

def to_numerical(series):
    uniques = np.sort(series.unique())
    nvalues = range(1, len(uniques) + 1)
    xmap    = dict(zip(uniques, nvalues))

    return series.map(xmap).astype(int)


cols_not_to_convert = [
    &apos;duration&apos;,
    &apos;installment_rate&apos;,
    &apos;age&apos;,
    &apos;amount&apos;,
    &apos;existing_credits&apos;,
    &apos;people_being_liable&apos;,
    &apos;label&apos;
]
cols_to_convert = [e for e in cols if e not in cols_not_to_convert]

for col in cols_to_convert:
    credit[col] = to_numerical(credit[col])

credit.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now all columns show numerical data ready to be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_svm_german_credit/svm_to_numerical.png&quot; alt=&quot;to_numerical&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. numerical data&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;soft_features_choice&quot;&gt;Soft features choice&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I&amp;#8217;m usually doing nowadays, the first thing I do is to create a correlation matrix so I can see which features could clearly work with the label chosen and which don&amp;#8217;t&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;correlation matrix&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

corr_matrix = np.corrcoef(credit.T)

plt.figure(figsize=(15, 15))
sns.heatmap(
    corr_matrix,
    cbar=False,
    annot=True,
    square=True,
    xticklabels=cols,
    yticklabels=cols
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_svm_german_credit/svm_correlation_matrix.png&quot; alt=&quot;correlation&quot; width=&quot;40%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. correlation matrix&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;creating_xy&quot;&gt;Creating X,y&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the correlation matrix, I&amp;#8217;ve chosen those features tighly related with the label, and those that are tighly related to the aforementioned features. With this information I can now create the &lt;strong&gt;X&lt;/strong&gt; (features) and &lt;strong&gt;y&lt;/strong&gt; label sets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;feature_cols = [
    &apos;duration&apos;,
    &apos;amount&apos;,
    &apos;job&apos;,
    &apos;age&apos;,
    &apos;history&apos;,
    &apos;employment_since&apos;,
    &apos;telephone&apos;,
    &apos;existing_credits&apos;,
    &apos;savings&apos;,
    &apos;property&apos;
]

X = credit[feature_cols]
y = credit[&apos;label&apos;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cross_validation&quot;&gt;Cross validation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While reading about SVM, it came across the concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-validation_(statistics)&quot;&gt;cross validation&lt;/a&gt;.  In this particular case is helping me to choose &lt;strong&gt;the best value for gamma&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import validation_curve

def extract_best_numbers(params, train_pcts, test_pcts):
    trains = pd.DataFrame(dict(zip(params, train_pcts))).T
    tests  = pd.DataFrame(dict(zip(params, test_pcts))).T

    trains[&apos;train_mean&apos;] = trains.mean(axis=1)
    tests[&apos;test_mean&apos;]  = tests.mean(axis=1)

    return (trains[[&apos;train_mean&apos;]]
        .copy()
        .merge(
            tests[[&apos;test_mean&apos;]].copy(),
            left_index=True,
            right_index=True
        ))

def cross_validation_gamma(X, y, gamma_min, gamma_max):
    param_range = np.linspace(gamma_min, gamma_max, num=20)
    train_scores, test_scores = validation_curve(
        SVC(),
        X,
        y,
        param_name=&quot;gamma&quot;,
        param_range=param_range,
        cv=5)

    return extract_best_numbers(param_range, train_scores.tolist(), test_scores.tolist())

gamma_dataframe = cross_validation_gamma(X, y, 0.001, 0.1)
gamma_dataframe.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cross validation results returns the gamma values and the mean scores for training and test datasets. I should look for the results with higher test_mean and lower train_mean. Meaning that &lt;strong&gt;I&amp;#8217;m looking for a value of gamma that maximizes the generalization and minimizes the complexity of the model&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_svm_german_credit/svm_cross_validation_gamma_values.png&quot; alt=&quot;gamma&quot; width=&quot;20%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Gamma values&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wanted to show visually how training and test datasets were behaving depending on the gamma values provided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import matplotlib.pyplot as plt

def show_svc_param_performance(dataframe, param_name):
    x = dataframe.index

    plt.figure(figsize=(10, 6))
    plt.title(&quot;SVC {}&quot;.format(param_name.upper()))
    plt.xlabel(&apos;{} VALUE&apos;.format(param_name.upper()))
    plt.ylabel(&apos;MODEL SCORE&apos;)
    plt.grid(axis=&apos;both&apos;)
    plt.yticks(np.arange(0.00, 1.10, step=0.10))
    plt.xticks(np.arange(0.00, 1.10, step=0.10))

    # drawing test and training performance lines
    plt.plot(x, dataframe[&apos;train_mean&apos;], label=&apos;TRAINING SCORE&apos;, color=&apos;red&apos;)
    plt.plot(x, dataframe[&apos;test_mean&apos;], label=&apos;TEST SCORE&apos;, color=&apos;green&apos;)

    # drawing limiy where train score is still ok
    limit_x = dataframe[dataframe[&apos;train_mean&apos;] &amp;gt;= 0.80].index[0]
    plt.vlines(limit_x, ymin=0, ymax=1, linestyle=&apos;--&apos;, color=&apos;red&apos;, alpha=0.4)
    plt.annotate(&quot;Recommended Gamma: {}&quot;.format(limit_x), xy=(limit_x + 0.005, 0.5))
    plt.legend(loc=&quot;lower right&quot;)
    plt.show()

show_svc_param_performance(gamma_dataframe, &quot;gamma&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_svm_german_credit/svm_cross_validation_gamma_chart.png&quot; alt=&quot;gamma_chart&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Gamma evolution chart&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;splitting_dataset&quot;&gt;Splitting Dataset&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok so now that I know the best value of gamma, I can start preparing the training and test datasets that are going to feed the model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=10)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;fit_the_model_and_evaluate_scores&quot;&gt;Fit the model and evaluate scores&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then I&amp;#8217;m fitting the model and getting the score for the training and test datasets using the best gamma value I was able to get. If you use &lt;strong&gt;&apos;auto&apos;&lt;/strong&gt; as the value for gamma, scikit learn will use &lt;strong&gt;1 / n_features&lt;/strong&gt; instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Fit the model and evaluate scores&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.svm import SVC

gamma_value = 0.001

svc = SVC(gamma=gamma_value).fit(X_train, y_train)

score_train = svc.score(X_train, y_train)
score_test  = svc.score(X_test, y_test)

score_train, score_test&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scores&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;(0.8066666666666666, 0.68)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although the training dataset is not bad, the test dataset is still far from giving me a fair result. But it&amp;#8217;s clear that &lt;strong&gt;the gamma value helped to avoid overfitting&lt;/strong&gt; the model.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;iterating&quot;&gt;Iterating&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to help the model I used the &lt;strong&gt;sklearn.preprocessing.MinMaxScaler&lt;/strong&gt; transformation to make all features to share a common scale. It improved a bit the performance of the test scoring and reduced the model complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;transforming the features&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled  = scaler.transform(X_test)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I ran the &lt;strong&gt;cross_validation_curve&lt;/strong&gt; from &lt;strong&gt;1 to 5&lt;/strong&gt; to see which value of gamma would be the best:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;getting gamma values&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;scaled_cross_validation = cross_validation_gamma(X_train_scaled, y_train, 1, 5)
scaled_cross_validation.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally I executed the model again with the new gamma value:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.preprocessing import MinMaxScaler

svc = SVC(gamma=1).fit(X_train_scaled, y_train)

score_train = svc.score(X_train_scaled, y_train)
score_test  = svc.score(X_test_scaled, y_test)

score_train, score_test&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Giving me a slightly better result&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;score&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;(0.7666666666666667, 0.724)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some final thoughs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I&amp;#8217;m not convinced on &lt;strong&gt;how to extract best gamma values&lt;/strong&gt; from the cross validation procedure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is there a combinatorial way &lt;strong&gt;to get the best (c, gamma) pair&lt;/strong&gt; that I still don&amp;#8217;t know about ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Maybe SVM was not the best technique&lt;/strong&gt; for this classification problem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It seems that &lt;strong&gt;normalization helps to get better results in SVM&lt;/strong&gt; problems&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/files/2020/11/ml_svm_german_credit/german-credit.ipynb&quot;&gt;Jupyter Notebook source code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://scikit-learn.org/stable/modules/cross_validation.html&quot;&gt;Cross validation with Scikit Learn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/cross-validation-in-machine-learning-72924a69872f?gi=8733cf0be132&quot;&gt;Cross Validation in Machine Learning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://monkeylearn.com/blog/introduction-to-support-vector-machines-svm/&quot;&gt;Introduction to SVM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=efR1C6CvhmE&quot;&gt;Support Vector Machines, clearly exlained!! (Youtube)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets/Statlog+%28German+Credit+Data%29&quot;&gt;German Credit DataSet (UCI&amp;#8217;s ML dataset repository)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Logistic Regression: firewall rules</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/11/ml_slc_logistic_regression.html"/>
        <updated>2020-11-14T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/11/ml_slc_logistic_regression.html</id>
        <category term="ds"/>
        <category term="ml"/>
        <category term="python"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although &lt;strong&gt;Logistic regression&lt;/strong&gt; is a regression technique, due to the logistic function applied to it, it can constraint target values from a linear regression into discrete values and therefore act as a classification technique. Why not using KNN classification ? Well as a regression technique &lt;strong&gt;it benefits from regularization&lt;/strong&gt;, so for a huge number of features it could reduce dimensionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are &lt;strong&gt;three types of logistic regression&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;binary&lt;/strong&gt;: only two possible target values&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;multinomial&lt;/strong&gt;: several possible target values without ordering&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ordinal&lt;/strong&gt;: several possible target values with a specific ordering&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;classifying_firewall_rules&quot;&gt;Classifying firewall rules&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m practicing Binary Logistic Regression with UCI&amp;#8217;s &lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets/Internet+Firewall+Data&quot;&gt;Internet Firewall Data&lt;/a&gt; which is a data set collected from the internet traffic records on a university&amp;#8217;s firewall. &lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets.php&quot;&gt;UCI datasets&lt;/a&gt; are sorted depending on whether they&amp;#8217;re good candidates for regression, classification or for both. In this ocassion I&amp;#8217;d like to classify a set of firewall rules into two target values &lt;strong&gt;allowed&lt;/strong&gt; or &lt;strong&gt;not allowed&lt;/strong&gt;. Lets load the data and see how it looks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;loading and simplifying data&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

firewall = pd.read_csv(&apos;firewall.csv&apos;)

# simplifying dataframe column names
firewall.columns = [
    &apos;source&apos;,
    &apos;destination&apos;,
    &apos;nat_source&apos;,
    &apos;nat_destination&apos;,
    &apos;action&apos;,
    &apos;b_total&apos;,
    &apos;b_sent&apos;,
    &apos;b_received&apos;,
    &apos;packets&apos;,
    &apos;time&apos;,
    &apos;p_sent&apos;,
    &apos;p_received&apos;
]

firewall.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slc_logistic_regression/dataset_source.png&quot; alt=&quot;source&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because I&amp;#8217;d like to do a binary classification, I need to narrow down the multi-valued column &lt;strong&gt;action&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;action has several possible values&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;firewall[&apos;action&apos;].unique()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;array([&apos;allow&apos;, &apos;drop&apos;, &apos;deny&apos;, &apos;reset-both&apos;], dtype=object)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s why I&amp;#8217;m creating the &lt;strong&gt;allowed&lt;/strong&gt; column with only two possible values &lt;strong&gt;1 for allow&lt;/strong&gt; and &lt;strong&gt;0 for the rest&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;create label column&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# simplifying actions to allowed or not allowed
firewall[&apos;allowed&apos;] = firewall[&apos;action&apos;].apply(lambda tag: 1 if tag == &apos;allow&apos; else 0)
firewall            = firewall.drop(&apos;action&apos;, axis=1)
firewall.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slc_logistic_regression/dataset_with_allowed.png&quot; alt=&quot;allowed&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, first I&amp;#8217;d like to see the correlation matrix to see which features are the best to use in the logistic regression training:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;correlation matrix&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

corr_matrix = np.corrcoef(firewall.T)

plt.figure(figsize=(10, 10))
sns.heatmap(
    corr_matrix,
    cbar=False,
    annot=True,
    square=True,
    xticklabels=firewall.columns,
    yticklabels=firewall.columns)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slc_logistic_regression/correlation_matrix.png&quot; alt=&quot;matrix&quot; width=&quot;40%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It seems that &lt;strong&gt;nat_source&lt;/strong&gt;, &lt;strong&gt;nat_destination&lt;/strong&gt; and &lt;strong&gt;time&lt;/strong&gt; have the highest rates. With that in mind, I can now create &lt;strong&gt;X&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt; variables and the &lt;strong&gt;training and test sets&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;features and training/test sets&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.model_selection import train_test_split

label    = &apos;allowed&apos;
features = [&apos;nat_source&apos;, &apos;nat_destination&apos;, &apos;time&apos;]

X = firewall[features]
y = firewall[label]

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=50)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because &lt;strong&gt;there are several features working in different scales&lt;/strong&gt; (e.g. time, ports) it would be better to apply some &lt;strong&gt;normalization&lt;/strong&gt; to the feature set, in other words, I need to transform them to a common scale. For that I&amp;#8217;m using the &lt;strong&gt;MinMaxScaler&lt;/strong&gt; transformation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scaling features&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.preprocessing import MinMaxScaler

# needed to reduce complexity
# https://stackoverflow.com/questions/62658215/convergencewarning-lbfgs-failed-to-converge-status-1-stop-total-no-of-iter
scaler         = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled  = scaler.transform(X_test)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now I can fit the &lt;strong&gt;LogisticRegression&lt;/strong&gt; class with the training scaled dataset, check the score for training and test set, and see how well the model performs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;applying regression&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.linear_model import LogisticRegression

logistic = LogisticRegression().fit(X_train_scaled, y_train)
logistic.score(X_train_scaled, y_train), logistic.score(X_test_scaled, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which returns the following scores:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scores&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;(0.9711489552178071, 0.9730818531404505)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally I&amp;#8217;m picking the first two samples with different &lt;strong&gt;allowed&lt;/strong&gt; value to see if the prediction works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;checking sample&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;validation_test_set = (firewall
    .drop_duplicates(subset=&apos;allowed&apos;, keep=&quot;first&quot;)
    .copy()
    .reset_index(drop=True))

validation_test_x = validation_test_set.loc[:, features]
validation_test_y = validation_test_set.loc[:, label]

validation_test_x_scaled = scaler.transform(validation_test_x)

logistic.predict(validation_test_x_scaled) == [1, 0]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately this is not a good proof, these two samples were already part of the training or test datasets. As a reminder for my future self I should be keeping some part of the source dataset away from the training/test datasets to do a more serious validation at the end of the process.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/files/2020/11/ml_slc_logistic_regression/logistic_regression_firewall.ipynb&quot;&gt;Jupyter notebook of the article&amp;#8217;s source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Logistic_regression&quot;&gt;Logistic Regression (Wikipedia)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/logistic-regression-detailed-overview-46c4da4303bc&quot;&gt;Logistic Regression: Detailed Overview (article)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets/Internet+Firewall+Data&quot;&gt;UCI&amp;#8217;s Internet Firewall Data dataset&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Linear Regression notes</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/11/ml_slr_overview.html"/>
        <updated>2020-11-13T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/11/ml_slr_overview.html</id>
        <category term="ds"/>
        <category term="ml"/>
        <category term="python"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Classification is a great method to predict discrete values from a given dataset, but sometimes you need to &lt;strong&gt;predict a continuous value&lt;/strong&gt;, e.g: height, weight, prices&amp;#8230;&amp;#8203; And that&amp;#8217;s when linear regression techniques come handy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what_is_linear_regression&quot;&gt;What is linear regression ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The definition that I read in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_regression&quot;&gt;Wikipedia&lt;/a&gt; didn&amp;#8217;t help me at all. Instead when I related it with a line, it started to make sense to me. If we&amp;#8217;ve got a linear function, that is, a function describing a line, where &lt;strong&gt;&amp;#373; is the slope&lt;/strong&gt; of the line and &lt;strong&gt;b is called the intercept&lt;/strong&gt; which is a constant value:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/29a4f9fc149861c3868f87f96962265e.png&quot; alt=&quot;29a4f9fc149861c3868f87f96962265e.png&quot; width=&quot;275&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. linear function&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For every &lt;strong&gt;x&lt;/strong&gt; value a new point will be drawn and eventually altogether will form a line. So, if you think about it visually, given a set of input values, a simple linear regression algorithm will try to come up with a line trying to pass as close as possible to the majority of the input dataset points. So if you try to predict an output value from the input values, the machine learning process will pick up a value from that line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slr_overview/linear_regression.png&quot; alt=&quot;linear_regression&quot; width=&quot;40%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Simple linear regression&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;re differences between the types of linear regression techniques depending on the presence of &lt;strong&gt;regularization&lt;/strong&gt; (Ridge and Lasso), or the lack of it (Simple Linear Regression). There&amp;#8217;s also important the use of &lt;strong&gt;polynomial transformation&lt;/strong&gt; and &lt;strong&gt;normalization&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;simple_linear_regression&quot;&gt;Simple Linear Regression&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most popular linear regression uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Least_squares&quot;&gt;least squares&lt;/a&gt; technique. It tries to find a &lt;strong&gt;slope&lt;/strong&gt; (w) and &lt;strong&gt;constant value&lt;/strong&gt; (b) that &lt;strong&gt;minimizes the mean squared error of the model&lt;/strong&gt;. It doesn&amp;#8217;t have parameters to control model complexity, everything it needs is estimated from training data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Although it could be easier, I didn&amp;#8217;t want to made up a dataset to practice, because one of the things I&amp;#8217;m finding most difficult while learning machine learning is to extrapolate simple examples to real world problems. I also tried to use several public datasets out there that I thought they could match well with a regression solution, but in the end and after having a dismal failure trying to make it work I had to gave up and use a specific dataset prepared for regression. The actual dataset used for this entry is a &lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset&quot;&gt;Bike sharing dataset&lt;/a&gt; from the &lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets.php&quot;&gt;UCI Dataset repository for machine learning&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m loading the &lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset&quot;&gt;Bike sharing daily dataset&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;reading daily rental data&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd
from datetime import datetime, date

bikes = pd.read_csv(&quot;day.csv&quot;, parse_dates=[&apos;dteday&apos;])
bikes.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, I&amp;#8217;d like to see how features could be related to each other using the seaborn&amp;#8217;s correlation heatmap:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;creating correlation table&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# use all columns except the date column
bikes = bikes.loc[:, bikes.columns != &apos;dteday&apos;]
corr  = np.corrcoef(bikes.T)

plt.figure(figsize=(10, 10))
sns.heatmap(
    corr,
    cbar=False,
    annot=True,
    yticklabels=bikes.columns,
    xticklabels=bikes.columns)
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slr_overview/correlation_table.png&quot; alt=&quot;header&quot; width=&quot;35%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. correlation table&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a lot of features, but I&amp;#8217;m focusing on just choosing one, &lt;strong&gt;temp&lt;/strong&gt; which is the normalized temperature in Celsius the day of the rental. I&amp;#8217;d like to see how it looks like visually the relationship between registered number of rentals (registered variable) and the temperature feature I&amp;#8217;ve chosen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pair plot&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import seaborn as sns

sns.pairplot(bikes[[&apos;temp&apos;, &apos;registered&apos;]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slr_overview/pairplot.png&quot; alt=&quot;header&quot; width=&quot;35%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. pair plot&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What I&amp;#8217;m looking for at this point in the scatter plot, is tendencies. In this case it seems that points tend to go in diagonal from the bottom left to the upper right part of the graph. So far, the more tendency I see the better it seems to work. Now lets create a linear regression using the &lt;strong&gt;LinearRegression&lt;/strong&gt; class from scikit-learn:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;creating a simple linear regression&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

feats = [&apos;temp&apos;]
label = &apos;registered&apos;

X = bikes[feats]
y = bikes[label]

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

linear_reg  = LinearRegression().fit(X_train, y_train)
score_train = linear_reg.score(X_train, y_train)
score_test  = linear_reg.score(X_test, y_test)

print(&quot;train: {}, test: {}&quot;.format(score_train, score_test))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scores&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;train: 0.2894397189330029, test: 0.29427542275712537&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we draw the regression line we&amp;#8217;ve got:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;regression line&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import matplotlib.pyplot as plt

y_predict = linear_reg.predict(X_test)

plt.figure(figsize=(8, 8))
plt.title(&quot;Linear Regression (Least Squares - No Polynomial)&quot;)
plt.xlabel(&apos;temp&apos;)
plt.ylabel(&apos;registered&apos;)
plt.scatter(X[&apos;temp&apos;], y, edgecolor=&apos;black&apos;, color=&apos;w&apos;)
plt.plot(X_test, y_predict, color=&apos;orange&apos;)
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slr_overview/linear_regression.png&quot; alt=&quot;header&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. regression line&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see a straight line won&amp;#8217;t be able to do good predictions. A way of helping the linear transformation to adapt better to the shape of the model is to use a polynomial transformation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;polynomial_transformation&quot;&gt;Polynomial Transformation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the problem doesn&amp;#8217;t fit easily a straight line or there are many features, it could become complicated to find a good relationship between them, specially with a simple line. The &lt;strong&gt;polynomial transformation&lt;/strong&gt; helps finding those relationships. Applying a polynomial transformation to our problem can help the linear regression to adapt better to the shape of the data. This is the same linear regression example, but this time applying the &lt;strong&gt;PolynomialFeatures&lt;/strong&gt; class prior to the linear regression fit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;applying polynomial transformation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures

feats = [&apos;temp&apos;]
label = &apos;registered&apos;

X = bikes[feats]
y = bikes[label]

degrees = 3
X_poly  = PolynomialFeatures(degree=degrees).fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_poly, y, random_state=0)

linear_reg  = LinearRegression().fit(X_train, y_train)
score_train = linear_reg.score(X_train, y_train)
score_test  = linear_reg.score(X_test, y_test)

print(&quot;train: {}, test: {}&quot;.format(score_train, score_test))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scores&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;train: 0.3427117865309586, test: 0.371685603196769&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the polynomial transformation is creating more features, they cover a wider spectrum of the data, therefore more likely to do better predictions, at least in the training dataset. If we draw now the result:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import matplotlib.pyplot as plt

y_predict = linear_reg.predict(X_test)

plt.figure(figsize=(8, 6))
plt.title(&quot;Linear Regression (Least Squares - Polynomial)&quot;)
plt.xlabel(&apos;temp&apos;)
plt.ylabel(&apos;registered&apos;)
plt.scatter(X[&apos;temp&apos;], y, edgecolor=&apos;black&apos;, color=&apos;w&apos;)

colors = {1: &apos;orange&apos;, 2: &apos;green&apos;, 3: &apos;red&apos;}

# drawing each new feature derived from the initial temp feature
for i in range(1, degrees + 1):
    plt.plot(X_test[:,i], y_predict, color=colors[i], alpha=0.6)

plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slr_overview/linear_regression_polynomial.png&quot; alt=&quot;polynomial&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. polynomial regression&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which covers much more than the previous example. However there are a couple of things to keep in mind when applying the polynomial transformation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Polynomial transformation with a &lt;strong&gt;high degree value could overfit the model&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s better to &lt;strong&gt;combine it with a regularized regression method&lt;/strong&gt; like Ridge.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets.php&quot;&gt;UCI public datasets&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset&quot;&gt;Bike sharing dataset&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Least_squares&quot;&gt;least squares&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;regularization_and_normalization&quot;&gt;Regularization and Normalization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;regularization&quot;&gt;Regularization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Regularization is a technique used &lt;strong&gt;to reduce the model complexity&lt;/strong&gt; and thus it &lt;strong&gt;helps dealing with overfitting&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It reduces the model size by shrinking the number of parameters the model has to learn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It adds weight to the values so that it tries to favor smaller values&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Regularization penalizes certain values by &lt;strong&gt;using a loss function with a cost&lt;/strong&gt;. This cost could be of type:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;L1&lt;/strong&gt;: The cost is proportional to the &lt;strong&gt;absolute value&lt;/strong&gt; of the weight coefficients (Lasso)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;L2&lt;/strong&gt;: The cost is proportional to the &lt;strong&gt;square of the value&lt;/strong&gt; of the weight coefficients (Ridge)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Regularization really shines when there is a high dimensionality, meaning there&amp;#8217;re multiple features. So in these examples it won&amp;#8217;t make a huge impact with the scores.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;normalization&quot;&gt;Normalization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data normalization is the process of rescaling one or more features to a common scale. It&amp;#8217;s normally &lt;strong&gt;used when features used to create the model have different scales&lt;/strong&gt;. There are a few advantages of using normalization is such scenario:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It could improve the numerical stability of your model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It could speed up the training process&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Normalization is specially important when applying certain regression techniques, as regression is sensitive to model feature adjustements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Because in this article I&amp;#8217;m only using &lt;strong&gt;ONE&lt;/strong&gt; feature, normalization is not going to make much difference but, when using multiple features, and each of them in different scales, then we should use normalization.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_2&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/supervised-learning-basics-of-linear-regression-1cbab48d0eba&quot;&gt;Basics of linear regression&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/regularization-in-machine-learning-76441ddcf99a&quot;&gt;Regularization in machine learning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@vigneshmadanan/linear-regression-basics-and-regularization-methods-b40359b0aea5&quot;&gt;Linear regression basics and regularization methods&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Normalization_(statistics)&quot;&gt;Normalization in Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@urvashilluniya/why-data-normalization-is-necessary-for-machine-learning-models-681b65a05029&quot;&gt;Why data normalization is necessary for machine learning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/understand-data-normalization-in-machine-learning-8ff3062101f0&quot;&gt;Understand Data Normalization in machine learning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ridge&quot;&gt;Ridge&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Follows the leat-squares criterion but it uses regularization as a penalty for large variations in &lt;strong&gt;w&lt;/strong&gt; parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regularization prevents overfitting by restricting the model, it normally reduces its complexity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regularization is controlled by the &lt;strong&gt;alpha&lt;/strong&gt; parameter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The high the value of alpha the simpler the model, that is, the model is less likely to overfit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now I&amp;#8217;m using &lt;strong&gt;Ridge&lt;/strong&gt; class with the same dataset:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;using Ridge regression&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.linear_model import Ridge
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

ridge = Ridge(alpha=20).fit(X_train, y_train)

score_train = ridge.score(X_train, y_train)
score_test = ridge.score(X_test, y_test)

print(&quot;train: {}, test: {}&quot;.format(score_train, score_test))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Giving me the following scores:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;train: 0.21131995467057785, test: 0.19818161857049388&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although it seems worst than the polynomial example, the takeaway idea here is that the Ridge regression along with a high value of alpha is going to reduce the complexity of the model and make the generalization more estable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ridge regression score can be improved by applying normalization to the source dataset. Is important for some ML methods that all features are on the same scale. In this case we&amp;#8217;re apply a &lt;strong&gt;MinMax&lt;/strong&gt; normalization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Ridge with scaled set&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.linear_model import Ridge
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

scaler         = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train) # fit with the X_train
X_test_scaled  = scaler.transform(X_test)      # apply THE SAME scaler

ridge = Ridge(alpha=20).fit(X_train_scaled, y_train)

score_train = ridge.score(X_train_scaled, y_train)
score_test  = ridge.score(X_test_scaled, y_test)

print(&quot;train: {}, test: {}&quot;.format(score_train, score_test))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scores&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;train: 0.24767875041471266, test: 0.23615269197631883&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can use the scaled &lt;strong&gt;X&lt;/strong&gt; to train the Ridge regression. However there&amp;#8217;re some basic tips to be aware of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fit the scaler with the training set&lt;/strong&gt; and then apply &lt;strong&gt;the same scaler&lt;/strong&gt; to transform the training and test feature sets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&amp;#8217;t use the test dataset to fit the scaler&lt;/strong&gt;. That could lead to data leakage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;lasso&quot;&gt;Lasso&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It uses a L1 type regularization penalty, meaning &lt;strong&gt;it minimizes the sum of the absolute values of the coefficients&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It works as a kind of &lt;strong&gt;feature selection&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It also has an &lt;strong&gt;alpha&lt;/strong&gt; parameter to control regularization&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;using lasso regression&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.linear_model import Ridge, Lasso

lasso = Lasso(alpha=20).fit(X_train, y_train)

score_train = lasso.score(X_train, y_train)
score_test = lasso.score(X_test, y_test)

print(&quot;train: {}, test: {}&quot;.format(score_train, score_test))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scores&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;train: 0.2842911095363777, test: 0.2813866438355652&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally using &lt;strong&gt;MinMaxScaler&lt;/strong&gt; to try to improve regression scoring:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;lasso with scaled features&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import Ridge, Lasso
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

scaler         = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled  = scaler.transform(X_test)

lasso = Lasso(alpha=20).fit(X_train_scaled, y_train)

score_train = lasso.score(X_train_scaled, y_train)
score_test  = lasso.score(X_test_scaled, y_test)

print(&quot;train: {}, test: {}&quot;.format(score_train, score_test))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scores&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;train: 0.2865231606947747, test: 0.285332265748411&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;results_summary&quot;&gt;Results Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally I&amp;#8217;ve written a summary table.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch compressed&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Results summary&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2858%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;TYPE&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;SCIKIT CLASS&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;POLYNOMIAL&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;NORMALIZATION&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;REGULARIZATION&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;TRAIN SCORE&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;TEST SCORE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Linear&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LinearRegression&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.2894397189330029&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.29427542275712537&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Linear&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LinearRegression&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.3427117865309586&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.371685603196769&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ridge&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ridge&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.21131995467057785&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.19818161857049388&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ridge&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ridge&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.24767875041471266&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.23615269197631883&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Lasso&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Lasso&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.2842911095363777&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.2813866438355652&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Lasso&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Lasso&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.2865231606947747&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.285332265748411&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;lasso_as_feature_selection_method&quot;&gt;Lasso as feature selection method&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far I&amp;#8217;ve been working with just one feature &lt;strong&gt;temp&lt;/strong&gt; to predict a possible outcome. I chose this feature by using the correlation table as a guide. When looking for just one variable to work with, it could be enough, but when looking for many possible features it could be cumbersome. &lt;strong&gt;The Lasso regression seems a better method for telling me which features do perform and which don&amp;#8217;t&lt;/strong&gt;. How ? Well according to how the L1 regulation method works, keeping it short, those &lt;strong&gt;features that are not so important, Lasso makes its coefficient equal to 0&lt;/strong&gt;, therefore, those features having a coefficient greater than 0 are worth using them to train the model (the higher the better). Lets use this knowledge to know which features could be useful to train the model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;using all possible features to see which one fits best in case we only want to use one&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import Ridge, Lasso
from sklearn.model_selection import train_test_split

all_features = list(bikes.columns.values)

# removing all not feature suitable columns (dteday was already removed)
all_features.remove(&apos;registered&apos;)
all_features.remove(&apos;casual&apos;)
all_features.remove(&apos;cnt&apos;)

# then doing the regression with all the remaining features
X            = bikes[all_features]
y            = bikes[&apos;registered&apos;]

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

lasso       = Lasso(alpha=20).fit(X_train, y_train)

# showing features with their coefficients
feats_coeff = dict(zip(all_features, lasso.coef_))
feats_coeff&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which shows the following map:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;features along with their coefficients&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;{&apos;instant&apos;: 4.6922455121283315,
 &apos;season&apos;: 403.43794430245987,
 &apos;yr&apos;: 0.0,
 &apos;mnth&apos;: -147.25674152072335,
 &apos;holiday&apos;: -0.0,
 &apos;weekday&apos;: 40.46762455840893,
 &apos;workingday&apos;: 830.067983219723,
 &apos;weathersit&apos;: -506.75253043165566,
 &apos;temp&apos;: 2732.6155708939527,
 &apos;atemp&apos;: 0.0,
 &apos;hum&apos;: -0.0,
 &apos;windspeed&apos;: -0.0}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now as the theory stated, we can discard those features with 0 value, and maybe those which are negatively correlated. For this example, where I&amp;#8217;m only interested in one feature to validate whether I chose the most significant feature or not. In this case I&amp;#8217;m getting the feature with the highest possitive coefficient:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import Ridge, Lasso
from sklearn.model_selection import train_test_split

# getting only the NON ZERO features
best_features = {k:v for (k, v) in sorted(feats_coeff.items(), key=lambda x: -x[1]) if v &amp;gt; 0}

# getting the higher ranked
best_feature = list(best_features.keys())[0]
best_feature&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&apos;temp&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nice!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ridge_vs_lasso&quot;&gt;Ridge vs Lasso&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case we&amp;#8217;ve used both algorithms with the same dataset, but there&amp;#8217;re situations where one or the other fit best:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ridge: Many &lt;strong&gt;small/medium&lt;/strong&gt; sized effects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lasso: Few &lt;strong&gt;medium/large&lt;/strong&gt; sized effects&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources_3&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/files/2020/11/ml_slr_overview/bike_rental_regression.ipynb&quot;&gt;Jupyter Notebook source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/ridge-and-lasso-regression-a-complete-guide-with-python-scikit-learn-e20e34bcbf0b&quot;&gt;Ridge and Lasso Regression&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Classifying food</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/11/ml_slc_getting_started.html"/>
        <updated>2020-11-01T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/11/ml_slc_getting_started.html</id>
        <category term="ds"/>
        <category term="ml"/>
        <category term="python"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slc_getting_started/header.png&quot; alt=&quot;header&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next station in my machine learning journey is the Supervised Learning method. In this article I&amp;#8217;m using &lt;strong&gt;Supervised Learning Classification&lt;/strong&gt; to &lt;strong&gt;classify food&lt;/strong&gt; into three categories: green, orange or red &lt;strong&gt;depending on whether they&amp;#8217;re healthy or not&lt;/strong&gt;. In order to get used to the methodology I&amp;#8217;m sticking to the &lt;a href=&quot;https://mariogarcia.github.io/blog/2020/10/ml_key_concepts.html#how_ml_works&quot;&gt;representation-evaluation-optimization&lt;/a&gt; process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-76efed66a451856f2944041b54f7e48a.png&quot; alt=&quot;representation &amp;#8594; evaluation &amp;#8594; optimization&quot; width=&quot;760&quot; height=&quot;210&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;representation &amp;#8594; evaluation &amp;#8594; optimization&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;representation_phase&quot;&gt;Representation Phase&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the representation phase &lt;strong&gt;we should find a representative dataset and a suitable algorithm for the problem&lt;/strong&gt; at hand. Then we use both, dataset and algorithm, to train a software model to make predictions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dataset_preparation&quot;&gt;Dataset preparation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A representative dataset, in this case, would be a large dataset of food, labeled as good/bad/not-so-good food. I created a &lt;a href=&quot;/files/2020/11/ml_slc_getting_started/food.csv&quot;&gt;csv file&lt;/a&gt; with more than three thousand food entries, collected from &lt;a href=&quot;https://badali.umh.es/home&quot;&gt;this site (Spanish)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;loading data&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

food = pd.read_csv(&apos;food.csv&apos;, sep=&apos;;&apos;).fillna(0)
food.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slc_getting_started/food_dataset.png&quot; alt=&quot;header&quot; width=&quot;80%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. food dataset&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each entry has a series of possible features and it&amp;#8217;s labeled with a color value (TRAFFICLIGH VALUE) which depends on whether it is a healthy food, not so healthy food or junk food. Next I should choose every column that can be eligible as a feature, for example the name of the food is not a good feature if you&amp;#8217;d like to generalize the results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;choosing possible features&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;COLUMNS_OF_INTEREST = [
    &quot;TRAFFICLIGHT VALUE&quot;,
    &quot;CARBS&quot;,
    &quot;SUGAR&quot;,
    &quot;ENERGY&quot;,
    &quot;PROTEINS&quot;,
    &quot;SATURATED FAT&quot;,
    &quot;FAT&quot;,
    &quot;SODIUM&quot;,
    &quot;FIBER&quot;,
    &quot;SALT&quot;,
]

df = (food
    .copy()
    .loc[:, COLUMNS_OF_INTEREST]
    .dropna())

df.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slc_getting_started/food_features_all.png&quot; alt=&quot;dataset&quot; width=&quot;80%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. possible features&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;However the goal is to choose the minimum set of features that maximizes the classification&lt;/strong&gt;. Too many could classify well but it would become too hard to use, too few would not classify well enough. I need to find the balance between the two. Once I&amp;#8217;ve found the balance I can use both, features and labels to create a training and test datasets. For that I use the &lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html&quot;&gt;train_test_split function&lt;/a&gt; from scikit-learn library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;minimum set of features and creating training and test datasets&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.model_selection import train_test_split

feats = df[[&apos;CARBS&apos;, &apos;SUGAR&apos;, &apos;PROTEINS&apos;, &apos;FAT&apos;, &apos;SALT&apos;, &apos;FIBER&apos;]]
label = df[&apos;TRAFFICLIGHT VALUE&apos;]

X_train, X_test, y_train, y_test = train_test_split(feats, label, random_state=0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Drawing a &lt;strong&gt;scatter matrix&lt;/strong&gt; sometimes could help you to spot features that are particularly good on classifying samples. I did the matrix, but I recognize that although some of the feature-pairs are clearly better than others (e.g. proteins/carbs) many of them are inconclusive to me (e.g. salt/fat). I invite you to open the plot in a new window, full size, and take a look for yourself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;matrix plot&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

from matplotlib import pyplot as plt
from pandas.plotting import scatter_matrix

plt.figure()
scatter_matrix(X_train, c=y_train,hist_kwds={&apos;bins&apos;: 15}, figsize=(15, 15))
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice how I&amp;#8217;m using the &lt;strong&gt;training dataset features&lt;/strong&gt; (X_train) and the &lt;strong&gt;training dataset labels&lt;/strong&gt; (y_train) to build the scatter matrix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/11/ml_slc_getting_started/matrix_plot.png&quot; alt=&quot;header&quot; width=&quot;25%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. matrix plot&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;algorithm_selection_configuration&quot;&gt;Algorithm selection &amp;amp; configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to choose the algorithm, I needed to identify first the type of problem I was facing. Why I though this would fit as a &lt;strong&gt;Supervised Learning Classification Problem&lt;/strong&gt; ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, I&amp;#8217;ve got a &lt;strong&gt;labeled dataset&lt;/strong&gt;, so it looked like I could use the labeled data to train a &lt;strong&gt;supervised learning model&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second, I was looking for different types of &lt;strong&gt;discrete target values&lt;/strong&gt; (values for green, orange, red), therefore it seemed to be a &lt;strong&gt;classification problem&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once I confirmed it was a classification problem I chose the only classification algorithm I know so far, the &lt;a href=&quot;https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm&quot;&gt;k-nearest neighbors&lt;/a&gt; algorithm.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/files/2020/11/ml_slc_getting_started/food.csv&quot;&gt;Food dataset (csv)&lt;/a&gt;. Data was collected from &lt;a href=&quot;https://badali.umh.es/home&quot;&gt;Badali: Food &amp;amp; Nutrition educational site (spanish)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/files/2020/11/ml_slc_getting_started/food.ipynb&quot;&gt;Jupyter notebook source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm&quot;&gt;k-nearest neighbors (Wikipedia)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;evaluation_phase&quot;&gt;Evaluation Phase&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we use both, dataset and algorithm, to train a software model to make predictions. Afterwards the model performance is evaluated with testing datasets. Training and testing are part of the evaluation phase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ml_model_creation_training&quot;&gt;ML model creation &amp;amp; training&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The k-nearest neighbors algorithm is implemented in &lt;a href=&quot;https://scikit-learn.org/&quot;&gt;scikit-learn&lt;/a&gt; via the &lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html&quot;&gt;KNeighborsClassifier&lt;/a&gt; class. The algorithm tries to establish to which type the element belongs by checking the closest neighborg elements around. You can customize the &lt;strong&gt;K parameter&lt;/strong&gt; which sets how many neighbors does the algorithm have to check before emmiting its veredict.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here I&amp;#8217;m initializing the algorithm with &lt;strong&gt;k=5&lt;/strong&gt;. Then I&amp;#8217;m &lt;strong&gt;training the model using the fit function&lt;/strong&gt; and finally I&amp;#8217;m checking how well the model is going to perform by passing the &lt;strong&gt;testing dataset&lt;/strong&gt; (X_test, y_test) to the &lt;strong&gt;score function&lt;/strong&gt;. After some tunes here and there I was able to get a 90% of accuracy by using 6 features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;model training and getting accuracy score with the testing dataset&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=5)

knn.fit(X_train, y_train)
knn.score(X_test, y_test) # returns 0.9 ==&amp;gt; 90%&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ml_model_testing&quot;&gt;ML model testing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get a prediction I need to provide the following measurements to the model:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CARBS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SUGAR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROTEINS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FAT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SALT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FIBER&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m passing as many samples as I want to the &lt;strong&gt;KNeighborsClassifier&amp;#8217;s predict function&lt;/strong&gt; and for every sample I&amp;#8217;m getting a prediction. Every sample is passed as an array with the required feature values. In this case I&amp;#8217;m using another online supermarket dataset to test the model with other datasets than the training and testing datasets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;model prediction&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# Every sample has to provide values for
# food_entry = [CARBS, SUGAR, PROTEINS, FAT, SALT, FIBER]

tuna_olive_oil = [0, 0, 20, 33, 0.88, 0]    # expected 3
beer_one_liter = [3.4, 0.1, 0.3, 0, 0, 0]   # expected 2
coke           = [10.6, 10.6, 0, 0, 0, 0]   # expected 3
croissants     = [46, 4.5, 8.7, 26, 1.3, 0] # expected 3

predictions    = knn.predict([
    tuna_olive_oil,
    beer_one_liter,
    coke,
    croissants
])

predictions == [3, 2, 3, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_2&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://scikit-learn.org&quot;&gt;Scikit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html&quot;&gt;Scikit KNeighborsClassifier&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;optimization&quot;&gt;Optimization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because I still don&amp;#8217;t have a background on optimization procedures, the optimization I did was completely hand-crafted. But I can comment on two tools that I think helped trying to optimize the whole process:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;scatter matrix&lt;/strong&gt;. It helped me to see some features that I though for sure they were not going to work well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;model score&lt;/strong&gt;: I used it as a brute force mechanism. I chose the optimal set of features by running the &lt;strong&gt;model score&lt;/strong&gt; until I got what I though it was a compromised between a high score and a reasonable number of features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m sure that, in the future, with more experience, I&amp;#8217;ll be able to do a more serious and professional optimization plan.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>DS - Machine Learning key concepts</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/10/ml_key_concepts.html"/>
        <updated>2020-10-27T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/10/ml_key_concepts.html</id>
        <category term="ds"/>
        <category term="ml"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As my next step in Data Science world, this week I&amp;#8217;m starting a Machine Learning Course. Although it seems like an intimidating path ahead, lets take it step by step and lets review some basic concepts on Machine Learning.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what_is_machine_learning&quot;&gt;What is Machine Learning ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Machine learning (ML) is an area of artificial Intelligence (AI) &lt;strong&gt;focused on building software capable of improving over time through experience&lt;/strong&gt;. Searching a little bit about the topic will show you that ML is not new in town. Although it&amp;#8217;s an area of research already present in the 50&amp;#8217;s, however it remained mainly in the academia, the military and some large corporations. It&amp;#8217;s only nowadays when it&amp;#8217;s has become a trending technology where everybody wants to jump in. Some of the reasons behind this change are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ML benefits from vast amounts of data&lt;/strong&gt;. In the early days data was scarced and hard to collect, now is easier to access or to create large datasets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ML benefits from series of modern coded algorithms&lt;/strong&gt;. Today there&amp;#8217;re plenty of new algorithms already coded and freely available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ML benefits from powerful computers&lt;/strong&gt;. A smart phone today has more power than a super computer in the 70&amp;#8217;s.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Is an area of AI focused on building software capable of improving over time through experience
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_learning&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/towards-artificial-intelligence/what-is-machine-learning-ml-b58162f97ec7&quot;&gt;What is ML ? (Medium)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/cloud/learn/machine-learning&quot;&gt;Machine Learning (IBM article)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.quora.com/Are-there-any-similar-services-to-Amazon-Mechanical-Turk&quot;&gt;Alternatives to Mechanical Turk&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://builtin.com/artificial-intelligence/machine-learning-healthcare&quot;&gt;Machine learning in Healthcare&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why_you_should_not_learn_ml&quot;&gt;Why you should (not) learn ML ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While preparing this entry, I came across some very interesting videos (see resources) talking about how people are learning ML maybe because the wrong reasons. The truth is that ML has an enormous hype and that could force some people into think that there&amp;#8217;s a need to learn it, even if they don&amp;#8217;t know why. Some of these (wrong?) ideas on ML:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ML is the next big thing&lt;/strong&gt;: Well, it&amp;#8217;s a new exciting area of knowledge of course, but there&amp;#8217;re many others, like distributed computing for example. People who gets excited for every new thing tend to lose interest as soon as there&amp;#8217;s something newer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ML is going to improve my career path&lt;/strong&gt;: Well, having a course on ML is not gonna get you more dollars in your bank account by itself, the experience on working with ML will. You have to make sure you&amp;#8217;ll like the change, maybe there&amp;#8217;re many other ways of improving your current situation without involving ML.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And even once you&amp;#8217;ve decided the why, there&amp;#8217;s still &lt;strong&gt;the problem of having a plan&lt;/strong&gt;. Having a plan &lt;strong&gt;involves how, and what&lt;/strong&gt;. How are you going to do it ? Are you going to do online courses ? Do an intership in an ML project ? And, in case you&amp;#8217;re doing an online course, What type of course will fullfil your goals ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not having a plan could lead you to a paralisis analysis situation and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Buridan%27s_ass&quot;&gt;Buridan&amp;#8217;s ass&lt;/a&gt; problem (aka donkey problem). There are many people getting stuck in the following question: Am I learning ML &lt;strong&gt;to build a product&lt;/strong&gt; or just &lt;strong&gt;for research&lt;/strong&gt; ? Well lesson learned is that to avoid paralisis analysis you must choose one or the other quickly, don&amp;#8217;t waste your time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having said that, I thought it would be great to answer these questions to myself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Why are you learning ML ?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m learning ML because most of the software projects I was working on lately required ML for a good reason (computer vision applied to security, healthcare diagnosis), and I felt I was missing a very important part of the project. I think ML is really key in many software development projects and I also think that my work as software engineer can be improved by having some practical knowledge on ML. Even if I don&amp;#8217;t code myself the ML solution, I will be better on understanding how to integrate those solutions in the projects I&amp;#8217;m involved with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;How are you going to do it ?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To me, taking online courses is the most convenient way of learning ML. Moreover now is almost mandatory because of the pandemic. Another part of the plan is to write as much as I can about what I&amp;#8217;m learning. That, I think, will reinforce my learning process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;What exactly are you going to begin with ?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;General online course giving me a general overview of the most used techniques. The course has to be practical, real coding examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_2&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=cyLWtMSry58&quot;&gt;Don&amp;#8217;t learn machine learning (Youtube)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/dont-learn-machine-learning-8af3cf946214&quot;&gt;Don&amp;#8217;t learn machine learning article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=reY50t2hbuM&amp;amp;t=289s&quot;&gt;Why You Should NOT Learn Machine Learning! (Youtube)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how_ml_works&quot;&gt;How ML works ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although there&amp;#8217;re different methods to build ML software, they all share a common iterative process with three phases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the first part, called &lt;strong&gt;representation&lt;/strong&gt;, we should find a representative dataset and a suitable algorithm for the problem at hand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then we use both, dataset and algorithm, to train a software model to make predictions. Afterwards the model performance is evaluated with new datasets. Training and evaluation are part of the &lt;strong&gt;evaluation&lt;/strong&gt; phase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally if we&amp;#8217;re not satisfied with the results we can always iterate over the process to optimize the results. This final part as you may guess is called &lt;strong&gt;optimization&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/diag-ee54226f3e64668152bfd7efafad0f7b.png&quot; alt=&quot;ML processes are iterative&quot; width=&quot;1070&quot; height=&quot;308&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;ML processes are iterative&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;representation&quot;&gt;Representation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, if we&amp;#8217;d like to create a software capable of giving fair loans avoiding risky clients we&amp;#8217;ll need as many historical records as we can get. The more the data, the better. But there&amp;#8217;re also some other considerations to take into account. Maybe the data contains some sensitive information we should skip before feeding the system, whether because of privacy reasons or because it could lead to unwanted biased results. Remember that the lack of some information could also end having unfair or biased results. Bottom line &lt;strong&gt;during dataset preparation you need to make sure the data is unbiased and relevant&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;The type of algorithm to use depends on the type of the data, the amount of data, and the type of the problem to be solved&lt;/strong&gt;. In practice most of the algorithm selection usually depends on the type of strategy selected: supervised, unsupervised, semi-supervised, or reinforced. There&amp;#8217;re algorithms that fit best in one strategy than others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
The training dataset and the algorithm to train the model
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;evaluation&quot;&gt;Evaluation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we&amp;#8217;ve decided which algorithm to use we need to evaluate how it works . We need to &lt;strong&gt;create a model and train it with a training dataset&lt;/strong&gt;. Later on the trained model will be used to make predictions on new data. Finally once the training has finished we can now &lt;strong&gt;use the model with the testing dataset to see if the predictions over the trained dataset are correct&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Model creation and testing the model with the testing dataset
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;optimization&quot;&gt;Optimization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we&amp;#8217;re happy with the model predictions we&amp;#8217;ve finished for now, if not, we should iterate to see how we can improve the results:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Maybe we realize the data was not accurate, maybe it was biased somehow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maybe we can use a more suitable algorithm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maybe the algorithm is correct but we can customize its parameters a little bit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Did I get the expected performance ?
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_3&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/python-machine-learning&quot;&gt;Applied Machine Learning in Python (Coursera)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/cloud/learn/machine-learning&quot;&gt;Machine Learning (IBM article)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.analyticsvidhya.com/blog/2017/09/common-machine-learning-algorithms/&quot;&gt;Common Machine Learning Algorithms&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;machine_learning_methods&quot;&gt;Machine Learning methods&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to Wikipedia there&amp;#8217;re &lt;a href=&quot;https://en.wikipedia.org/wiki/Outline_of_machine_learning#Machine_learning_methods&quot;&gt;a few ML methods&lt;/a&gt;, but now that I&amp;#8217;ve just started looking into ML I&amp;#8217;m focusing on &lt;strong&gt;supervised, and unsupervised&lt;/strong&gt; methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;supervised&quot;&gt;Supervised&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the supervised method, there&amp;#8217;s a labeled dataset, meaning that for every set of features there&amp;#8217;s what is called &lt;strong&gt;a target value&lt;/strong&gt;, this target value could be discrete (e.g. a label) or continuous (e.g a date). Depending on the type of the target values problems will fit into &lt;strong&gt;classification (discrete)&lt;/strong&gt; or &lt;strong&gt;regression (continuous)&lt;/strong&gt; problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Supervised method requires labeled data
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;classification&quot;&gt;Classification&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here the goal is to predict the target value (categorical class labels) of new instances based on training data. For example, check the following dataset:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch compressed&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. classification training dataset&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.667%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;WHEELS&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;MODEL&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;BRAND&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;COLOR&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;TYPE_NAME&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;TYPE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CBR 600&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;HONDA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BIKE&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;F450&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;FERRARI&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CAR&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SV650&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SUZUKI&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BLUE&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BIKE&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SPACE&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RENAULT&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;YELLOW&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CAR&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By looking at the features, &lt;strong&gt;WHEELS&lt;/strong&gt; could be useful when trying to predict if something is a car or a bike. Once we&amp;#8217;ve chosen the most representative features, we build the model. Then the model is evaluated with a &lt;strong&gt;testing dataset&lt;/strong&gt; to see how well the algorithm predicts target values. When the target value is discrete like in this example, you are facing a &lt;strong&gt;classification problem&lt;/strong&gt;. For example, if I use the following as an input to the model built with the previous table:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch compressed&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. classification testing dataset&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;WHEELS&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;MODEL&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;BRAND&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;COLOR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;FZR 600&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;YAMAHA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;WHITE&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would expect the algorithm to return the target value &lt;strong&gt;1&lt;/strong&gt; which is the value of the type &lt;strong&gt;BIKE&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Classification is about discrete values
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;regression&quot;&gt;Regression&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;strong&gt;regression problem&lt;/strong&gt; is when the target value is continuous such as &quot;height&quot; or &quot;temperature&quot;. For instance, this is a sample of a training dataset of housing prices in a given neigbourghood:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all centered&quot; style=&quot;width: 20%;&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 3. regression training dataset&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;ROOMS&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;PRICE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200000&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;205000&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;250000&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;300000&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have a training dataset, we need to look for a regression algorithm to build the model. Testing the model should return a prediction on housing prices using the number of rooms as the input. Graphically, the result for any new input would be a point along the regression line (orange):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/ml_key_concepts/regression.png&quot; alt=&quot;regression&quot; width=&quot;60%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Regression&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Regression is about continuous values
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;unsupervised&quot;&gt;Unsupervised&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unsupervised methods &lt;strong&gt;try to get some insight or knowledge in data when labels are not available&lt;/strong&gt;. There&amp;#8217;s also a main distinction between those problems where the unsupervised method will try to find groups in the data (clustering) and those where the algorithm will try to look for unusual patterns (also called outliers).&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/ml_key_concepts/clustering.png&quot; alt=&quot;clustering&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/ml_key_concepts/outliers.png&quot; alt=&quot;outlier&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
In a non labeled dataset unsupervised algorithms look for groups and patterns
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s also a &lt;a href=&quot;https://en.wikipedia.org/wiki/Semi-supervised_learning&quot;&gt;semi-supervised&lt;/a&gt; method. It&amp;#8217;s normally very useful when not having enough labelled data. This approach combines a small amount of labeled data with a large amount of unlabeled data during training.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_4&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/python-machine-learning&quot;&gt;Applied Machine Learning in Python (Coursera)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/cloud/learn/machine-learning&quot;&gt;Machine Learning (IBM article)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Outline_of_machine_learning#Machine_learning_methods&quot;&gt;Machine learning methods (Wikipedia)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Semi-supervised_learning&quot;&gt;Semi-supervised learning (Wikipedia)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.quora.com/What-is-the-difference-between-supervised-and-unsupervised-learning-algorithms&quot;&gt;Difference between supervised and unsupervised algorithms (Quora)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://machinelearningmastery.com/a-tour-of-machine-learning-algorithms/&quot;&gt;A Tour of Machine Learning Algorithms&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/types-of-machine-learning-algorithms-you-should-know-953a08248861&quot;&gt;Types of Machine Learning Algorithms you should know&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/supervised-learning-basics-of-classification-and-main-algorithms-c16b06806cd3&quot;&gt;Supervised Learning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/regression-classification-supervised-machine-learning/&quot;&gt;Supervised Learning: regression and classification examples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other_resources&quot;&gt;Other Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dlsucomet/MLResources&quot;&gt;ML courses&lt;/a&gt;: A github repository with ML resources (books and courses links)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebookresearch/detectron2&quot;&gt;Detectron2&lt;/a&gt;: FAIR&amp;#8217;s next-generation platform for object detection and segmentation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>DS - Basic stocks charts</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/10/charts_stocks.html"/>
        <updated>2020-10-18T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/10/charts_stocks.html</id>
        <category term="ds"/>
        <category term="matplotlib"/>
        <category term="charts"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A good way of practicing matplotlib is trying to mimic examples out there. Trading is one of those areas where charts are broadly used. I&amp;#8217;ve checked several articles (I&amp;#8217;ll leave the reference in the resources area) to see which ones are the most popular and then try to reproduce them using matplotlib and maybe learning something about stock analysis in the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the examples in this article have been created using a Jupyter notebook. You can find the source code of the notebook &lt;a href=&quot;/files/2020/10/chart_stocks/ua_analysis.ipynb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a_little_bit_about_indicators&quot;&gt;A little bit about indicators&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After spending an hour trying to get a simple listing of what are the most common financial indicators, I kind of came up with the following summary. There&amp;#8217;re two main types of financial indicators, &lt;strong&gt;lagging&lt;/strong&gt; indicators and &lt;strong&gt;leading indicators&lt;/strong&gt;. &lt;strong&gt;Lagging indicators&lt;/strong&gt; are normally used by traders to know when to enter or exit a given value, whereas a &lt;strong&gt;leading indicator&lt;/strong&gt; would normally used to guess where the prices of a given stock are going to go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve also found another classification based on the required information the trader needs at a given time of the process, here&amp;#8217;s a summarized table:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch compressed&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;TOPIC&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;TYPE&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;CHART&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;EVALUATES&amp;#8230;&amp;#8203;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Trend&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LAGGING&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;#trend_50_and_200_day_ema&quot;&gt;50 and 200-day EMA&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;how the market is moving (up, down, stays still)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Mean&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LAGGING&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;#mean_bollinger_bands&quot;&gt;Bollinger Bands&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;how far the price is going before changing direction&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Relative strength&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LEADING&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;#relative_strength_stochastic_oscillator_so&quot;&gt;Stochastics&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;oscilations in buying and selling pressure&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Momentum&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LEADING&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;#momentum_macd&quot;&gt;MACD&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the speed of price change over time&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Volume&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LEADING / LAGGING&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;#volume_on_balance_volume_obv&quot;&gt;On-Balance-Volume (OBV)&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;whether traders are cautious or greedy&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.investopedia.com/articles/active-trading/011815/top-technical-indicators-rookie-traders.asp&quot;&gt;Top Technical Indicators for Rookie Traders&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dailyfx.com/education/technical-analysis-tools/leading-vs-lagging-indicators.html&quot;&gt;Leading vs Lagging indicators&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.investopedia.com/terms/l/leadingindicator.asp&quot;&gt;Leading indicator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting_the_data&quot;&gt;Getting the data&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ranaroussi/yfinance&quot;&gt;Yfinance&lt;/a&gt; is a Python library which uses the Yahoo Finance API to access stock related information. There&amp;#8217;re thousands of stock values out there, in this ocasion I&amp;#8217;m getting Under Armour last year values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Getting last year data&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import yfinance

(yfinance
    .Ticker(&quot;UA&quot;)                # interested in UA
    .history(period=&quot;1y&quot;)        # downloads last year
    .to_csv(&apos;/tmp/ua_1y.csv&apos;))   # saves de DataFrame as a csv file&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then I&amp;#8217;m creating a Jupyter notebook where I&amp;#8217;m importing the csv to analyze the data and create the chart with the indicators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;loading csv with stock prices&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

ua = pd.read_csv(&apos;ua_1y.csv&apos;)
ua.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First I&amp;#8217;m creating a line chart with all the loaded prices:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;stock prices with matplotlib&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

xs = pd.to_datetime(ua[&apos;Date&apos;])
ys = ua[&apos;Close&apos;]

def base_plot():
    plt.plot(xs, ys)
    plt.title(&apos;UNDER ARMOUR STOCK PRICES (OCT-2019 - OCT-2020)&apos;)
    plt.ylabel(&apos;PRICE (US Dollars)&apos;)
    plt.yticks(np.arange(np.floor(ys.min()) - 2, np.ceil(ys.max()) + 4, step=2))

    xaxis = plt.gca().xaxis
    xaxis.set_major_locator(mdates.MonthLocator())
    xaxis.set_major_formatter(mdates.DateFormatter(&apos;%b&apos;))

    plt.margins(x=0)

base_plot()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_stocks/prices.png&quot; alt=&quot;prices_only&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Line chart showing only stock prices (YDT)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_2&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ranaroussi/yfinance&quot;&gt;YFinance&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;trend_50_and_200_day_ema&quot;&gt;Trend: 50 and 200-day EMA&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;#a_little_bit_about_indicators&quot;&gt;Back to indicators index&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following the table I mentioned in the beginning, I&amp;#8217;m starting to draw both the 50 and 200-day EMA to see how the market is behaving about this stock value. EMA stands for &lt;strong&gt;exponential moving average&lt;/strong&gt; and it&amp;#8217;s supposed to be more responsive than the simple moving averages. Depending on whether we&amp;#8217;re looking for medium of long term we would be using the 50 or the 200 days EMA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How to calculate the EMA using Pandas ? Well, there&amp;#8217;s the &lt;strong&gt;ewm&lt;/strong&gt; function to precisely calculate functions in an exponential window. So&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;calculating 50 and 200-day EMA&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ua[&apos;EMA 50&apos;]  = ua[&apos;Close&apos;].ewm(span=50).mean()
ua[&apos;EMA 200&apos;] = ua[&apos;Close&apos;].ewm(span=200).mean()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then is simply about plotting both dates as x values and EMAs as y values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;drawing EMA-50 &amp;amp; EMA-200&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;plt.figure(figsize=(15, 5))

# PRICE LINES
base_plot()

# EMA LINES
plt.plot(xs, ua[&apos;EMA 50&apos;], color=&apos;green&apos;)
plt.plot(xs, ua[&apos;EMA 200&apos;], color=&apos;red&apos;)

# INSERSECTIONS
idx = np.argwhere(np.diff(np.sign(ua[&apos;EMA 50&apos;] - ua[&apos;EMA 200&apos;]))).flatten()
plt.scatter(xs[idx], ua[&apos;EMA 50&apos;].iloc[idx], s=200, color=&apos;w&apos;, edgecolor=&apos;black&apos;, linewidths=1)

# LEGEND
plt.legend([&apos;Price&apos;, &apos;EMA 50&apos;, &apos;EMA 200&apos;, &apos;EMAs intersections&apos;], frameon=False)

plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_stocks/ema.png&quot; alt=&quot;ema&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. EMA-50 and EMA-200 (YDT)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s a few of strategies based on the relationship between the EMA and the price lines, and also between fast and slow EMAs. First it seems that when the price is above the EMA line, the price is likely to go up whereas when it&amp;#8217;s below, it&amp;#8217;s likely to fall. Because of that EMAs have been also been used visually as support and resistance bands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But there&amp;#8217;s also a relationship worth mentioning, the &lt;a href=&quot;https://corporatefinanceinstitute.com/resources/knowledge/trading-investing/how-to-read-stock-charts/&quot;&gt;relationship between the 50 and 200 EMAs&lt;/a&gt;. This theory says that when the EMA-50 crosses from below to above the EMA-200 is an indicator that the prices are going to rise. However when the EMA-50 crosses from above to below the EMA-200 it&amp;#8217;s an indicator that the prices are going to decrease. &lt;strong&gt;I&amp;#8217;ve highlighted these intersections in the chart&lt;/strong&gt; with the following code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;EMAs intersections&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;idx = np.argwhere(np.diff(np.sign(ua[&apos;EMA 50&apos;] - ua[&apos;EMA 200&apos;]))).flatten()
plt.scatter(
    xs[idx],
    ua[&apos;EMA 50&apos;].iloc[idx],
    s=200,
    color=&apos;w&apos;,
    edgecolor=&apos;black&apos;,
    linewidths=1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_3&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://corporatefinanceinstitute.com/resources/knowledge/trading-investing/exponential-moving-average-ema/&quot;&gt;Exponential moving averages&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://corporatefinanceinstitute.com/resources/knowledge/trading-investing/how-to-read-stock-charts/&quot;&gt;How to read stock charts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28766692/intersection-of-two-graphs-in-python-find-the-x-value&quot;&gt;Calculate intersection of two graphs with Python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mean_bollinger_bands&quot;&gt;Mean: Bollinger Bands &amp;#169;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;#a_little_bit_about_indicators&quot;&gt;Back to indicators index&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most famous indicators in financial analysis is the Bollinger Bands &amp;#169;. Create by &lt;a href=&quot;https://en.wikipedia.org/wiki/Bollinger_Bands&quot;&gt;John Bollinger&lt;/a&gt;  in the 1980s to help traders to know when prices are likely to change direction there&amp;#8217;re some indicators. It&amp;#8217;s composed by three bands, the moving average (middle band), upper and lower Bollinger bands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;typical price&lt;/strong&gt;: is the average of adding up open, close, and highest price&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ma&lt;/strong&gt; is a simple moving average of the &lt;strong&gt;typical price&lt;/strong&gt; (typically for 20 days)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;n&lt;/strong&gt; is the number of standard deviations (typically 2)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;std&lt;/strong&gt; is standard deviation over a period of time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/8292af34bd5f286d293d3534cc16d910.png&quot; alt=&quot;8292af34bd5f286d293d3534cc16d910.png&quot; height=&quot;30&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. moving average&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;typical price, moving average and standard deviation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ua[&apos;Typical Price&apos;] = (ua[&apos;Open&apos;] + ua[&apos;Close&apos;] + ua[&apos;High&apos;]) / 3

ua[&apos;MA 20&apos;]    = ua[&apos;Typical Price&apos;].rolling(window=20).mean()
ua[&apos;STD 20&apos;]   = ua[&apos;Typical Price&apos;].rolling(window=20).std()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/d9d8b7c979e54c7164e3a66dd0d2d1f3.png&quot; alt=&quot;d9d8b7c979e54c7164e3a66dd0d2d1f3.png&quot; height=&quot;30&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. upper bands&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;upper bands calculation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ua[&apos;UpperBol&apos;] = ua[&apos;MA 20&apos;] + (2 * ua[&apos;STD 20&apos;])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/d4bc7f387b4e9108da8873a95b1b1fcd.png&quot; alt=&quot;d4bc7f387b4e9108da8873a95b1b1fcd.png&quot; height=&quot;30&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. lower band&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;lower band calculation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ua[&apos;LowerBol&apos;] = ua[&apos;MA 20&apos;] - (2 * ua[&apos;STD 20&apos;])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can draw the three bands along with the price band:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Drawing Bollinger bands &amp;#169;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;plt.figure(figsize=(15, 5))

base_plot() # PRICE PLOT

plt.plot(xs, ua[&apos;MA 20&apos;], color=&apos;orange&apos;)     # MIDDLE BAND
plt.plot(xs, ua[&apos;UpperBol&apos;], color=&apos;orange&apos;)  # UPPER BAND
plt.plot(xs, ua[&apos;LowerBol&apos;], color=&apos;orange&apos;)  # LOWER BAND

plt.legend([&apos;Price&apos;, &apos;Bollinger Bands&apos;])

plt.fill_between(xs, ua[&apos;UpperBol&apos;], ua[&apos;LowerBol&apos;], color=&apos;yellow&apos;, alpha=0.2)
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_stocks/bollinger.png&quot; alt=&quot;bollinger&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Bollinger upper and lower bands&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here the idea is that when the price is continuously touching the upper band, that&amp;#8217;s a signal that the price is overbought, whereas when the price is continuosly touching the lower band that means that the price is oversold:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Price &lt;strong&gt;overbought&lt;/strong&gt;: price touching continuosly the upper band&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Price &lt;strong&gt;oversold&lt;/strong&gt;: price touching continuosly the lower band&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;re more information on how to use this indicator in the resources section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_4&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bollinger_Bands&quot;&gt;Bollinger bands &amp;#169; (Wikipedia)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.investopedia.com/articles/technical/102201.asp&quot;&gt;The basics of the Bollinger bands &amp;#169;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;relative_strength_stochastic_oscillator_so&quot;&gt;Relative strength: Stochastic Oscillator (SO)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;#a_little_bit_about_indicators&quot;&gt;Back to indicators index&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When measuring the relative strenght of the price we&amp;#8217;d like to know &lt;strong&gt;if there&amp;#8217;s going to be a significant oscillation&lt;/strong&gt; in the buying or selling pressure. The &lt;strong&gt;stochastic oscillator&lt;/strong&gt; attempts to predict price turning points by comparing the closing price of a stock value to its price range. The formula is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/903fb9f2c123ccf23354382fb6ed05e3.png&quot; alt=&quot;903fb9f2c123ccf23354382fb6ed05e3.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. Stochastic Oscillator (SO)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SO&lt;/strong&gt;: Stochastic oscillator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CP&lt;/strong&gt;: Closing price&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LP14&lt;/strong&gt;: Lowest price of the previous 14 trading days&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HP14&lt;/strong&gt;: Highest price of the previous 14 trading days&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Pandas the only mistery is to calculate the lowest and highest price of the previous 14 trading days and then fill the formula in another DataFrame column.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Calculate lowest/highest price in a 14-day window&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ua[&apos;L14&apos;] = ua[&apos;Low&apos;].rolling(14).min()
ua[&apos;H14&apos;] = ua[&apos;High&apos;].rolling(14).max()

ua[&apos;SO&apos;] = ((ua[&apos;Close&apos;] - ua[&apos;L14&apos;]) / (ua[&apos;H14&apos;] - ua[&apos;L14&apos;])) * 100&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SO is not meant to be shown over the price plot. You normally see it side by side as a different chart at the bottom of the stock prices chart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Drawing both prices and SO charts&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# DRAWING SO
from matplotlib.gridspec import GridSpec
import matplotlib.patches as mpatches

# GRID TO LOCATE PRICE AND SO CHARTS
fig = plt.figure(figsize=(15, 5))
gsp = GridSpec(2, 1, height_ratios=[4, 3], hspace=0)

ax1 = fig.add_subplot(gsp[0])
ax2 = fig.add_subplot(gsp[1], sharex=ax1)

# PRICE CHART
ax1.plot(xs, ys, label=&apos;Price&apos;, color=&quot;blue&quot;)
ax1.set_title(&apos;UNDER ARMOUR STOCK PRICES (OCT-2019 - OCT-2020)&apos;)
ax1.set_ylabel(&apos;PRICE (US Dollars)&apos;)
ax1.set_yticks(np.arange(np.floor(ys.min()) - 2, np.ceil(ys.max()) + 4, step=2))
ax1.set_xticks([])
ax1.grid(axis=&apos;x&apos;, linestyle=&apos;--&apos;)

# SO CHART
xaxis = ax2.xaxis
xaxis.set_major_locator(mdates.MonthLocator())
xaxis.set_major_formatter(mdates.DateFormatter(&apos;%b&apos;))

ax2.plot(xs, ua[&apos;SO&apos;], color=&apos;red&apos;, linestyle=&apos;-&apos;)
ax2.grid(axis=&apos;x&apos;, linestyle=&apos;--&apos;)

# HIDDING LAST Y TICKS IN SO CHART
ax2.set_yticks(np.arange(0, 200, step=50))
ax2.set_ylim(0, 150)
plt.setp(ax2.get_yticklabels()[-1], visible=False)

# COMBINED LEGEND
prices_patch = mpatches.Patch(color=&apos;blue&apos;, label=&apos;Prices&apos;)
stocha_patch = mpatches.Patch(color=&apos;red&apos;, label=&apos;Stochastic&apos;)
ax1.legend(handles=[prices_patch, stocha_patch])
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a rule of thumb, most of the sources say that values over 80% are considered overbought whereas values below 20% are considered oversold.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_stocks/stochastic.png&quot; alt=&quot;stochastic&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. Stochastic Oscillator (YDT)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_5&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.investopedia.com/terms/s/stochasticoscillator.asp&quot;&gt;Stocastic Oscillator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;momentum_macd&quot;&gt;Momentum: MACD&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;#a_little_bit_about_indicators&quot;&gt;Back to indicators index&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MACD is another &lt;strong&gt;trending indicator&lt;/strong&gt;. It&amp;#8217;s the difference between a 12 period EMA minus a 26 period EMA. It&amp;#8217;s normally shown together with the MACD SIGNAL and a MACD histogram.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/6ea356b6da058c337c76ae975135a6d4.png&quot; alt=&quot;6ea356b6da058c337c76ae975135a6d4.png&quot; width=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 9. MACD&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;MACD calculationn&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ua[&apos;EMA 26&apos;]      = ua[&apos;Close&apos;].ewm(span=26).mean()
ua[&apos;EMA 12&apos;]      = ua[&apos;Close&apos;].ewm(span=12).mean()

ua[&apos;MACD&apos;]        = ua[&apos;EMA 12&apos;] - ua[&apos;EMA 26&apos;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/e179328a8e6c82fc33673f1165be1429.png&quot; alt=&quot;e179328a8e6c82fc33673f1165be1429.png&quot; width=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 10. MACD signal&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;MACD signal calculation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ua[&apos;MACD SIGNAL&apos;] = ua[&apos;MACD&apos;].ewm(span=9).mean()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/db7dfbba912ae3d2518e351eee59fd42.png&quot; alt=&quot;db7dfbba912ae3d2518e351eee59fd42.png&quot; width=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 11. MACD histogram&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;MACD histogram calculation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ua[&apos;MACD HIST&apos;] = ua[&apos;MACD&apos;] - ua[&apos;MACD SIGNAL&apos;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Drawing MACD&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import matplotlib.ticker as ticker

from matplotlib.gridspec import GridSpec
import matplotlib.patches as mpatches

# GRID TO LOCATE PRICE AND SO CHARTS
sto = plt.figure(figsize=(15, 5))
gsp = GridSpec(2, 1, height_ratios=[4, 3], hspace=0)

st1 = sto.add_subplot(gsp[0])
st2 = sto.add_subplot(gsp[1], sharex=st1)

# USING A NORMALIZED X AXIS TICKS
thex = np.arange(len(ua))

# DRAWING PRICE CHART
st1.plot(thex, ys, label=&apos;Price&apos;, color=&quot;blue&quot;)
st1.set_title(&apos;UNDER ARMOUR STOCK PRICES (OCT-2019 - OCT-2020)&apos;)
st1.set_ylabel(&apos;PRICE (US Dollars)&apos;)
st1.set_yticks(np.arange(np.floor(ys.min()) - 2, np.ceil(ys.max()) + 4, step=2))
st1.grid(axis=&apos;x&apos;, linestyle=&apos;--&apos;)

# DRAWING MACD CHART
st2.plot(thex, ua[&apos;MACD&apos;], color=&apos;blue&apos;)
st2.plot(thex, ua[&apos;MACD&apos;], color=&apos;blue&apos;)
st2.plot(thex, ua[&apos;MACD SIGNAL&apos;], color=&apos;red&apos;)

pos_his1 = ua.loc[ua[&apos;MACD HIST&apos;] &amp;gt; 0.2]
pos_his2 = ua.loc[(ua[&apos;MACD HIST&apos;] &amp;gt;= 0.0) &amp;amp; (ua[&apos;MACD HIST&apos;] &amp;lt;= 0.2)]

neg_his1 = ua.loc[(ua[&apos;MACD HIST&apos;] &amp;lt; 0) &amp;amp; (ua[&apos;MACD HIST&apos;] &amp;gt;= -0.1)]
neg_his2 = ua.loc[ua[&apos;MACD HIST&apos;] &amp;lt; -0.1]

st2.bar(pos_his1.index, pos_his1[&apos;MACD HIST&apos;], width=0.6, color=&apos;#77af70&apos;)
st2.bar(pos_his2.index, pos_his2[&apos;MACD HIST&apos;], width=0.6, color=&apos;#ace6cb&apos;)
st2.bar(neg_his1.index.values, neg_his1[&apos;MACD HIST&apos;], width=0.6, color=&apos;#dababa&apos;)
st2.bar(neg_his2.index.values, neg_his2[&apos;MACD HIST&apos;], width=0.6, color=&apos;#b92f2f&apos;)

st2.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: ua.iloc[pos, 0]))

st2.grid(axis=&apos;x&apos;, linestyle=&apos;--&apos;)
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_stocks/macd.png&quot; alt=&quot;macd&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 12. MACD YTD&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One way of using the MACD is noticing that when the &lt;strong&gt;MACD crosses above the signal it&amp;#8217;s telling the traders is a good moment to buy&lt;/strong&gt; whereas &lt;strong&gt;when the MACD crosses below the signal it&amp;#8217;s a good moment to sell&lt;/strong&gt;. Of course this also depends on the trading strategy of everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_6&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://school.stockcharts.com/doku.php?id=technical_indicators:moving_average_convergence_divergence_macd&quot;&gt;Calculate moving averages&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;volume_on_balance_volume_obv&quot;&gt;Volume: On-Balance-Volume (OBV)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;#a_little_bit_about_indicators&quot;&gt;Back to indicators index&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally here&amp;#8217;s the last indicator to create. The On-Balance-Volume is another trending indicator. It&amp;#8217;s normally used to know if there&amp;#8217;re many traders jumping in or jumping out of a given value. The formula of the OBV:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/dd9c36e978dabaf826a5f46b5525aaaa.png&quot; alt=&quot;dd9c36e978dabaf826a5f46b5525aaaa.png&quot; height=&quot;90&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 13. OBV&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A possible translation of the formula to Pandas would be something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;calculating OBV signal&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ua[&apos;OBV&apos;] = np.where(
    ua[&apos;Close&apos;] &amp;gt; ua[&apos;Close&apos;].shift(1), ua[&apos;Volume&apos;],
    np.where(ua[&apos;Close&apos;] &amp;lt; ua[&apos;Close&apos;].shift(1), -ua[&apos;Volume&apos;], 0)
).cumsum()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then plotting this with matplolib:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;OBV chart&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import matplotlib.ticker as ticker

from matplotlib.gridspec import GridSpec
import matplotlib.patches as mpatches
from matplotlib.ticker import FuncFormatter

# GRID TO LOCATE BOTH CHARTS
sto = plt.figure(figsize=(15, 5))
gsp = GridSpec(2, 1, height_ratios=[4, 3], hspace=0)

st1 = sto.add_subplot(gsp[0])
st2 = sto.add_subplot(gsp[1], sharex=st1)

# SHARED X VALUES
thex = np.arange(len(ua))

# PRICE CHART
st1.plot(thex, ys, label=&apos;Price&apos;, color=&quot;blue&quot;)
st1.set_title(&apos;UNDER ARMOUR STOCK PRICES vs OBV - YTD (OCT-2019 - OCT-2020)&apos;)
st1.set_ylabel(&apos;PRICE (US Dollars)&apos;)
st1.set_yticks(np.arange(np.floor(ys.min()) - 2, np.ceil(ys.max()) + 4, step=2))
st1.grid(axis=&apos;x&apos;, linestyle=&apos;--&apos;)

# OBV CHART
st2.plot(thex, ua[&apos;OBV&apos;], color=&apos;black&apos;)

# FUNCTION TO FORMAT MILLIONS
def millions(x, pos):
    &apos;The two args are the value and tick position&apos;
    return &apos;$%1.1fM&apos; % (x * 1e-6)

formatter = FuncFormatter(millions)
st2.yaxis.set_major_formatter(formatter)
st2.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: ua.iloc[pos, 0]))
st2.grid(axis=&apos;x&apos;, linestyle=&apos;--&apos;)
st2.set_ylabel(&apos;OBV (M Dollars)&apos;)
st2.set_ylim([ua[&apos;OBV&apos;].min() - 1000, ua[&apos;OBV&apos;].max() + 1000])
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_stocks/obv.png&quot; alt=&quot;obv&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 14. OBV YTD&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_7&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.investopedia.com/articles/active-trading/011815/top-technical-indicators-rookie-traders.asp#volume-on-balance-volume-obv&quot;&gt;OBV for rookie traders&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.investopedia.com/terms/o/onbalancevolume.asp&quot;&gt;OBV calculation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.metatrader5.com/es/terminal/help/indicators/volume_indicators/obv&quot;&gt;Volume indicators&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ismaeldelacruz.es/analizando-el-indicador-obv-de-volumen/&quot;&gt;Analyzing OBV (Spanish)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/52671594/calculating-stockss-on-balance-volume-obv-in-python&quot;&gt;StackOverflow: Calculating OBV in Python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://matplotlib.org/3.1.0/gallery/ticks_and_spines/custom_ticker1.html&quot;&gt;Custom&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mplfinance&quot;&gt;mplfinance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;mplfinance is a matplotlib module specially suited for showing financial data. I didn&amp;#8217;t have the time to play with it fully but it seemed to me a very useful tool if you need to plot financial data very often. To use it in the Jupyter notebook:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;import mplfinance in the notebook&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import sys
!{sys.executable} -m pip install mplfinance&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example to see how easy is to create financia data, here&amp;#8217;s the required code to show prices (with candlestick mode) and volume chart of the first 50 days. I&amp;#8217;ve also included a couple of trending lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;mplfinance example&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import mplfinance as mpl

# it requires the index to be a time series
ua[&apos;Date&apos;] = pd.to_datetime(ua[&apos;Date&apos;])

mpl.figure()

# adjusting overall styles
style = mpl.make_mpf_style(
    y_on_right=False,
    base_mpf_style=&apos;yahoo&apos;,
    gridaxis=&apos;vertical&apos;,
    edgecolor=&apos;#666666&apos;,
    gridstyle=&apos;:&apos;)


data = ua.set_index(&apos;Date&apos;).iloc[0:50]
# almost everything happens within the plot() function
mpl.plot(
    data, # first 30 days
    type=&apos;candle&apos;,
    volume=True,
    title=&apos;UA PRICE AND VOLUME CHARTS (OCT-DEC 2019)&apos;,
    style=style,
    figratio=(11,8),
    figscale=0.85,
    figsize=(15, 6),
    mav=(),
    tlines=[
        dict(tlines=[(&apos;2019-11-06&apos;, &apos;2019-11-13&apos;)], colors=&apos;r&apos;),
        dict(tlines=[(&apos;2019-12-03&apos;, &apos;2019-12-08&apos;), (&apos;2019-12-12&apos;, &apos;2019-12-18&apos;)], colors=&apos;g&apos;)
    ])

mpl.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_stocks/mplfinance.png&quot; alt=&quot;mplfinance&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 15. mplfinance example&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see the required number of lines is really low compared to previous examples. I think it&amp;#8217;s worth spending a little bit more time with it in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_8&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@shivangisareen/for-anyone-using-jupyter-notebook-installing-packages-18a9468d0c1c&quot;&gt;Installing packages in a Python Jupyter notebook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matplotlib/mplfinance&quot;&gt;mplfinance in Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other_resources&quot;&gt;Other Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;article_source_code&quot;&gt;Article source code&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jupyter notebook: &lt;a href=&quot;/files/2020/10/chart_stocks/ua_analysis.ipynb&quot;&gt;ua_analysis.ipynb&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;financial&quot;&gt;Financial&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://finance.yahoo.com/&quot;&gt;Yahoo Finance&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pandas&quot;&gt;Pandas&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/trading-toolbox-02-wma-ema-62c22205e2a9&quot;&gt;Weighted vs Exponential moving averages&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/trading-technical-analysis-with-pandas-43e737a17861&quot;&gt;Trading technical analysis with Pandas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;matplotlib&quot;&gt;Matplotlib&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matplotlib/mplfinance&quot;&gt;Matplot Financial Module&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22511550/gridspec-with-shared-axes-in-python&quot;&gt;Shared Axes with GridSpec&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.gridspec.GridSpec.html#matplotlib.gridspec.GridSpec&quot;&gt;GridSpec API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>DS - Matplotlib - Basic charts</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/10/chart_types.html"/>
        <updated>2020-10-13T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/10/chart_types.html</id>
        <category term="ds"/>
        <category term="charts"/>
        <category term="python"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Still looking into data representation, this time I&amp;#8217;m digging a little bit more on &lt;a href=&quot;https://matplotlib.org/&quot;&gt;Matplotlib&lt;/a&gt; and how to improve my charting kunfu. Still in the basics reviewing some basic charting types.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting_some_data&quot;&gt;Getting some data&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A week ago my dear workmate &lt;a href=&quot;https://twitter.com/alotor&quot;&gt;@alotor&lt;/a&gt; reminded me of the book &lt;a href=&quot;https://pragprog.com/titles/atcrime/your-code-as-a-crime-scene/&quot;&gt;Your code as a crime scene&lt;/a&gt; by Adam Tornhill, which I strongly recommend to anyone. In this book the author uses git and some other system tools to get information from software projects and then do some data analysis on them. In this article I&amp;#8217;m using the source code from the backend of &lt;a href=&quot;https://www.taiga.io&quot;&gt;Taiga&lt;/a&gt;, an open source project by &lt;a href=&quot;https://www.kaleidos.net&quot;&gt;Kaleidos&lt;/a&gt;. Taiga is, following the project&amp;#8217;s site definition: &lt;em&gt;the management tool for multi-functional agile teams&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;clone Taiga&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&amp;gt; git clone https://github.com/taigaio/taiga-back.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;scatter_plot&quot;&gt;Scatter plot&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the time is used &lt;strong&gt;to show the relationship between two different variables&lt;/strong&gt; using cartesian coordinates.  For example, lets see which days and hours the people works the most on Taiga. There will be two variables: one axis will be the &lt;strong&gt;days&lt;/strong&gt; and the other will be &lt;strong&gt;hours&lt;/strong&gt;. First I&amp;#8217;m extracting the information required from git:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;creating csv&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git log --pretty=format:&quot;%h;%ae;%aI&quot; &amp;gt; /tmp/commits_with_datetime.csv&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After loading the file into Jupyter you can then read the csv file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Loading csv file&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

by_datetime = pd.read_csv(&apos;commits_with_datetime.csv&apos;, sep=&apos;;&apos;, names=[&apos;hash&apos;, &apos;email&apos;, &apos;datetime&apos;])
by_datetime.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now lets create two columns in the dataframe for &lt;strong&gt;day of the week&lt;/strong&gt; and &lt;strong&gt;hour of the day&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;splitting datetime from commit hours&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from datetime import datetime as dt

by_datetime[&apos;datetime&apos;] = pd.to_datetime(by_datetime[&apos;datetime&apos;], utc=True)
by_datetime[&apos;weekday&apos;] = by_datetime[&apos;datetime&apos;].dt.weekday
by_datetime[&apos;hour&apos;] = by_datetime[&apos;datetime&apos;].dt.hour

august_to_september = (
    (by_datetime[&apos;datetime&apos;] &amp;gt; dt.fromisoformat(&apos;2020-08-12T00:00:00+02:00&apos;)) &amp;amp;
    (by_datetime[&apos;datetime&apos;] &amp;lt; dt.fromisoformat(&apos;2020-09-01T00:00:00+02:00&apos;)))

last_month = (by_datetime
    .copy()
    .loc[august_to_september]
    .loc[:, [&apos;datetime&apos;, &apos;hour&apos;]]
    .sort_values(&apos;datetime&apos;))

last_month.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can create a scatter plot showing the &lt;strong&gt;commits distribution in August 2020&lt;/strong&gt;. Apart from only showing the points I&amp;#8217;m also &lt;strong&gt;highligthing which commits were done during working hours&lt;/strong&gt; from those done during people&amp;#8217;s own time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Creating the scatter plot&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import matplotlib.pyplot as plt
import numpy as np
from datetime import timedelta, datetime as dt

# SCATTER DATA
xs = last_month[&apos;datetime&apos;]
ys = last_month[&apos;hour&apos;]

plt.figure(figsize=(15, 5))

# SCATTER PLOT
plt.scatter(xs, ys)

# TITLE AND LEGEND
plt.title(&apos;COMMITS DISTRIBUTED BY HOURS OF THE DAY (AUGUST 2020)&apos;)
plt.legend([&apos;commits&apos;])
plt.ylabel(&apos;HOURS (GMT +02:00)&apos;)
plt.grid(axis=&apos;x&apos;)

# DASHED LINES SHOWING WHERE THE WORKING HOURS START AND END
since = xs.min()
until = xs.max()

plt.hlines(y=8, xmin=since, xmax=until, linestyle=&apos;--&apos;, alpha=0.2, color=&apos;black&apos;)
plt.hlines(y=15, xmin=since, xmax=until, linestyle=&apos;--&apos;, alpha=0.2, color=&apos;black&apos;)

# WORKING OURS RANGE
plt.gca().fill_between(
    xs,
    15,
    8,
    alpha=0.5,
    color=&apos;#9ac9dc&apos;)

# WORKING HOURS CAPTION
plt.text(until - timedelta(days=0.5), 11, s=&apos;WORKING HOURS&apos;, size=18, ha=&quot;right&quot;, c=&apos;gray&apos;)

# MAKE THE BLUE AREA TO COVER THE WHOLE X AXIS
plt.margins(x=0)

# MAKING Y AXIS TO START AT ZERO
plt.yticks(np.arange(0, 28, step=4))

plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s the result:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_types/commits_distributed_by_hours.png&quot; alt=&quot;scatter_plot&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Scatter plot showing how commits are distributed by daily hours&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;strong&gt;possible insight&lt;/strong&gt; between days and hours would be that &lt;strong&gt;many of the commits in August were done at the beginning of the month, during working hours&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
to show the relationship between two different variables
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Include more variables, such as different sizes, to incorporate more data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start y-axis at 0 to represent data accurately.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use trend lines, only use a maximum of two to make your plot easy to understand.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scatter Plot on &lt;a href=&quot;https://en.wikipedia.org/wiki/Scatter_plot&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scatter Plot: &lt;a href=&quot;https://blog.hubspot.com/marketing/types-of-graphs-for-data-visualization&quot;&gt;How to Choose the Right Chart or Graph for Your Data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;line_chart&quot;&gt;Line chart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Normally a line chart is used &lt;strong&gt;to show a trend in data over time&lt;/strong&gt;. Using the commit list we got earlier, in the next example I&amp;#8217;d like to get &lt;strong&gt;the number of commits per month&lt;/strong&gt; to see if there&amp;#8217;s a trend over this year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Commits done by month&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from datetime import datetime as dt

year_2020 = by_datetime.copy()

year_2020[&apos;datetime&apos;] = pd.to_datetime(year_2020[&apos;datetime&apos;], utc=True)
year_2020[&apos;month&apos;] = year_2020[&apos;datetime&apos;].dt.month

within_2020 = (
    (year_2020[&apos;datetime&apos;] &amp;gt; dt.fromisoformat(&apos;2020-01-01T00:00:00+02:00&apos;)) &amp;amp;
    (year_2020[&apos;datetime&apos;] &amp;lt; dt.fromisoformat(&apos;2020-12-01T00:00:00+02:00&apos;)))

year_2020_by_month = (year_2020
    .loc[within_2020, [&apos;month&apos;, &apos;weekday&apos;]]
    .groupby(&apos;month&apos;)
    .count()
    .reset_index()
    .rename(columns={&apos;weekday&apos;: &apos;count&apos;}))

year_2020_by_month&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we&amp;#8217;ve got the number of commits by month, we can create a line plot showing the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Line plot creation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import matplotlib.pyplot as plt
import numpy as np

# PLOT DATA
xs = year_2020_by_month[&apos;month&apos;]
ys = year_2020_by_month[&apos;count&apos;]

# PLOT
plt.figure(figsize=(15, 5))

plt.plot(xs, ys)
plt.legend([&apos;NUMBER OF COMMITS&apos;])
plt.ylabel(&apos;NUMBER OF COMMITS&apos;)
plt.xlabel(&apos;MONTHS&apos;)
plt.title(&apos;NUMBER OF COMMITS BY MONTH (JAN-OCT 2020)&apos;)
plt.margins(x=0, y=0)

# SOME LINES HIGHLIGHTING MONTHS WITH HIGHER NUMBER OF COMMITS
for possible_release in [2, 5, 8]:
    plt.vlines(x=possible_release, ymin=0, ymax=50, linestyle=&apos;--&apos;, alpha=0.3)

# MAKING Y AXIS TO START AT ZERO
plt.yticks(np.arange(0, 55, step=5))

plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Executing the code finally we get the following result:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_types/no_commits_by_month.png&quot; alt=&quot;line_plot&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Line plot probably showing Taiga release trend during 2020&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s pretty clear that &lt;strong&gt;every 4 months there&amp;#8217;s an increase of the number of commits&lt;/strong&gt;. However taking a look to Taiga&amp;#8217;s backend &lt;a href=&quot;https://github.com/taigaio/taiga-back/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt; this fact doesn&amp;#8217;t correspond to any major release, therefore it should be caused by other reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
to show a trend in data over time
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;takeaways_2&quot;&gt;Takeaways&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use solid lines only.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;#8217;t plot more than four lines to avoid visual distractions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the right height so the lines take up roughly 2/3 of the y-axis&apos; height.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_2&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Line charts on &lt;a href=&quot;https://en.wikipedia.org/wiki/Line_chart&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line charts on &lt;a href=&quot;https://blog.hubspot.com/marketing/types-of-graphs-for-data-visualization&quot;&gt;How to Choose the Right Chart or Graph for Your Data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bar_chart&quot;&gt;Bar chart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A bar chart &lt;strong&gt;normally represents categorical data in the form of bars or columns&lt;/strong&gt;. The bars could be vertical or horizontal. They are normally used to compare different categories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason of using a bar char in this situation is because I&amp;#8217;d like &lt;strong&gt;to represent the lines of code of every programming language other than Python used&lt;/strong&gt; in Taiga&amp;#8217;s backend project. To get that type of information from source code I&amp;#8217;m using &lt;a href=&quot;https://github.com/AlDanial/cloc&quot;&gt;Cloc&lt;/a&gt;. Cloc counts lines of code and gives some insight about which language is implied in each source code file. I&amp;#8217;m executing cloc and redirecting its output to a csv file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Getting source code metrics&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&amp;gt; cd taiga-back
&amp;gt; cloc ./ --by-file --csv --quiet &amp;gt; /tmp/taiga_cloc_output.csv&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now after uploading the csv file to Jupyter we can then use it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Reading csv file&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

df = pd.read_csv(&apos;taiga_cloc_output.csv&apos;, usecols=range(0, 5))
df.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we liked to get the different languages used in the project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Different languages used in code&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;df[&apos;language&apos;].unique()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Getting a ranking of the languages used by number of files sorted in descending order, most used first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ranking of languages&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;by_language = (df
    .copy()
    .loc[:, [&apos;language&apos;, &apos;code&apos;]]
    .groupby(&apos;language&apos;)
    .count()
    .reset_index()
    .rename(columns={&apos;code&apos;: &apos;count&apos;})
    .sort_values(&apos;count&apos;, ascending=False))

by_language&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So it&amp;#8217;s clear Python is the most used language by far. But putting Python aside how important are the rest of the languages. I&amp;#8217;m using a bar chart to show it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Plot creation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import matplotlib.pyplot as plt
import numpy as np

bar_data = by_language.copy()
bar_data = bar_data.loc[bar_data[&apos;language&apos;] != &apos;Python&apos;]

xs = bar_data[&apos;language&apos;]
ys = bar_data[&apos;count&apos;]

plt.figure(figsize=(15, 5))

bar = plt.bar(xs, ys, color=&apos;gray&apos;)

# ADD CHART TITLE
plt.title(&apos;NUMBER OF NON PYTHON FILES BY TYPE&apos;)

# ADD NUMBER OF FILES ON TOP OF CHARTS
for rect in bar:
    x = rect.get_x() + (rect.get_width() / 2)
    y = rect.get_height()

    plt.text(x, y + 1, y, weight=&quot;bold&quot;, ha=&apos;center&apos;, va=&apos;center&apos;)

# HIGHLIGH MOST PROMINENT LANGUAGE
bar[0].set_color(&apos;orange&apos;)

# ADD MORE Y TICKS TO GIVE ON TOP NUMBERS SOME ROOM
plt.yticks(np.arange(0, 35, step=5))
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_types/languages_by_number_of_files.png&quot; alt=&quot;bar_chart&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Bar chart showing Non Python files by number of files&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
To compare different categories
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I did another bar char comparing top two committers in a given year to show a more complex use of bar charts. Alghough I&amp;#8217;m not showing the code here, you can download the Jupyter notebook attached to this article in the resources area at the end of the article. Here&amp;#8217;s the comparison between the two top committers 2015:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_types/bar_chart_top_two_committers.png&quot; alt=&quot;double_bar_chart&quot; width=&quot;90%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Top 2 committers 2015&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice how &lt;strong&gt;colors are identifying each person&lt;/strong&gt; along the year, and having the &lt;strong&gt;bars side by side helping the reader to compare&lt;/strong&gt; between both committers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;takeaways_3&quot;&gt;Takeaways&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use consistent colors throughout the chart, selecting accent colors to highlight meaningful data points or changes over time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use horizontal labels to improve readability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the y-axis at 0 to appropriately reflect the values in your graph.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_3&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bar charts on &lt;a href=&quot;https://en.wikipedia.org/wiki/Bar_chart&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bar charts on &lt;a href=&quot;https://blog.hubspot.com/marketing/types-of-graphs-for-data-visualization&quot;&gt;How to Choose the Right Chart or Graph for Your Data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pie_chart&quot;&gt;Pie chart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A pie chart is a &lt;strong&gt;circular graphic divided into slices representing different parts of a whole&lt;/strong&gt;. The arch length of each slice represents the percentage of that slice from the entire chart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With same data as we used in the bar chart example, I&amp;#8217;d like to represent the percentage of the Python files vs the rest of the languages. First of all lets read the data again:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;read data&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

df = pd.read_csv(&apos;taiga_cloc_output.csv&apos;, usecols=range(0, 5))
df.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, because there&amp;#8217;re really small categories I&amp;#8217;d like to create two groups, Python and the rest of the languages to highlight how big is Python regarding the rest of the languages used in Taiga&amp;#8217;s backend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;filtering data&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;df[&apos;is_python&apos;] = df[&apos;language&apos;].apply(lambda s: &apos;Python&apos; if s == &apos;Python&apos; else &apos;Non Python&apos;)

by_language = (df
    .loc[:, [&apos;is_python&apos;, &apos;code&apos;]]
    .groupby(&apos;is_python&apos;)
    .count()
    .reset_index()
    .rename(columns={&apos;code&apos;: &apos;count&apos;})
    .sort_values(&apos;count&apos;, ascending=False))

by_language&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the data is set, I can build the pie chart:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;plot creation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;plt.figure(figsize=(5, 5))

sizes  = by_language[&apos;count&apos;]
labels = by_language[&apos;is_python&apos;]

plt.title(&apos;Percentage of Python vs Non Python languages&apos;)
plt.pie(
    sizes,
    explode=(0, 0.1),
    labels=labels,
    textprops={&apos;size&apos;: 12},
    autopct=&apos;%1.1f%%&apos;,
    colors=[&apos;#68859c&apos;, &apos;#ffe76f&apos;])

plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_types/python_vs_non_python_pie.png&quot; alt=&quot;pie_chart&quot; height=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Pie chart showing Python presence vs other languages presence&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we already knew &lt;strong&gt;Python is the predominant programming language in this project with the 95% vs the 5% of the rest&lt;/strong&gt;. In order to see the percentage of the rest of the languages used, I cropped that part of pie and now it can be seen better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
representing different parts of a whole
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;takeaways_4&quot;&gt;Takeaways&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;#8217;t illustrate too many categories to ensure differentiation between slices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure that the slice values add up to 100%.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Order slices according to their size.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources_4&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pie chart on &lt;a href=&quot;https://en.wikipedia.org/wiki/Pie_chart&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pie chart on &lt;a href=&quot;https://blog.hubspot.com/marketing/types-of-graphs-for-data-visualization&quot;&gt;How to Choose the Right Chart or Graph for Your Data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other_resources&quot;&gt;Other Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/files/2020/10/charts_types/basic_charts.ipynb&quot;&gt;Jupyter Notebook with article examples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>DS - Data visualization 101</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/10/charts_rules.html"/>
        <updated>2020-10-09T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/10/charts_rules.html</id>
        <category term="ds"/>
        <category term="charts"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When trying to explain some data insights to somebody other than us, it requires, more often than not, some visual representation. The are several types of charts and an even greater number of customizations. It&amp;#8217;s important to know which types fit best with the data at hand. Although it seems a pretty straighforward task, there&amp;#8217;re plenty of examples of chart misuse, sometimes people had their heart in the right place, but unfortunately, sometimes misleading is done to confuse the viewer on purpose. At least I think it&amp;#8217;s important to know if we&amp;#8217;re in one group or the other.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;some_basic_rules&quot;&gt;Some basic rules&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think the &lt;a href=&quot;https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003833&quot;&gt;Ten simple rules for better figures&lt;/a&gt; by Rougier, Droettboom and Bourne is a good starting point. I&amp;#8217;m reviewing each of these rules by making my own &lt;strong&gt;good vs bad&lt;/strong&gt; examples. Although the visualization library I&amp;#8217;m using is &lt;a href=&quot;https://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt; these rules should hold when using any other visualization tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;know_your_audience&quot;&gt;Know your audience&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The idea behind this rule is that depending on the people we&amp;#8217;re targeting we should add more or less information to our charts. It has to do with the context the audience has before seeing the data visualization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
The more the audience is used to the data you&amp;#8217;re showing, the less information is necessary to add to the visualization.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, imagine your boss entering the room with the chart on the left and yelling  &lt;em&gt;Have you seen these numbers ? I&amp;#8217;m really worried&lt;/em&gt;. You may think the man didn&amp;#8217;t get his pills on time this morning right ? What are those numbers, what do they mean ? Your boss is showing something to an audience that doesn&amp;#8217;t know the context, &lt;strong&gt;he didn&amp;#8217;t realize that the audience he&amp;#8217;s talking to needs more information, more context&lt;/strong&gt;. If he only had added more information to the chart, maybe you could have had a chance. What about the chart on the right, with more information ?&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/know_your_audience_1.png&quot; alt=&quot;no_context&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/know_your_audience_2.png&quot; alt=&quot;with_context&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok now I can understand his concern, I know he lives in PUENTE DE VALLECAS, and he must be worried due to the number of POSSESSION OF PROHIBITED WEAPONS cases in his district. It&amp;#8217;s clear that if my boss were a police officer and I was working in the weapons related department I better know what the first chart was about!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;identify_your_message&quot;&gt;Identify your message&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The figure must match the idea of the message. So only when the the message you try to express is clearly identified you can think of the best figure expressing that message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
If the figure matches the idea of the message, it will reinforce it.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;re examples about how to represent &lt;a href=&quot;https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003833#pcbi-1003833-g002&quot;&gt;really complex things in a visualization&lt;/a&gt;, but &lt;strong&gt;in the end is just a matter of using the chart type that best represents the idea you wanted to communicate&lt;/strong&gt;. For example, Imagine I&amp;#8217;d like to represent the increment of the felonies in Madrid city during the last six months. I wouln&amp;#8217;t be doing any favor to the message using for example a pie chart. On the other hand using a line chart could help seeing if the numbers are rising or falling. In the chart on the right I&amp;#8217;m using a barchart with a tendency line.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;col style=&quot;width: 60%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/identify_your_message_1.png&quot; alt=&quot;wrong_message&quot; width=&quot;90%&quot; title=&quot;a&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/identify_your_message_2.png&quot; alt=&quot;right_message&quot; width=&quot;90%&quot; title=&quot;b&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a &lt;a href=&quot;https://blog.hubspot.com/marketing/types-of-graphs-for-data-visualization&quot;&gt;great article&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/jamioetting&quot;&gt;Jami Oetting&lt;/a&gt; that verses on how to choose the right chart depdending on the data you want to show.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;adapt_the_figure_to_the_support_medium&quot;&gt;Adapt the figure to the support medium&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case the medium is a blog post that is going to be read by someone in a laptop or a home computer, but tomorrow it could be a big screen in a conference room in front dozens of people. Depending on the medium the amount of information in my figures should be different. If someone is reading a blog post, I can add more details because the reader can stop and review the details at his/her pace whereas in a presentation the slides are going to be shown in a limited period of time. It&amp;#8217;s not only about the amount of information, it also about to &lt;strong&gt;prioritize which information is most valuable depending on the medium and the time&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
People don&amp;#8217;t always have the time to look to all the details.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine we were in a room showing the evolution of numbers of drug posession in Madrid from March to August in 2020, using a slide like the one on the left, even people in the first rows could have a hard time figuring out which line is the one we&amp;#8217;re talking about. Instead the &lt;strong&gt;chart on the right side highlights just the part I want the people to focus&lt;/strong&gt; reducing the noise.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/adapt_to_medium_1.png&quot; alt=&quot;hard&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/adapt_to_medium_2.png&quot; alt=&quot;easy&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;captions_are_not_optional&quot;&gt;Captions are not optional&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The caption helps to understand the figure. Imagine a simple pie chart with three areas but with no percentages, no titles telling what the areas represent, that is important information missing right ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Add the required information to understand what is the intent of the figure without any further explanation.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another example, the chart on the left has little information, it can&amp;#8217;t help the reader to understand what the figure is about, or what the percentages mean. However the chart on the right has &lt;strong&gt;the minimum information to express what the chart is about&lt;/strong&gt;, and what the different areas represent.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/captions_1.png&quot; alt=&quot;hard&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/captions_2.png&quot; alt=&quot;easy&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;do_not_trust_the_defaults&quot;&gt;Do not trust the defaults&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default most visualization libraries normally use a subset that can be used in a wider range of cases. Because of that, &lt;strong&gt;the default can lack many of important information&lt;/strong&gt; we&amp;#8217;ve been talking about earlier. If that happens we need to learn how to customize the library in order to add whatever additions/changes necessary to create the right message. That could include, adding &lt;strong&gt;captions, changing colors, completing axis information, legends&amp;#8230;&amp;#8203; etc&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
By default, the defaults shouldn&amp;#8217;t be the default! xD
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following example shows how the default &lt;strong&gt;horizontal bar plot&lt;/strong&gt; (left) looks like. It&amp;#8217;s not so bad, it has the x-axis but everytime you want to know how many premises a given type has, you have to guess it, and even for the top category the x-axis is a little bit to far. Now on the right, is the same data visualized using a &lt;strong&gt;customized horizontal bar plot&lt;/strong&gt;. Numbers and labels for every type makes a &lt;strong&gt;better use of the space&lt;/strong&gt;. Also &lt;strong&gt;colors have been changed&lt;/strong&gt; to maximize the contrast and make it easier to read. A little bit more about the color in the next section.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/defaults_1.png&quot; alt=&quot;hard&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/defaults_2.png&quot; alt=&quot;easy&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;use_color_effectively&quot;&gt;Use color effectively&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using colors wisely could help to enhance your charts, and improve the understanding of the information shown. But it also could lead to a complete disaster misleading your audience from the real message if used wrong. A wrong use of the color could also become a phisical barrier, e.g. if you chose a colormap with low contrast, people with color blindness won&amp;#8217;t be able to see the difference between colors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Colors should mean something, otherwise keep it simple
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following the previous chart, I&amp;#8217;m adding colors to it with no special reason, maybe I though it could be more appealing. Look at the chart on the left. Yeah it may look nicer, but &lt;strong&gt;the colors don&amp;#8217;t add any meaningful value&lt;/strong&gt;, and a reader could do a &lt;strong&gt;wrong interpretation&lt;/strong&gt; based of the colors: maybe red means danger, green means safer&amp;#8230;&amp;#8203;etc. If the colors don&amp;#8217;t mean anything, it&amp;#8217;s better to keep it simple like the chart on the right and avoid misinterpretations.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/colors_1.png&quot; alt=&quot;hard&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/colors_2.png&quot; alt=&quot;easy&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another practical use of colors in bar charts is to &lt;strong&gt;associate categories&lt;/strong&gt; (could be companies, political parties&amp;#8230;&amp;#8203;) to colors, or &lt;strong&gt;setting threshold limits&lt;/strong&gt;. Here you have two examples of these ideas.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/colors_3.png&quot; alt=&quot;hard&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/colors_4.png&quot; alt=&quot;easy&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;do_not_mislead_the_reader&quot;&gt;Do not mislead the reader&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alberto Cairo in his work &lt;a href=&quot;https://journalismcourses.org/wp-content/uploads/2020/07/Misleading-Visuals.pdf&quot;&gt;Graphic Lies, misleading visuals&lt;/a&gt; writes about what are the principal techniques used to mislead the reader, or in his words how &lt;strong&gt;Becoming a good liar&lt;/strong&gt;. In his paper Cairo points out three important ideas used to mislead the reader:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hiding relevant data to highlight what benefit us&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Displaying too much data to obscure reality&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using graphic forms in inappropiate ways (distorting the data)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;hiding_relevant_data_to_highlight_what_benefit_us&quot;&gt;Hiding relevant data to highlight what benefit us&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve seen a lot of companies going through difficult times but still showing great figures taken from cherry-picked statistics. These two charts represent the same data, but the chart on the left &lt;strong&gt;has cherry-picked the best values leaving bad months out of sight&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/mislead_1.png&quot; alt=&quot;misleading&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/mislead_2.png&quot; alt=&quot;real&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;displaying_too_much_data_to_obscure_reality&quot;&gt;Displaying too much data to obscure reality&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If there&amp;#8217;s some really bad numbers that someone wanted to hide from the reader, a good technique could be to show the data we&amp;#8217;re not interested in showing along with a lot of other indicators. In reality bad numbers will be hidden or minimized under all the rest of noisy data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Make the bad numbers to become the needle in the haystack
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I came up with the following example, I wanted to check how real state market was doing in Madrid towns depending on number of people and the GDP of the people living in the area, and I tried to visualize everything altogether. &lt;strong&gt;I realized there&amp;#8217;re too many cities&lt;/strong&gt; inside the area of Madrid apart from Madrid city as you can see in the chart on the left. Therefore the only way of analyzing the data was &lt;strong&gt;taking smaller subsets&lt;/strong&gt; of the data. You can see one of the smaller subsets in chart on the right.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/too_much_data_1.png&quot; alt=&quot;too_much_data&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/too_much_data_2.png&quot; alt=&quot;less_data_better&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;using_graphic_forms_in_inappropiate_ways_distorting_the_data&quot;&gt;Using graphic forms in inappropiate ways (distorting the data)&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this category you can find cases where authors are using chart types that were not meant to those cases or cases where the authors are playing with chart configuration in order to bend the reality in their favor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Look for figure smells, Does it lack information to check whether data is properly shown, or distorted ?
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the next example I made up a few supercar brands competing to each other in sales. Apparently the brand that has sold more cars has created the chart on the left to highlight its superiority over the competition. But if you look at the reality (chart on the right) the competition is not so far away as the want us to believe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What did they do in order to deceive us ? Well something really simple, &lt;strong&gt;they truncated the y-axis to increase the impression that the difference is greater than it really is, and then they hide the y-axis to prevent us from discovering the deception&lt;/strong&gt;. The only thing that smells wrong is that the common sense is telling us that according to the numbers the difference looks exagerated. The problem is that if you&amp;#8217;re a Kinison fan, your critical thinking will be probably on vacation.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/distorting_1.png&quot; alt=&quot;a&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/distorting_2.png&quot; alt=&quot;b&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;avoid_chartjunk&quot;&gt;Avoid &quot;chartjunk&quot;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chartjunk most of the time &lt;strong&gt;refers to everything we could add to chart without adding anything useful or meaningful to it&lt;/strong&gt;. We&amp;#8217;ve already seen a good example of this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/10/chart_rules/too_much_data_1.png&quot; alt=&quot;too_much_data&quot; height=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Too much data, colors with no apparently meaning&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So yes, &lt;strong&gt;in general chartjunk should be avoided&lt;/strong&gt;, but sometimes, &lt;strong&gt;chartjunk in the form of infographics has been proved to be useful to memorize the message and the chart itself in the long term&lt;/strong&gt; as Bateman, Mandryk, Gutwin stated in their paper &lt;a href=&quot;http://www.stat.columbia.edu/~gelman/communication/Bateman2010.pdf&quot;&gt;Useful Junk? The Effects of Visual Embellishment on
Comprehension and Memorability of Charts&lt;/a&gt;. Judge by yourself, which of the following charts will you remember tomorrow ?&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-none stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/too_much_data_2.png&quot; alt=&quot;simpledata&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/2020/10/chart_rules/chartjunk_1.png&quot; alt=&quot;chartjunk&quot; width=&quot;90%&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;message_trumps_beauty&quot;&gt;Message trumps beauty&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes it&amp;#8217;s difficult to figure out which chart will fit best our message, and is in these situations when we are tempted to improvise and create new types of visualizations. We can even create a beautiful masterpiece, but before trying to be the next Michael Angelo &lt;strong&gt;it&amp;#8217;s always better to look whether somebody has already dealt with this problem before&lt;/strong&gt;, or if maybe something that&amp;#8217;s already there could help us with the message we&amp;#8217;re trying to send.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main reason is that there&amp;#8217;re tons of scientific documents written by really smart people out there, showing hundreds of ways of visualizing data and it&amp;#8217;s very likely that some of these works will fit somehow in our problem if not perfectly. &lt;strong&gt;Avoid reinventing the wheel&lt;/strong&gt;, and remember that &lt;strong&gt;people is more likely to have some exposure to pre-existent scientific visualizations&lt;/strong&gt; helping them to avoid the effort of understanding a new way of visualizing data plus the message behind the chart.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;getting_the_right_tool&quot;&gt;Getting the right tool&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Depending on your area of expertise, the medium you&amp;#8217;re going to use and the technology you are confortable with, there&amp;#8217;re plenty of tools and libraries out there to visualize the data in the way that best expresses the message you&amp;#8217;re trying to communicate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However I would like to differenciate between the concept of libraries and tools. In the present article I&amp;#8217;m using &lt;a href=&quot;https://matplotlib.org/&quot;&gt;Matplotlib&lt;/a&gt; which is a Python library for data visualization but it&amp;#8217;s been used inside a &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt; notebook. &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt; is a tool, but in the sense of a full featured environment where I can integrate the data I&amp;#8217;m using with some analitic tools with some visualization libraries to show the result of my findings. Another example of such type of tool could be &lt;a href=&quot;https://www.cs.waikato.ac.nz/ml/weka/&quot;&gt;Weka&lt;/a&gt; which is another tool for loading, analyzing and visualizing data, or &lt;a href=&quot;http://beakerx.com/&quot;&gt;BeakerX&lt;/a&gt; which is the Java version of Jupyter. Of course this section will be incomplete without mentioning the &lt;a href=&quot;https://www.r-project.org/&quot;&gt;R project&lt;/a&gt;, which could be considered as well a full featured data-oriented environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally some links to useful resources regarding data visualization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;article_sources&quot;&gt;Article Sources&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here you can find &lt;a href=&quot;/files/2020/10/charts_101/data_visualization.tar.gz&quot;&gt;a tar file&lt;/a&gt; with all the sources of the examples I did for this article. You should find both the Jupyter notebooks and the data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cheatsheets&quot;&gt;Cheatsheets&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;If you&amp;#8217;d like to have like a cheatsheet&lt;/strong&gt; to quickly know which chart fits best the data you&amp;#8217;re trying to communicate, please don&amp;#8217;t forget to take a look to these:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.hubspot.com/marketing/types-of-graphs-for-data-visualization&quot;&gt;Types of graphs for data visualization&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.data-to-viz.com/&quot;&gt;From Data to Viz leads you to the most appropriate graph for your data. It links to the code to build it and lists common caveats you should avoid&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;theory&quot;&gt;Theory&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some &lt;strong&gt;papers and posts&lt;/strong&gt; worth reading:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003833&quot;&gt;Ten simple rules for better figures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://journalismcourses.org/wp-content/uploads/2020/07/Misleading-Visuals.pdf&quot;&gt;Graphic Lies, misleading visuals (Alberto Cairo)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.stat.columbia.edu/~gelman/communication/Bateman2010.pdf&quot;&gt;Useful Junk? The Effects of Visual Embellishment on
Comprehension and Memorability of Charts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/albertocairo1706/videos&quot;&gt;Alberto Cairo videos in YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.edwardtufte.com/tufte/books_vdqi&quot;&gt;THE VISUAL DISPLAY OF QUANTITATIVE INFORMATION&lt;/a&gt; A classic book by Edward Tufte&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;examples_of_bad_visualizations&quot;&gt;Examples of bad visualizations&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;d like &lt;strong&gt;to have a laugh&lt;/strong&gt; watching horrendous or suspicious charts, take a look at these:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://viz.wtf/&quot;&gt;WTF Visualizations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/dataisugly/&quot;&gt;Data Is Ugly (Reddit)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;data&quot;&gt;Data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data I&amp;#8217;ve used to create the charts in this article:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://datos.madrid.es/portal/site/egob/menuitem.c05c1f754a33a9fbe4b2e4b284f1a5a0/?vgnextoid=bffff1d2a9fdb410VgnVCM2000000c205a0aRCRD&amp;amp;vgnextchannel=374512b9ace9f310VgnVCM100000171f5a0aRCRD&amp;amp;vgnextfmt=default&quot;&gt;Madrid Local Police Monthly Statistics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.idealista.com/sala-de-prensa/informes-precio-vivienda/venta/madrid-comunidad/madrid-provincia/&quot;&gt;Real State prices in Madrid 2020&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.agenciatributaria.es/AEAT/Contenidos_Comunes/La_Agencia_Tributaria/Estadisticas/Publicaciones/sites/irpfmunicipios/2018/jrubik7fe28e5d4daeab97eaf47efe29f0716914ab405e.html&quot;&gt;Madrid GDP 2018&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://datos.comunidad.madrid/catalogo/dataset/municipio_comunidad_madrid/resource/ee750429-1e05-411a-b026-a57ea452a34a&quot;&gt;Madrid Towns demographics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;visualization_libraries&quot;&gt;Visualization libraries&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Libraries you can use with your favorite programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;python&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m sure there&amp;#8217;re many more in the Python world but Matplotlib is widely used mainly because its integration in Pandas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://matplotlib.org/&quot;&gt;Matplotlib (Python)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;js&quot;&gt;JS&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In JS there&amp;#8217;re trillions (well maybe not so many) of libraries, but I&amp;#8217;ve worked with Echarts a couple of times in the past two years and it has my respect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://echarts.apache.org/en/index.html&quot;&gt;Apache ECharts (Javascript)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;java&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have to say, I haven&amp;#8217;t tested any of the following libraries, but I&amp;#8217;m looking forward to do it in the future. I just did a couple of searches and I copied the ones that looked up to date.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jtablesaw/tablesaw&quot;&gt;Tablesaw&lt;/a&gt;: Java dataframe and visualization library&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eseifert/gral&quot;&gt;Gral&lt;/a&gt;: Free Java library for displaying plots&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jzy3d/jzy3d-api&quot;&gt;jzy3d&lt;/a&gt;: A Java API for 3d charts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/knowm/XChart&quot;&gt;XChart&lt;/a&gt;: is a light-weight Java library for plotting data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jfree/jfreechart&quot;&gt;JFreeChart&lt;/a&gt;: A 2D chart library for Java applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jgrapht.org/&quot;&gt;JGrapht&lt;/a&gt;: a Java library of graph theory data structures and algorithms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://graphstream-project.org/&quot;&gt;GraphStream&lt;/a&gt;: A Dynamic Graph Library&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;integrated_environments_for_data_analysis_and_visualization&quot;&gt;Integrated Environments for data analysis and visualization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A library alone can&amp;#8217;t solve all the problems trying to get some meaningful insights from data, and integrated environment normally does.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;python_2&quot;&gt;Python&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The king of the Jungle at the moment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt;: Project Jupyter exists to develop open-source software, open-standards, and services for interactive computing across dozens of programming languages&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;java_2&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the following list, I&amp;#8217;ve tested BeakerX which is, keeping long story short, a Jupyter environment with the possibility of using a JVM language in your notebooks. I also know Weka which is also an integrated environment for data analysis however nowadays is more focused towards machine learning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://beakerx.com/&quot;&gt;BeakerX&lt;/a&gt;: BeakerX is a collection of kernels and extensions to the Jupyter interactive computing environment. It provides JVM support&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cs.waikato.ac.nz/ml/weka/&quot;&gt;Weka&lt;/a&gt;: It is widely used for teaching, research, and industrial applications, contains a plethora of built-in tools for standard machine learning tasks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PatMartin/dex&quot;&gt;Dex&lt;/a&gt;: The Data Explorer&amp;#8201;&amp;#8212;&amp;#8201;A data visualization tool written in Java/Groovy/JavaFX capable of powerful ETL and publishing web visualizations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://datamelt.org/&quot;&gt;DataMelt&lt;/a&gt;: is a free software for numeric computation, mathematics, statistics, symbolic calculations, data analysis and data visualization&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Matrices - Basic operations</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/09/maths_matrices_numpy_basics.html"/>
        <updated>2020-09-22T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/09/maths_matrices_numpy_basics.html</id>
        <category term="maths"/>
        <category term="python"/>
        <category term="matrix"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After review basic matrix operations in a &lt;a href=&quot;http://localhost:8080/blog/2020/09/maths_matrices_operations.html&quot;&gt;previous article&lt;/a&gt;, in this article I&amp;#8217;m reviewing these operations and their properties using Python and the &lt;a href=&quot;https://numpy.org/&quot;&gt;Numpy&lt;/a&gt; library.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;matrices_with_numpy&quot;&gt;Matrices with Numpy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although there&amp;#8217;s the &lt;strong&gt;matrix&lt;/strong&gt; function to create matrices, &lt;a href=&quot;https://numpy.org/doc/stable/reference/generated/numpy.matrix.html&quot;&gt;according to documentation is deprecated&lt;/a&gt; in favor of &lt;strong&gt;array&lt;/strong&gt;. So lets say we want to create different arrays:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/3d2d2ee2baa7a5273daa6bbd5417e412.png&quot; alt=&quot;3d2d2ee2baa7a5273daa6bbd5417e412.png&quot; height=&quot;80&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. array A&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we&amp;#8217;ve mentioned earlier, we need to import &lt;a href=&quot;https://numpy.org/&quot;&gt;Numpy&lt;/a&gt; and then create an array representing the matrix. A matrix in Numpy will be written as a multidimensional array:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Matrix declaration&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

A = np.array([
    [1, 2, 3].
    [1, 2, 3]
])

B = np.array([
    [1],
    [2]
])

C = np.array([
    [1, 1],
    [2, 2],
    [3, 3]
])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sum&quot;&gt;SUM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, How do we sum two different matrices ? As easy as declaring both matrices and then add them up using the &lt;strong&gt;+&lt;/strong&gt; operator:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/d5de5fdb95dd8655eb0290535b65150f.png&quot; alt=&quot;d5de5fdb95dd8655eb0290535b65150f.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. two matrices A and B&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding up two matrices&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

A = np.array([
    [1, 2, 3],
    [1, 2, 3]
])

B = np.array([
    [2, 2, 2],
    [2, 2, 2]
])

A + B&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Of course if you try to sum two matrices with different order (different shape in numpy terms) the operation will fail, as it&amp;#8217;s not possible to sum matrices of different order.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;commutative&quot;&gt;Commutative&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the same matrices we can check that the &lt;strong&gt;commutative property&lt;/strong&gt; holds. We can can use &lt;strong&gt;array_equal&lt;/strong&gt; to make sure both &lt;strong&gt;A + B&lt;/strong&gt; and &lt;strong&gt;B + A&lt;/strong&gt; are equal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/53199ee40c6dcf18bfb0ef8acabcda91.png&quot; alt=&quot;53199ee40c6dcf18bfb0ef8acabcda91.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. commutative&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;commutative proof&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

A = np.array([
    [1, 2, 3],
    [1, 2, 3]
])

B = np.array([
    [2, 2, 2],
    [2, 2, 2]
])

np.array_equal(A + B, B + A)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;associative&quot;&gt;Associative&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now checking the &lt;strong&gt;associative property&lt;/strong&gt; with a third matrix &lt;strong&gt;C&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/f5a50397d43fbc7d2b1086a959240609.png&quot; alt=&quot;f5a50397d43fbc7d2b1086a959240609.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. another matrix C&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/fd801dcd6a6a044ec7b1ad9bf9be2fa1.png&quot; alt=&quot;fd801dcd6a6a044ec7b1ad9bf9be2fa1.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. associative&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

A = np.array([
    [1, 2, 3],
    [1, 2, 3]
])

B = np.array([
    [2, 2, 2],
    [2, 2, 2]
])

C = np.array([
    [2, 2, 2],
    [2, 2, 2]
])

np.array_equal(A + (B + C), (A + B) + C)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;additive_identity&quot;&gt;Additive identity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally if we add the &lt;strong&gt;zero&lt;/strong&gt; matrix to &lt;strong&gt;A&lt;/strong&gt; it should return the &lt;strong&gt;A&lt;/strong&gt; matrix: You can create a &lt;strong&gt;zero&lt;/strong&gt; array using Numpy&amp;#8217;s &lt;strong&gt;zeros&lt;/strong&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
THe zero matrix should be of the &lt;strong&gt;same order as A&lt;/strong&gt;. Meaning if A is of order 2x3 then the zero matrix should be of order 2x3 as well.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding zero matrix to A&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

A = np.array([
    [1, 2, 3],
    [1, 2, 3]
])

O = np.zeros((2,3))

np.array_equal(A + O, A)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;additive_inverse&quot;&gt;Additive inverse&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given a matrix &lt;strong&gt;A&lt;/strong&gt; there is its inverse &lt;strong&gt;-A&lt;/strong&gt; so that &lt;strong&gt;-A+A=O&lt;/strong&gt;. Adding up a matrix and its inverse results in a &lt;strong&gt;zero&lt;/strong&gt; matrix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;additive inverse proof&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

A = np.array([
    [1, 2, 3],
    [1, 2, 3]
])

O = np.zeros((2, 3))

np.array_equal(A + (-A), O)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;multiplication&quot;&gt;MULTIPLICATION&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Matrix multiplication is also known as the &lt;strong&gt;dot&lt;/strong&gt; operation, and there&amp;#8217;s the &lt;strong&gt;dot&lt;/strong&gt; function in Numpy for a given matrix. Therefore for multiplying two different matrices we can use this &lt;strong&gt;dot&lt;/strong&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/aca54a4709a9031e9213018f31e2e5f3.png&quot; alt=&quot;aca54a4709a9031e9213018f31e2e5f3.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. two matrices A and B&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;multiplying A * B&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

A = np.array([
    [1, 2],
    [2, 3]
])

B = np.array([
    [1, 2, 3],
    [3, 4, 1]
])

expected = np.array([
    [ 7, 10,  5],
    [11, 16,  9]
])

np.array_equal(A.dot(B), expected)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Again both matrices must be compatible in order to multiply them, otherwise an error will be raised.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;associative_2&quot;&gt;Associative&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re checking that &lt;strong&gt;A(BC) = (AB)C&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Remember that the order of the elements in matrix multiplication is important, meaning &lt;strong&gt;ABC != CBA&lt;/strong&gt;:
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;associative proof&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

A = np.array([
    [2, 2],
    [2, 2],
])

B = np.array([
    [1, 2],
    [1, 2],
])
C = np.array([
    [2, 1],
    [2, 1],
])

BC = B.dot(C)
AB = A.dot(B)

np.array_equal(A.dot(BC), AB.dot(C))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;distributive&quot;&gt;Distributive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The distributive property has two parts, &lt;strong&gt;A(B+C) = AB + AC&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A(B + C) = AB + AC&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;A = np.array([[1, 2], [1, 2]])
B = np.array([[2, 2], [2, 2]])
C = np.array([[3, 3], [3, 3]])

AB = A.dot(B)
AC = A.dot(C)

np.array_equal(A.dot(B + C), AB + AC)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And then &lt;strong&gt;(A + B)C = AC + BC&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;(A+B)C = AC + BC&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;A = np.array([[1, 2], [1, 2]])
B = np.array([[2, 2], [2, 2]])
C = np.array([[3, 3], [3, 3]])

AC = A.dot(C)
BC = B.dot(C)

np.array_equal((A+B).dot(C), AC + BC)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;multiplicative_identity&quot;&gt;Multiplicative identity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Multiplicative identity property says that if any matrix &lt;strong&gt;A&lt;/strong&gt; is multiplied by the &lt;strong&gt;identity matrix&lt;/strong&gt; then the result will be &lt;strong&gt;A&lt;/strong&gt;. You can use numpy&amp;#8217;s function &lt;strong&gt;identity&lt;/strong&gt; to get an &lt;strong&gt;identity matrix&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;multiply by identity&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import numpy as np

A = np.array([
    [2, 2],
    [2, 2],
])

I = np.identity(2)

np.array_equal(A.dot(I), A)
np.array_equal(I.dot(A), A)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://numpy.org/&quot;&gt;Numpy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codeformech.com/matrix-operations-linear-algebra-using-python/&quot;&gt;Linear algebra using Python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Matrices - Basic operations</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/09/maths_matrices_operations.html"/>
        <updated>2020-09-21T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/09/maths_matrices_operations.html</id>
        <category term="maths"/>
        <category term="matrices"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Matrices are one of the most used Math abstraction nowadays, specially in the field of machine learning. That&amp;#8217;s why I encounter myself lately reviewing matrices theory. Now with the most basic operations: &lt;strong&gt;sum&lt;/strong&gt; and &lt;strong&gt;multiplication&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sum&quot;&gt;SUM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before adding up two matrices &lt;strong&gt;they must have the same dimensions&lt;/strong&gt;, the same number of lines and columns. Once we&amp;#8217;ve got two valid matrices, we have to add up each correspondent pair of both matrices, &lt;strong&gt;a&lt;sub&gt;1,1&lt;/sub&gt; + b&lt;sub&gt;1,1&lt;/sub&gt;, a&lt;sub&gt;1,2&lt;/sub&gt; + b&lt;sub&gt;1,2&lt;/sub&gt; &amp;#8230;&amp;#8203; a&lt;sub&gt;n,m&lt;/sub&gt; + b&lt;sub&gt;n,m&lt;/sub&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/matrices_basic_operations/matrix_sum_process.png&quot; alt=&quot;commutative&quot; height=&quot;250&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Sum (row,column) of A with the same (row, column) of B&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, lets say we have a matrix &lt;strong&gt;A&lt;/strong&gt; and a matrix &lt;strong&gt;B&lt;/strong&gt; and lets add them up:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/4c27af57175b6e8c9e1e83b967f5ede3.png&quot; alt=&quot;4c27af57175b6e8c9e1e83b967f5ede3.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Adding up two matrices&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Matrix addition has a number of properties worth knowing, such as: &lt;strong&gt;commutative&lt;/strong&gt;, &lt;strong&gt;associative&lt;/strong&gt;, the &lt;strong&gt;additive identity&lt;/strong&gt; and the &lt;strong&gt;additive inverse&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;commutative&quot;&gt;COMMUTATIVE&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If A and B are matrices of the same order then it doesn&amp;#8217;t matter the order in which you add them up, in other words &lt;strong&gt;A + B = B + A&lt;/strong&gt;. Lets prove it, lets make A and B to be two real matrices:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/92dfbc2cb02304b93145c3469c378f12.png&quot; alt=&quot;92dfbc2cb02304b93145c3469c378f12.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Two matrices of the same order&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So lets do &lt;strong&gt;A + B&lt;/strong&gt; and then &lt;strong&gt;B + A&lt;/strong&gt; to check that both operations have the same result:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/b87ad35c27e48900c7866490787ad4c0.png&quot; alt=&quot;b87ad35c27e48900c7866490787ad4c0.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Commutative property proof&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;associative&quot;&gt;ASSOCIATIVE&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Matrix addition is associative. This says that, if A, B and C are Three matrices of the same order then you will get the same result whether you add &lt;strong&gt;A to (B + C)&lt;/strong&gt; or &lt;strong&gt;(A + B) to C&lt;/strong&gt;. Lets prove it by defining three matrices:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2a51117b88e4737630b7b005409604e7.png&quot; alt=&quot;2a51117b88e4737630b7b005409604e7.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Three matrices of the same order (2x2)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now lets define &lt;strong&gt;B + C&lt;/strong&gt; AND &lt;strong&gt;A + B&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/d05998e5da9797d13c9909bdcf483c89.png&quot; alt=&quot;d05998e5da9797d13c9909bdcf483c89.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Resolving (B + C) and (A + B)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/bc4fdc58b112103ec89267fed60e6d9e.png&quot; alt=&quot;bc4fdc58b112103ec89267fed60e6d9e.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. Associative property proof A + (B + C)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/3ba1da5d60495d608982f8fbf8d5f8e4.png&quot; alt=&quot;3ba1da5d60495d608982f8fbf8d5f8e4.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. Associative property proof (A + B) + C&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;additive_identity&quot;&gt;ADDITIVE IDENTITY&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let A be the matrix then, &lt;strong&gt;A + O = A = O + A&lt;/strong&gt; Therefore, &lt;strong&gt;O&lt;/strong&gt; a matrix of the same order as the matrix A that when added up to &lt;strong&gt;A&lt;/strong&gt; equals to &lt;strong&gt;A&lt;/strong&gt; as well. &lt;strong&gt;O&lt;/strong&gt; is also named the &lt;strong&gt;null&lt;/strong&gt; or &lt;strong&gt;zero&lt;/strong&gt; matrix. So lets prove it adding up a matrix &lt;strong&gt;A&lt;/strong&gt; with a compatible &lt;strong&gt;zero&lt;/strong&gt; matrix. First the two matrices:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/4961332eccb32f8020b94d816e233840.png&quot; alt=&quot;4961332eccb32f8020b94d816e233840.png&quot; height=&quot;65&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 9. Two matrices of the same order (3x3)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now adding up &lt;strong&gt;A&lt;/strong&gt; to &lt;strong&gt;O&lt;/strong&gt; must result in &lt;strong&gt;A&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/71be61798e5508737ee1b5c54b988c61.png&quot; alt=&quot;71be61798e5508737ee1b5c54b988c61.png&quot; height=&quot;65&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 10. Additive identity proof&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;additive_inverse&quot;&gt;ADDITIVE INVERSE&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let A be the matrix then, &lt;strong&gt;A + (- A) = O = (- A) + A&lt;/strong&gt;  where &lt;strong&gt;-A&lt;/strong&gt; is the &lt;strong&gt;inverse of A&lt;/strong&gt;. The &lt;strong&gt;inverse of a matrix&lt;/strong&gt; is the matrix obtained by changing the sign of every matrix element. Having &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;-A&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/4fbcffb55906329dd3249da3f3aefa75.png&quot; alt=&quot;4fbcffb55906329dd3249da3f3aefa75.png&quot; height=&quot;65&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 11. Matrix A and its inverse -A&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So basically adding up &lt;strong&gt;-A&lt;/strong&gt; to &lt;strong&gt;A&lt;/strong&gt; will end up giving &lt;strong&gt;O&lt;/strong&gt; (the null matrix):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/9d05f9c5183afc6cad849907627d84d4.png&quot; alt=&quot;9d05f9c5183afc6cad849907627d84d4.png&quot; height=&quot;65&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 12. A + (-A)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the opposite works the same:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/8c3aa1abda55989b4d89bec201cd34b9.png&quot; alt=&quot;8c3aa1abda55989b4d89bec201cd34b9.png&quot; height=&quot;65&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 13. Additive inverse proof&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;multiply&quot;&gt;MULTIPLY&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If &lt;strong&gt;A&lt;/strong&gt; is a matrix of order &lt;strong&gt;m x n&lt;/strong&gt; and B is another matrix with order &lt;strong&gt;o x p&lt;/strong&gt; where &lt;strong&gt;m&lt;/strong&gt; and &lt;strong&gt;o&lt;/strong&gt; are number of rows and &lt;strong&gt;n&lt;/strong&gt; and &lt;strong&gt;p&lt;/strong&gt; are number of columns, in order to be able to multiply &lt;strong&gt;A x B&lt;/strong&gt;, then &lt;strong&gt;n == o&lt;/strong&gt; must be true, meaning that the number of columns of &lt;strong&gt;A&lt;/strong&gt; must be equals the number of rows in &lt;strong&gt;B&lt;/strong&gt;, and the resulting matrix will be of order &lt;strong&gt;m x p&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/matrices_basic_operations/multiply_pre.png&quot; alt=&quot;multiplication&quot; width=&quot;500&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How is the procedure of multiplying two matrices ? Well, the element &lt;strong&gt;C&lt;sub&gt;i,j&lt;/sub&gt;&lt;/strong&gt; (where &lt;strong&gt;i&lt;/strong&gt; is the row and &lt;strong&gt;j&lt;/strong&gt; is the column) will be the result of multiplying the elements of &lt;strong&gt;A&lt;sub&gt;i&lt;/sub&gt;&lt;/strong&gt; by the elements &lt;strong&gt;B&lt;sub&gt;j&lt;/sub&gt;&lt;/strong&gt; and adding up their results. So for example, when multiplying &lt;strong&gt;A x B = C&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/matrices_basic_operations/multiply_process.png&quot; alt=&quot;process&quot; width=&quot;500&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/e29b866254e91513ccd25ce45adbdeaa.png&quot; alt=&quot;e29b866254e91513ccd25ce45adbdeaa.png&quot; height=&quot;180&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 14. Matrix C cells&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s an example, there&amp;#8217;re two matrices &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/1f715b76e89b3d4ece10306a4dca1849.png&quot; alt=&quot;1f715b76e89b3d4ece10306a4dca1849.png&quot; height=&quot;70&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 15. Two matrices to multiply&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then in order to get &lt;strong&gt;c&lt;sub&gt;1,1&lt;/sub&gt;&lt;/strong&gt; we need to multiply elements from &lt;strong&gt;a&lt;sub&gt;1,&amp;#8230;&amp;#8203;&lt;/sub&gt;&lt;/strong&gt; and &lt;strong&gt;b&lt;sub&gt;&amp;#8230;&amp;#8203;,1&lt;/sub&gt;&lt;/strong&gt; and then add them up:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2b7916ac4fd6b1ac6271bf772400748a.png&quot; alt=&quot;2b7916ac4fd6b1ac6271bf772400748a.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 16. Resolving c&lt;sub&gt;1,1&lt;/sub&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now in order to get &lt;strong&gt;c&lt;sub&gt;1,2&lt;/sub&gt;&lt;/strong&gt; we need to multiply elements from &lt;strong&gt;a&lt;sub&gt;1,&amp;#8230;&amp;#8203;&lt;/sub&gt;&lt;/strong&gt; and &lt;strong&gt;b&lt;sub&gt;&amp;#8230;&amp;#8203;,2&lt;/sub&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/42da6e8bbee0c4f3de8531300e6f24fd.png&quot; alt=&quot;42da6e8bbee0c4f3de8531300e6f24fd.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 17. Resolving c&lt;sub&gt;1,2&lt;/sub&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And this would go on and on for remaining cells:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/d229eb831653e78bbc39dde22f0caf09.png&quot; alt=&quot;d229eb831653e78bbc39dde22f0caf09.png&quot; width=&quot;700&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 18. Two matrices to multiply&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally simplifying:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/5a3a9caf2641b93284b40105c62d6038.png&quot; alt=&quot;5a3a9caf2641b93284b40105c62d6038.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 19. A * B result&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The matrix multiplication has a few properties: the &lt;strong&gt;associative&lt;/strong&gt; the &lt;strong&gt;distributive&lt;/strong&gt; and the &lt;strong&gt;multiplicative identity&lt;/strong&gt;. Lets view them all with examples. I&amp;#8217;m using the following matrices:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/11393696767fea805a3d694a125971e0.png&quot; alt=&quot;11393696767fea805a3d694a125971e0.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;associative_2&quot;&gt;Associative&lt;/h3&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This should be called pseudo-associative due to the fact that the order to the elements in a matrix multiplication matters. &lt;strong&gt;AB&lt;/strong&gt; and &lt;strong&gt;BA&lt;/strong&gt; may not result in the same solution.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The associative property says that &lt;strong&gt;A(BC)=(AB)C&lt;/strong&gt;. So lets calculate &lt;strong&gt;A(BC)&lt;/strong&gt; first and then &lt;strong&gt;(AB)C&lt;/strong&gt; and compare both results:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/b470aa8be45237e4c1b2b352a961222c.png&quot; alt=&quot;b470aa8be45237e4c1b2b352a961222c.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 20. A(BC)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then &lt;strong&gt;A(BC)&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/9c2403f161ed4dd7739846572f75b2b0.png&quot; alt=&quot;9c2403f161ed4dd7739846572f75b2b0.png&quot; height=&quot;60&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 21. (AB)C&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;distributive&quot;&gt;Distributive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When multiplying three different matrices &lt;strong&gt;A, B and C&lt;/strong&gt; the distributive property says that &lt;strong&gt;A(B+C) = AB + AC&lt;/strong&gt; and also that &lt;strong&gt;(A+B)C = AC + BC&lt;/strong&gt;. So again having the previous &lt;strong&gt;A, B and C&lt;/strong&gt; matrices, lets do a couple of calculations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;abc_ab_ac&quot;&gt;A(B+C) = AB + AC&lt;/h4&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/052d2910493fa9d578b5daf39dfca2d9.png&quot; alt=&quot;052d2910493fa9d578b5daf39dfca2d9.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 22. A(B+C)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/6c5a38b2aed9a001b2b85ef8e3e4a370.png&quot; alt=&quot;6c5a38b2aed9a001b2b85ef8e3e4a370.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 23. AB + AC&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;abc_ac_bc&quot;&gt;(A+B)C = AC + BC&lt;/h4&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/7b2e6d43d39332682192f0a0738c8fc6.png&quot; alt=&quot;7b2e6d43d39332682192f0a0738c8fc6.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 24. (A+B)C&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/8572889475f81f70c1cf6cf3bb230f27.png&quot; alt=&quot;8572889475f81f70c1cf6cf3bb230f27.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 25. AC + BC&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;multiplicative_identity&quot;&gt;Multiplicative identity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The multiplicative identity property says that there&amp;#8217;s an &lt;strong&gt;identity matrix&lt;/strong&gt;. When a matrix is multiplied by this &lt;strong&gt;identity matrix&lt;/strong&gt; the result is the matrix itself. The mathematical formula would be &lt;strong&gt;AI = A = IA&lt;/strong&gt; where &lt;strong&gt;I&lt;/strong&gt; is the &lt;strong&gt;identity matrix&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/12688282ae1a31faf6f26e990231805d.png&quot; alt=&quot;12688282ae1a31faf6f26e990231805d.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 26. multiplicative identity proof (AI)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/a34c7c0b6195377908a7c080296062f8.png&quot; alt=&quot;a34c7c0b6195377908a7c080296062f8.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 27. multiplicative identity proof (IA)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Italian - Plural</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/09/italiano_plural_genre.html"/>
        <updated>2020-09-09T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/09/italiano_plural_genre.html</id>
        <category term="languages"/>
        <category term="italian"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/italiano_plural/mela_mele.png&quot; alt=&quot;mela&quot; height=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;basic_rules&quot;&gt;Basic rules&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;re a few rules to know how to construct plural in italian depending on the ending of the singular form. I&amp;#8217;m probably missing some rule but in general we&amp;#8217;ve got:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch centered&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. basic rules&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;singular&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;plural&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;example&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-a&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-e&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;amica &amp;#8594; amice (friend f.)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-o&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-i&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;zaino &amp;#8594; zaini (bagpack)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-e&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-i&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;stazione &amp;#8594; stazioni (station)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here you have some examples following these rules:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch centered&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. examples&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;singular&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;plural&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;meaning&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ospedale&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ospedali&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;hospital&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;cassa&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;casse&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;house/home&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;matita&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;matite&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;pencil&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;panino&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;panini&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;sandwich&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;penna&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;penne&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;pastry&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;pizza&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;pizze&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;pizza&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;piazza&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;piazze&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;square&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;povero&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;poveri&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;poor&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;quaderno&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;quaderni&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;notebook&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;sieda&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;siede&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;chair&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;spiaggia&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;spiaggie&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;beach&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;foreign_words&quot;&gt;Foreign words&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general foreign words are the same in both singular and plural.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/italiano_plural/foreign_words.png&quot; alt=&quot;mela&quot; height=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding_h&quot;&gt;Adding h&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally there&amp;#8217;re some exceptions to the basic rules. These exceptions try to keep the sonority that the singular form had.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch centered&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 3. h rules&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;singular&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;plural&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;example&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-ca&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-che&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;amica &amp;#8594; amiche&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-ga&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-ghe&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ruga &amp;#8594; rughe&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When ending with &lt;strong&gt;-go&lt;/strong&gt; depends. If it&amp;#8217;s related to a person the the plural ends with &lt;strong&gt;gi&lt;/strong&gt; as in &lt;strong&gt;biologo &amp;#8594; biologi&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch centered&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 4. ending with -go&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;singular&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;plural&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;example&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-go&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-gui&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;albergo &amp;#8594; alberghi&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-go&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-gi&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;biologo &amp;#8594; biologi&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same goes with &lt;strong&gt;-co&lt;/strong&gt;. Depending on whether the letter before &lt;strong&gt;co&lt;/strong&gt; is a vowel or a consonant, the plural will be different.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch centered&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 5. ending with -co (cont.)&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;singular&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;plural&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;example&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-[vowel]co&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;chi&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;parco &amp;#8594; parchi&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-[conso]co&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ci&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;medico &amp;#8594; medici&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;must_know_exceptions&quot;&gt;Must-know exceptions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally there&amp;#8217;re some must-know exceptions worth learning:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch centered&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 6. important exceptions&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;singular&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;plural&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;meaning&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;uomo&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;uomini&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;man&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;dito&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;dita&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;finger&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;uovo&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;uova&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;egg&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;braccio&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;braccia&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;arm&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.edx.org/course/italian-language-and-culture-beginner-2019-2020&quot;&gt;Italian course on EDX&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IoudHeIDvIM&quot;&gt;Italian Plural Nouns and Their Exceptions (Youtube)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>DS - Pandas - Merging DataFrames</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/09/ds_pandas_df_merge.html"/>
        <updated>2020-09-08T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/09/ds_pandas_df_merge.html</id>
        <category term="ds"/>
        <category term="pandas"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_merge/magic_join.png&quot; alt=&quot;magic_join&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is part of a series of articles dedicated to study Data Science using Python. This article
shows a couple of basic examples on DataFrame merging.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;one_is_easy_two_or_more_arenormal&quot;&gt;One is easy, two or more are&amp;#8230;&amp;#8203;normal?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s true, more than often you have to deal with more than one data source in order to get some insight about the problem you want to tackle. Maybe you can transform your source files in order to get just one file, but most of the time you can&amp;#8217;t or is very time consuming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of doing that, you can create Pandas DataFrames and then merge those DataFrames with some logic in order to get the result that you wanted. Most of the time you will want to either concatenate data or join data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;appending&quot;&gt;Appending&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So basically we want more than one DataFrame and we&amp;#8217;d like to concatenate them in just one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;rows&quot;&gt;Rows&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest use case is when we&amp;#8217;ve got two files with the same format (same columns, and type of data) and we want to concatenate both files one after the other. Here we have two DataFrames, both with the same type of data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_merge/concatenate.png&quot; alt=&quot;concatenate&quot; height=&quot;250&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;concatenate rows from two DataFrames&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;df1 = pd.DataFrame([{&quot;name&quot;: &quot;john&quot;, &quot;age&quot;: 22}, {&quot;name&quot;: &quot;peter&quot;, &quot;age&quot;: 34}])
df2 = pd.DataFrame([{&quot;name&quot;: &quot;anna&quot;, &quot;age&quot;: 34}, {&quot;name&quot;: &quot;uri&quot;, &quot;age&quot;: 43}])

result = pd.concat([df1, df2])
result

all_data = pd.concatenate(data_2018, data_2019)
all_data&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Concatenating rows&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;age&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;john&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;22&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;peter&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;34&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;anna&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;34&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;uri&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;43&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now &lt;strong&gt;all_data&lt;/strong&gt; has all the rows from both DataFrames but &lt;strong&gt;notice how indexes are repeated&lt;/strong&gt;. We may want to reset the index for the new DataFrame.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

df1 = pd.DataFrame([{&quot;name&quot;: &quot;john&quot;, &quot;age&quot;: 22}, {&quot;name&quot;: &quot;peter&quot;, &quot;age&quot;: 34}])
df2 = pd.DataFrame([{&quot;name&quot;: &quot;anna&quot;, &quot;age&quot;: 34}, {&quot;name&quot;: &quot;uri&quot;, &quot;age&quot;: 43}])

result = pd.concat([df1, df2]).reset_index(drop=True)
result&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Resetting index&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;age&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;john&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;22&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;peter&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;34&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;anna&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;34&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;uri&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;43&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;columns&quot;&gt;Columns&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, think of a series of files, each file represents a part of the whole data and you&amp;#8217;d like to have everything in just one DataFrame. So basic assumption is, there&amp;#8217;re the same amount of lines in every DataFrame.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_merge/concatenate_columns.png&quot; alt=&quot;concatenate_columns&quot; height=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this occasion we have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One DataFrame has the names of the students and the other has the ages of the students.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both DataFrames have the same number of rows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both DataFrames are sorted in a way that rows in one DataFrame match the rows in the other DataFrame so names are ending up matching the right ages.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;appending columns&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;df1 = pd.DataFrame([{&quot;name&quot;: &quot;john&quot;}, {&quot;name&quot;: &quot;peter&quot;}, {&quot;name&quot;: &quot;anna&quot;}, {&quot;name&quot;: &quot;uri&quot;}])
df2 = pd.DataFrame([{&quot;age&quot;: 22}, {&quot;age&quot;: 34}, {&quot;age&quot;: 34}, {&quot;age&quot;: 43}])

result = pd.\
    concat([df1, df2], axis=1).\
    reset_index(drop=True)

result&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time is not necessary to reset the index as the second DataFrame is using the first DataFrame index.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;joining&quot;&gt;Joining&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By joining I mean to merge different datasets together following certain rules. Imaging having students&apos; names and their ids in one dataset and their ids and ages in another and you&amp;#8217;d like to merge them all in just one dataset, matching records in both datasets by their ids.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes there will be ages with ids that don&amp;#8217;t match any record in the other dataset, then, What do we do ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Should we discard them ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Should we add them in the merged dataset with missing data ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Depending on the situation you may want to do the former or the latter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;inner&quot;&gt;Inner&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When doing inner joins what we try to achieve is to match rows from both DataFrames by something they have in common. It could be the row index, or a row column value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When doing inner join by DataFrame index it seems pretty similar to the appending columns example. Here we are joining datasets by their index, so it loops over all the rows in one dataframe and if the other dataframe has a row with the same index then all columns will be added to the next row in the new DataFrame.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Remember that in Pandas DataFrame, by default a DataFrame has a numerical index that begins with integer 0 and follows an incremental sequence.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So bottom line is it will merge all rows with the same index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;df1 = pd.DataFrame([{&quot;name&quot;: &quot;john&quot;}, {&quot;name&quot;: &quot;peter&quot;}, {&quot;name&quot;: &quot;anna&quot;}, {&quot;name&quot;: &quot;uri&quot;}])
df2 = pd.DataFrame([{&quot;age&quot;: 22}, {&quot;age&quot;: 34}, {&quot;age&quot;: 34}, {&quot;age&quot;: 43}])

merged = pd.merge(df1, df2, left_index=True, right_index=True)
merged&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See how I&amp;#8217;m telling the &lt;strong&gt;merge&lt;/strong&gt; function to use indexes in both DataFrames to do the join. You can change this in order to chose which DataFrame&amp;#8217;s index has to be used to do the join.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But there&amp;#8217;re plenty of times when different datasets don&amp;#8217;t have their records in the same order or the index they&amp;#8217;re store doesn&amp;#8217;t correspond to their identity. Moreover their ids are values in one of the columns of the DataFrame. Basically like in a database table with a primary key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_merge/inner_join.png&quot; alt=&quot;inner_join&quot; height=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;inner join by column&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;df1 = pd.DataFrame([
    {&quot;id&quot;: 1, &quot;name&quot;: &quot;john&quot;},
    {&quot;id&quot;: 2, &quot;name&quot;: &quot;peter&quot;},
    {&quot;id&quot;: 3, &quot;name&quot;: &quot;anna&quot;}])
df2 = pd.DataFrame([
    {&quot;id&quot;: 1, &quot;age&quot;: 22},
    {&quot;id&quot;: 2, &quot;age&quot;: 34},
    {&quot;id&quot;: 3, &quot;age&quot;: 34},
    {&quot;id&quot;: 4, &quot;age&quot;: 43}])

merged = pd.merge(df1, df2, how=&quot;inner&quot;, on=&quot;id&quot;)
merged&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 3. Inner Join with missing rows&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;age&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;john&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;22&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;peter&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;34&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;anna&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;34&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;merge&lt;/strong&gt; method is invoked with &lt;strong&gt;how=&quot;inner&quot;&lt;/strong&gt; to tell the function not to add a row if both DataFrames don&amp;#8217;t have a row with the same matching key (&lt;strong&gt;on=&quot;id&quot;&lt;/strong&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can see that because there&amp;#8217;s no &lt;strong&gt;&quot;id&quot;: 4&lt;/strong&gt; in the left DataFrame, we cannot match any record in the second DataFrame, therefore the result doesn&amp;#8217;t have 4 rows but only 3. This works pretty much as a relational database inner join.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;outer&quot;&gt;Outer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the inner join approach we were discarding some rows if the column&amp;#8217;s value didn&amp;#8217;t match. But what if we wanted to add rows not matching the key ? What would happen ? Lets review the previous example, but instead of using inner join, we&amp;#8217;re using &lt;strong&gt;outer&lt;/strong&gt; as the joining strategy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_merge/outer_join.png&quot; alt=&quot;outer_join&quot; height=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;outer join&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;df1 = pd.DataFrame([
    {&quot;id&quot;: 1, &quot;name&quot;: &quot;john&quot;},
    {&quot;id&quot;: 2, &quot;name&quot;: &quot;peter&quot;},
    {&quot;id&quot;: 3, &quot;name&quot;: &quot;anna&quot;}])
df2 = pd.DataFrame([
    {&quot;id&quot;: 1, &quot;age&quot;: 22},
    {&quot;id&quot;: 2, &quot;age&quot;: 34},
    {&quot;id&quot;: 3, &quot;age&quot;: 34},
    {&quot;id&quot;: 4, &quot;age&quot;: 43}])

merged = pd.merge(df1, df2, how=&quot;outer&quot;, on=&quot;id&quot;)
merged&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 4. Outer Join with Nan values&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;age&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;john&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;22&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;peter&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;34&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;anna&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;34&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Nan&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;43&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;completing_data&quot;&gt;Completing data&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s another scenario where you can have two DataFrames and one of them is like a master table that could be use to complete information in the other DataFrame.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_merge/completing_data.png&quot; alt=&quot;completing_data&quot; height=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaging there&amp;#8217;s a reference of Formula 1 circuits, and another DataFrame having the drivers that have participated in a specific race, and we want to know how many kilometers did the drivers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;getting all relevant information altogether&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;circuits = pd.DataFrame({&quot;circuit&quot;: [&quot;Monza&quot;, &quot;Spa&quot;], &quot;length&quot;: [5, 4]})
drivers  = pd.DataFrame([
    {&quot;name&quot;: &quot;Lewis Hamilton&quot;, &quot;circuit&quot;: &quot;Spa&quot;, &quot;laps&quot;: 53},
    {&quot;name&quot;: &quot;Carlos Sainz&quot;, &quot;circuit&quot;: &quot;Spa&quot;, &quot;laps&quot;: 43}])

circuits_drivers = pd.merge(circuits, drivers, how=&quot;right&quot;, on=&quot;circuit&quot;)
circuits_drivers&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 5. Completing driver information for Spa&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;circuit&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;length&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;laps&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Spa&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Lewis Hamilton&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;53&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Spa&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Carlos Sainz&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;53&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;getting km per pilot&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;circuits_drivers[&quot;km&quot;] = circuits_drivers[&quot;laps&quot;] * circuits_drivers[&quot;length&quot;]
spa_stats = circuits_drivers.\
    drop([&quot;circuit&quot;, &quot;length&quot;], axis=1, inplace=False)
spa_stats&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 6. KM by drivers in SPA&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;laps&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;km&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Lewis Hamilton&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;53&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;212&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Carlos Sainz&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;43&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;172&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are very basic examples of concatenating, and merging DataFrames, there&amp;#8217;s a section only for that matter in the Pandas site, check links in the &lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt; section:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/user_guide/merging.html&quot;&gt;Pandas docs: Merge, join, concatenate&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>DS - Research - Bike accidents in Madrid</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/09/ds_jupyter_madrid_accidents.html"/>
        <updated>2020-09-05T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/09/ds_jupyter_madrid_accidents.html</id>
        <category term="ds"/>
        <category term="jupyter"/>
        <category term="python"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;strong&gt;DISCLAIMER ALERT&lt;/strong&gt;: This article is intended to be an exercise to start practicing with the Jupyter tool and Python related scientific libraries such as Pandas and Numpy. By no means it&amp;#8217;s supposed to be considered as a reference analysis of any kind.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bike_accident_analysis_in_madrid_city_2018_2020&quot;&gt;Bike accident analysis in Madrid city (2018-2020)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following the Coursera course I’m in I wanted to practice with some real
data out there. What best to get some insights about the city I live in
? Nowadays I normally ride my bike several days a week through the city
so as you would imagine I&amp;#8217;m very concerned about the bike accidents in the city.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_jupyter_madrid_accidents/bike_accident_madrid.png&quot; alt=&quot;accident&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://datos.madrid.es/portal/site/egob/menuitem.c05c1f754a33a9fbe4b2e4b284f1a5a0/?vgnextoid=7c2843010d9c3610VgnVCM2000001f4a900aRCRD&amp;amp;vgnextchannel=374512b9ace9f310VgnVCM100000171f5a0aRCRD&amp;amp;vgnextfmt=default&quot;&gt;source datasets&lt;/a&gt; I’m using during this analysis are taken from the site &lt;a href=&quot;https://datos.madrid.es/portal/site/egob/&quot;&gt;Madrid council open data site&lt;/a&gt;. Specifically I’m using the years 2018, 2019, and 2020
(until August which is the last available dataset at the time of
writing). In the resources section you can also find the Jupyter source file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve realized that conducting an analysis using a Jupyter Notebook is
great not only because is one of the best tools for statistical analysis
but also because I can export the notebook to asciidoc which I can
convert easily to asciidoctor and copy/paste it to my blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before doing any kind of analysis we need to look the data and see if we
should clean it up a little bit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2018_dataset&quot;&gt;2018 Dataset&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Datasets before 2018 have a different formatting that datasets from 2019
and ahead. Therefore I need to make them match the rest of the datasets
I’m merging it with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[1]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

def get_first_hour(hour_range_str):
    import re
    m = re.search(&apos;DE (.*) A .*&apos;, hour_range_str)
    return m.group(1)

accidents_2018 = pd.read_csv(&quot;accidents_2018.csv&quot;, delimiter=&quot;;&quot;, skiprows=0, encoding=&quot;ISO-8859-1&quot;)

accidents_2018[&quot;TIPO VEHÍCULO&quot;] = accidents_2018[&quot;Tipo Vehiculo&quot;]
accidents_2018[&quot;CALLE&quot;] = accidents_2018[&quot;LUGAR ACCIDENTE&quot;]
accidents_2018[&quot;HORA&quot;] = accidents_2018[&quot;RANGO HORARIO&quot;].apply(get_first_hour)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2019_2020_datasets&quot;&gt;2019-2020 Datasets&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reading 2019 and 2020 CSV files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[2]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;accidents_2020 = pd.read_csv(&quot;accidents_2020.csv&quot;, delimiter=&quot;;&quot;, skiprows=0, encoding=&quot;ISO-8859-1&quot;)
accidents_2019 = pd.read_csv(&quot;accidents_2019.csv&quot;, delimiter=&quot;;&quot;, skiprows=0, encoding=&quot;ISO-8859-1&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;merging_datasets_2018_2020&quot;&gt;Merging datasets 2018-2020&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally merging all datasets into the dataframe I’ll be working with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[3]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;accidents=pd.concat([accidents_2018, accidents_2019, accidents_2020])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preparing_dataframe_to_start_with_the_analysis&quot;&gt;Preparing DataFrame to start with the analysis&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before starting with the analysis there’re a couple of steps required to
make the process a little bit easier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I’m interested only in &lt;strong&gt;a given set of columns&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FECHA (Date)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HORA (Hour)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CALLE (Street),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DISTRITO (District)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TIPO VEHÍCULO (Type of Vehicle)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[4]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;columns_to_keep = [&quot;FECHA&quot;, &quot;HORA&quot;, &quot;CALLE&quot;, &quot;DISTRITO&quot;, &quot;TIPO VEHÍCULO&quot;]
accidents = accidents[columns_to_keep].dropna()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I’m only interested in &lt;strong&gt;bike accidents&lt;/strong&gt;: &lt;strong&gt;Ci&lt;/strong&gt; stands for moped in spanish.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[5]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;by_bike = accidents[&quot;TIPO VEHÍCULO&quot;].str.startswith(&quot;Moto&quot;) | \
    accidents[&quot;TIPO VEHÍCULO&quot;].str.startswith(&quot;Ci&quot;) | \
    accidents[&quot;TIPO VEHÍCULO&quot;].str.startswith(&quot;MO&quot;)

accidents = accidents[by_bike]
accidents.drop(&quot;TIPO VEHÍCULO&quot;, axis=1, inplace=True)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I need to normalize &lt;strong&gt;street names&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[6]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;accidents[&quot;CALLE&quot;] = accidents[&quot;CALLE&quot;].\
    str.replace(&quot;CALLE DE&quot;, &quot;&quot;).\
    str.replace(&quot;CALLE&quot;, &quot;&quot;).\
    str.replace(&quot;NUM .*&quot;, &quot;&quot;).\
    str.replace(&quot;CALL. &quot;, &quot;&quot;).\
    str.replace(&quot; - .*&quot;, &quot;&quot;).\
    str.strip()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I need to normalize &lt;strong&gt;district names&lt;/strong&gt; as well.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[7]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;for x, y in [(&apos;Á&apos;, &apos;A&apos;), (&apos;Í&apos;, &apos;I&apos;)]:
    accidents[&quot;DISTRITO&quot;] = accidents[&quot;DISTRITO&quot;].\
        str.replace(x, y).\
        str.strip()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Convert string dates&lt;/strong&gt; to actual timestamp objects&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[8]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;accidents[&quot;TIMESTAMP&quot;] = accidents[&quot;FECHA&quot;] + &quot; &quot; + accidents[&quot;HORA&quot;]
accidents[&quot;TIMESTAMP&quot;] = pd.to_datetime(accidents[&quot;TIMESTAMP&quot;], format=&quot;%d/%m/%Y %H:%M&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sort DataFrame by date&lt;/strong&gt; in ascending order&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[9]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;accidents = accidents.sort_values(&quot;TIMESTAMP&quot;)
accidents = accidents.reset_index()
accidents.drop([&quot;FECHA&quot;, &quot;HORA&quot;, &quot;index&quot;], axis=1, inplace=True)
accidents.head()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[9]:*&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;CALLE&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;DISTRITO&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;TIMESTAMP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VIA CARPETANA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CARABANCHEL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2018-01-01 21:00:00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LA INFANTA MERCEDES&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TETUAN&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2018-01-02 12:00:00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LA ARMADA ESPAÑOLA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SALAMANCA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2018-01-02 13:00:00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;EUGENIO SALAZAR&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CHAMARTIN&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2018-01-02 14:00:00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;PASEO DE LA CASTELLANA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CHAMBERI&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2018-01-02 15:00:00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;accident_trend&quot;&gt;Accident trend&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this first question I’d like to address the following points:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Answer the question&lt;/strong&gt;: Are the number of accidents increasing from
2018 ?&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show a line chart&lt;/strong&gt; showing the trend&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[10]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;trends = accidents.copy()
trends[&quot;NO&quot;] = 1
trends[&quot;MONTH&quot;] = trends[&quot;TIMESTAMP&quot;].dt.strftime(&quot;%m&quot;)
trends[&quot;YEAR&quot;] = trends[&quot;TIMESTAMP&quot;].dt.strftime(&quot;%Y&quot;)
trends = trends.set_index([&quot;YEAR&quot;, &quot;MONTH&quot;])
trends = trends.groupby([&quot;YEAR&quot;, &quot;MONTH&quot;]).sum()
trends = trends.reset_index()
trends[&quot;DATE&quot;] = trends[&quot;YEAR&quot;] + &quot;/&quot; + trends[&quot;MONTH&quot;]
trends[&quot;DATE&quot;] = pd.to_datetime(trends[&quot;DATE&quot;], format=&quot;%Y/%m&quot;)

# getting rid of unnecessary columns
trends.drop([&quot;YEAR&quot;, &quot;MONTH&quot;], axis=1, inplace=True)

# rolling mean
trends[&quot;MEAN&quot;] = trends[&quot;NO&quot;].rolling(6).mean()
trends = trends.set_index(&quot;DATE&quot;)

trends.plot.line(figsize=(15,5))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[10]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_jupyter_madrid_accidents/output_20_1.png&quot; alt=&quot;DataFrame&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Visually the first thing that sprang to mind was &lt;strong&gt;the huge abism on
april 2020&lt;/strong&gt; because of the &lt;strong&gt;covid-19 confinement&lt;/strong&gt; in Spain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Despite that important fact, is also true that &lt;strong&gt;the general trend from
2018 was increasing significantly until october 2019&lt;/strong&gt;. You can see the
rolling mean (in yellow) going up until later 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are &lt;strong&gt;two patterns&lt;/strong&gt; worth mentioning:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A decrease&lt;/strong&gt; of accidents at holidays’ peaks (August/December)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;An increase&lt;/strong&gt; at the end of of holidays (end of August and earlier
January)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see the increase/decrease percentage in the next dataframe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[11]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;percent = accidents.copy()

percent[&quot;NO&quot;] = 1
percent[&quot;YEAR&quot;] = percent[&quot;TIMESTAMP&quot;].dt.year
percent = percent.groupby(&quot;YEAR&quot;).aggregate(&quot;sum&quot;).head()

percent = percent.reset_index()
percent = percent.rename(columns={&quot;NO&quot;: &quot;TOTAL&quot;}, inplace=False)

for i in range(1, len(percent)):
    previous = percent.loc[i-1, &quot;TOTAL&quot;]
    current = percent.loc[i, &quot;TOTAL&quot;]
    percent.loc[i, &quot;INCREMENT&quot;] = ((current - previous) / previous) * 100

percent&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[11]:*&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;YEAR&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;TOTAL&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;INCREMENT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2018&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4489&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NaN&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2019&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6885&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;53.374916&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2020&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2352&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-65.838780&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;worst_districts_by_number_of_accidents&quot;&gt;Worst districts by number of accidents&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The worst ten district by number of accidents during these three years
were:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[12]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;wb = accidents.copy()
wb[&quot;NO&quot;] = 1
wb = wb.\
    groupby(&quot;DISTRITO&quot;).\
    sum().\
    sort_values(&quot;NO&quot;, ascending=False)

wb.head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[12]:*&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NO&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DISTRITO&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1517&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SALAMANCA&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1276&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CENTRO&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1264&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CHAMBERI&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1250&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CHAMARTIN&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;998&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TETUAN&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;873&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CIUDAD LINEAL&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;776&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RETIRO&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;699&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MONCLOA-ARAVACA&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;648&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ARGANZUELA&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;593&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CARABANCHEL&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;comparing_the_wost_distrinct_vs_the_best&quot;&gt;Comparing the wost distrinct vs the best&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most dangerous district vs the safest. It turns out the district
with &lt;strong&gt;the highest rate of accidents&lt;/strong&gt; was the district of &lt;strong&gt;SALAMANCA&lt;/strong&gt;
whereas &lt;strong&gt;the lowest was VICALVARO&lt;/strong&gt;. It makes sense because VICALVARO is
outside the city center by far, so traffic density is also very low.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[13]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;wb = wb.iloc[[0, -1]]
wb&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[13]:*&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NO&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DISTRITO&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1517&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SALAMANCA&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;117&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VICALVARO&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;when_is_the_bestworst_hours_to_ride_in_general&quot;&gt;When is the best/worst hours to ride in general ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apart from the districts it would be nice to know which are the
best/worst moment to get out there with your bike. Although we will see
how rush hours are in general a bad moment to go, it seems that &lt;strong&gt;the
worst hour to ride in general is 14h&lt;/strong&gt;, is when most accidents occur. On
the other hand, &lt;strong&gt;the hour with less number of accidents is 4h&lt;/strong&gt;, which
makes sense because at that hour at night you don’t see a soul on the
road.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[14]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;hs = accidents.copy()

hs[&quot;HOUR&quot;] = hs[&quot;TIMESTAMP&quot;].dt.hour
hs[&quot;DAY&quot;] = hs[&quot;TIMESTAMP&quot;].dt.dayofweek

hs = hs.\
    groupby([&quot;DAY&quot;, &quot;HOUR&quot;]).\
    size().\
    reset_index(name=&quot;COUNT&quot;).\
    set_index(&quot;DAY&quot;)

all_week = pd.DataFrame(hs.reset_index().groupby(&quot;HOUR&quot;)[&quot;COUNT&quot;].sum())
values = all_week.sort_values(&quot;COUNT&quot;)

worst = values.iloc[-1]
best  = values.iloc[0]

w_hour, w_no, b_hour, b_no = [worst.name, worst[&quot;COUNT&quot;], best.name, best[&quot;COUNT&quot;]]

message = &quot;Best \t==&amp;gt; {}h  ({} accidents)\nWorst \t==&amp;gt; {}h ({} accidents)&quot;.format(b_hour, b_no, w_hour, w_no)
print(message)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[14]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;Best 	==&amp;gt; 4h  (60 accidents)
Worst 	==&amp;gt; 14h (1060 accidents)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;analysis_of_hours_during_the_week&quot;&gt;Analysis of hours during the week&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’d to see visually how accidents are arrange on a working day. In order
to achieve that I’m creating a bar chart with the aggregated number of
accidents from Monday to Friday by hour.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[15]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;week = hs.loc[0:5]
week = pd.DataFrame(week.reset_index().groupby(&quot;HOUR&quot;)[&quot;COUNT&quot;].sum())

week.plot.bar(y=&quot;COUNT&quot;, figsize=(15,5))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[15]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_jupyter_madrid_accidents/output_30_1.png&quot; alt=&quot;chart&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;analysis_of_hours_during_the_weekend&quot;&gt;Analysis of hours during the weekend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a biker, it’s even more important to me to analyse when is the best
moment to ride my bike during the weekends. So the same way I did the
analysis for the working days, here I’m doing the same for the weekend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[16]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;weekend = hs.loc[5:7]
weekend = pd.DataFrame(weekend.reset_index().groupby(&quot;HOUR&quot;)[&quot;COUNT&quot;].sum())

weekend.plot.bar(y=&quot;COUNT&quot;, figsize=(15,5))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[16]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_jupyter_madrid_accidents/output_32_1.png&quot; alt=&quot;chart&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;comparing_weekweekend_hour_by_hour&quot;&gt;Comparing week/weekend hour by hour&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fortunately the number of accidents decreases a lot during weekends, but
the shape of the chart seems to be pretty similar. I’m curious to see
both charts head to head to see both datasets with the same scale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[17]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;all_week = weekend.copy()
all_week[&quot;WEEK&quot;] = week[&quot;COUNT&quot;]

all_week.\
    rename(columns={&quot;COUNT&quot;: &quot;WEEKEND&quot;}, inplace=False).\
    plot.bar(figsize=(15,5))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[17]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_jupyter_madrid_accidents/output_34_1.png&quot; alt=&quot;chart&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see &lt;strong&gt;there’s a huge difference&lt;/strong&gt; (even visually) when you
compare both datasets altogether &lt;strong&gt;with the same scale&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;comparing_weekend_days_hour_by_hour&quot;&gt;Comparing weekend days hour by hour&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time I’m going directly to compare both Saturday and Sunday
datasets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[18]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;saturday = hs.loc[5]
saturday = pd.DataFrame(saturday.reset_index().groupby(&quot;HOUR&quot;)[&quot;COUNT&quot;].sum()).\
    rename(columns={&quot;COUNT&quot;: &quot;SATURDAY&quot;})

sunday = hs.loc[6]
sunday = pd.DataFrame(sunday.reset_index().groupby(&quot;HOUR&quot;)[&quot;COUNT&quot;].sum()).\
    rename(columns={&quot;COUNT&quot;: &quot;SUNDAY&quot;})

pd.merge(saturday, sunday, how=&quot;inner&quot;, on=&quot;HOUR&quot;).\
    plot.bar(figsize=(15,5))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[18]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_jupyter_madrid_accidents/output_37_1.png&quot; alt=&quot;chart&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can observe that &lt;strong&gt;in general, there’re more accidents during Satuday
than Sunday&lt;/strong&gt;. The exception is the earlier hours on Sunday which I guess
corresponds people hanging out and at sunset on Sunday when these people
are coming home and some other people are heading work (e.g: bakers).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;blackspots_streets_with_highest_rate_of_aggregated_accidents&quot;&gt;Blackspots: Streets with highest rate of aggregated accidents&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which are the streets with the highest number of accidents overtime ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*In[19]:*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;bs = accidents.copy()
bs.groupby([&quot;CALLE&quot;, &quot;DISTRITO&quot;]).\
    size().\
    reset_index(name=&apos;COUNT&apos;).\
    sort_values(&quot;COUNT&quot;, ascending=False).\
    head(10).\
    reset_index().\
    drop(&quot;index&quot;, axis=1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Out[19]:*&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;CALLE&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;DISTRITO&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;COUNT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BRAVO MURILLO&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TETUAN&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;145&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ALCALA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SALAMANCA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;123&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ALCALA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CIUDAD LINEAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;123&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SERRANO&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SALAMANCA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;80&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;GRAN VIA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CENTRO&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;72&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ARTURO SORIA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CIUDAD LINEAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;72&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;PASEO. CASTELLANA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CHAMARTIN&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;60&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;FRANCISCO SILVELA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SALAMANCA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;58&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;PASEO. CASTELLANA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TETUAN&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;57&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JOAQUIN COSTA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CHAMARTIN&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;56&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can see a clear winner with the &lt;strong&gt;BRAVO MURILLO&lt;/strong&gt; street, followed by
&lt;strong&gt;ALCALA&lt;/strong&gt;. Alcala makes sense to me because it’s a really long street
spanning different districts, so it’s naturally busy all the time. But I
have to admit that I wouldn’t have said Bravo Murillo, not in a million
years.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next_steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’d like to create a probability table in order to answer the question:
What is the probability of having an accident at a given district at a
given day of the week at a given hour ? That requires some missing
numbers I have to get before going any further.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/img/2020/09/ds_jupyter_madrid_accidents/notebook.ipynb&quot;&gt;Jupyter Notebook source file&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://datos.madrid.es/portal/site/egob/menuitem.c05c1f754a33a9fbe4b2e4b284f1a5a0/?vgnextoid=7c2843010d9c3610VgnVCM2000001f4a900aRCRD&amp;amp;vgnextchannel=374512b9ace9f310VgnVCM100000171f5a0aRCRD&amp;amp;vgnextfmt=default&quot;&gt;Accidents
in Madrid city&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.dgt.es/es/seguridad-vial/estadisticas-e-indicadores/parque-vehiculos/tablas-estadisticas/2019/&quot;&gt;Vehicles
in Spain in 2019 by province&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>DS - Pandas - DataFrame Indexing</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/09/ds_pandas_df_index.html"/>
        <updated>2020-09-03T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/09/ds_pandas_df_index.html</id>
        <category term="ds"/>
        <category term="pandas"/>
        <category term="dataframe"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is part of a series of articles dedicated to study Data Science using Python. This article
aims to review some indexing DataFrame theory going through an example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the_data&quot;&gt;The Data&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have a list of students attending different universities. At the beginning we are indexing all students by the university they enrolled in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;initial data&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

peterj = pd.Series({&quot;name&quot;: &quot;Peter Johnson&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 22})
marcus = pd.Series({&quot;name&quot;: &quot;Marcus Ron&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23})
annagu = pd.Series({&quot;name&quot;: &quot;Anna Guta&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 24})
johnro = pd.Series({&quot;name&quot;: &quot;John Roberts&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23})
valeri = pd.Series({&quot;name&quot;: &quot;Valerie Son&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 22})

people = pd.DataFrame([peterj, marcus, annagu, johnro, valeri], index=[&quot;UAM&quot;, &quot;UAM&quot;, &quot;UCM&quot;, &quot;UCM&quot;, &quot;UAM&quot;])
people&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_index/overview.png&quot; alt=&quot;Overview&quot; height=&quot;250&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That allows us to query the DataFrame easily to answer questions like the names of the students at UAM:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;getting UAM students DataFrame&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;uam_students_df = people.iloc[&quot;UAM&quot;, [&quot;name&quot;]]
uam_students_df&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But what if we&amp;#8217;d liked to know which UAM students are from NYC:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;UAM students from NYC&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;uam_students_df = people.loc[&quot;UAM&quot;]
uam_older_than_22 = uam_students_df[uam_students_df[&quot;city&quot;] == &quot;NYC&quot;]
uam_from_nyc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We got it, but it would be nice to be able to filter by both conditions at once. As far as I&amp;#8217;m aware there&amp;#8217;re at least two ways to do it: &lt;strong&gt;Boolean masking&lt;/strong&gt; and &lt;strong&gt;Multilevel Indexing&lt;/strong&gt;. Both approaches require to dig a little bit more about DataFrame indexes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;boolean_masking&quot;&gt;Boolean Masking&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create a boolean mask involving the university and the city, I need to move the index values to a column and then concatenate the boolean mask with the university and the boolean mask regarding the city:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_index/index_to_column.png&quot; alt=&quot;Overview&quot; height=&quot;450&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;use boolean mask to query DataFrame&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

peterj = pd.Series({&quot;name&quot;: &quot;Peter Johnson&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 22})
marcus = pd.Series({&quot;name&quot;: &quot;Marcus Ron&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23})
annagu = pd.Series({&quot;name&quot;: &quot;Anna Guta&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 24})
johnro = pd.Series({&quot;name&quot;: &quot;John Roberts&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23})
valeri = pd.Series({&quot;name&quot;: &quot;Valerie Son&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 22})

people = pd.DataFrame([peterj, marcus, annagu, johnro, valeri], index=[&quot;UAM&quot;, &quot;UAM&quot;, &quot;UCM&quot;, &quot;UCM&quot;, &quot;UAM&quot;])

# creating a new column
people[&quot;UNI&quot;] = people.index

# removing current index and leaving the default numeric index
people = people.reset_index(drop=True)

# concatenating two boolean masks
uam_from_nyc = people[(people[&quot;UNI&quot;] == &quot;UAM&quot;) &amp;amp; (people[&quot;city&quot;] == &quot;NYC&quot;)]
uam_from_nyc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_index/boolean_mask_result.png&quot; alt=&quot;Overview&quot; height=&quot;180&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;multilevel_indexing&quot;&gt;Multilevel Indexing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach can be seen as the opposite as the boolean masking strategy. Here instead of moving the index to a column, a column will become part of the index so that we can use the &lt;strong&gt;loc&lt;/strong&gt; function to get the information I want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_index/multiindexing.png&quot; alt=&quot;Overview&quot; height=&quot;450&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;use multilevel index to query DataFrame&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

peterj = pd.Series({&quot;name&quot;: &quot;Peter Johnson&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 22})
marcus = pd.Series({&quot;name&quot;: &quot;Marcus Ron&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23})
annagu = pd.Series({&quot;name&quot;: &quot;Anna Guta&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 24})
johnro = pd.Series({&quot;name&quot;: &quot;John Roberts&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23})
valeri = pd.Series({&quot;name&quot;: &quot;Valerie Son&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 22})

people = pd.DataFrame([peterj, marcus, annagu, johnro, valeri], index=[&quot;UAM&quot;, &quot;UAM&quot;, &quot;UCM&quot;, &quot;UCM&quot;, &quot;UAM&quot;])

# creating a multilevel index
people_by_uni_and_city = people.set_index([people.index, &quot;city&quot;])
people_by_uni_and_city.index.names = [&quot;UNI&quot;, &quot;CITY&quot;]
people_by_uni_and_city

# using loc function to get the information just passing index values
uam_from_nyc = people_by_uni_and_city.loc[&quot;UAM&quot;, &quot;NYC&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_df_index/multilevel_result.png&quot; alt=&quot;Overview&quot; height=&quot;180&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org&quot;&gt;Pandas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.reset_index.html&quot;&gt;DataFrame reset_index function&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>DS - Pandas - DataFrame</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/09/ds_pandas_df.html"/>
        <updated>2020-09-02T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/09/ds_pandas_df.html</id>
        <category term="ds"/>
        <category term="pandas"/>
        <category term="dataframe"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is part of a series of articles dedicated to study Data Science using Python. This article
tries to explain the basics of using the DataFrame abstraction from the Pandas library.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what_is_a_dataframe&quot;&gt;What is a DataFrame ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can think of a DataFrame as a 2 dimensional Series object. If you take any row of the next example, you would be getting Series object. The same thing happens if you take a given column values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_dataframe/overview.png&quot; alt=&quot;DataFrame&quot; height=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;creating_a_dataframe&quot;&gt;Creating a DataFrame&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can create a DataFrame out of Series objects where each series represents a &lt;strong&gt;row&lt;/strong&gt; of data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

peterj = pd.Series({&quot;name&quot;: &quot;Peter Johnson&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 22})
marcus = pd.Series({&quot;name&quot;: &quot;Marcus Ron&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23})
annagu = pd.Series({&quot;name&quot;: &quot;Anna Guta&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 24})

people = pd.DataFrame([peterj, marcus, annagu])
people&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or just from a list of dictionaries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

peterj = {&quot;name&quot;: &quot;Peter Johnson&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 22}
marcus = {&quot;name&quot;: &quot;Marcus Ron&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23}
annagu = {&quot;name&quot;: &quot;Anna Guta&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 24}

people = pd.DataFrame([peterj, marcus, annagu])
people&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Either way you would get the following data structure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_dataframe/created.png&quot; alt=&quot;DataFrame&quot; height=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We might want to change the default integer index by providing our own. For instance we are providing the symbol of a given spanish university:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

peterj = {&quot;name&quot;: &quot;Peter Johnson&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 22}
marcus = {&quot;name&quot;: &quot;Marcus Ron&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23}
annagu = {&quot;name&quot;: &quot;Anna Guta&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 24}

people = pd.DataFrame([peterj, marcus, annagu], index=[&quot;UAM&quot;, &quot;UAM&quot;, &quot;UCM&quot;])
people&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That would get us:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_dataframe/created_with_index.png&quot; alt=&quot;DataFrame&quot; height=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;accessing_data_iloc_loc&quot;&gt;Accessing data: iloc, loc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same way we used these functions to access data in a Series object, we can use it in a DataFrame object. For example, if we&amp;#8217;d like to access every person attending a certain university we can use the &lt;strong&gt;loc&lt;/strong&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;loc&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

peterj = {&quot;name&quot;: &quot;Peter Johnson&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 22}
marcus = {&quot;name&quot;: &quot;Marcus Ron&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23}
annagu = {&quot;name&quot;: &quot;Anna Guta&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 24}

people = pd.DataFrame([peterj, marcus, annagu], index=[&quot;UAM&quot;, &quot;UAM&quot;, &quot;UCM&quot;])
people.loc[&quot;UAM&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_dataframe/loc_by_university.png&quot; alt=&quot;university&quot; height=&quot;160&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although in this particular case a new DataFrame is return, however depending on how many rows this call is returning, the type will be a &lt;strong&gt;Series&lt;/strong&gt; object if it&amp;#8217;s just one row, or a &lt;strong&gt;DataFrame&lt;/strong&gt; if multiple rows are return.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can go one step further and not only filter by index but also select a given set of columns:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;loc full syntax&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;people.loc[&quot;UAM&quot;, [&quot;name&quot;, &quot;age&quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basically you have to remember that &lt;strong&gt;loc&lt;/strong&gt; and &lt;strong&gt;iloc&lt;/strong&gt; can be called with two parameters, the first one representing the rows we&amp;#8217;d like to select, and the second one representing which columns we would like to show.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_dataframe/loc_function.png&quot; alt=&quot;DataFrame&quot; height=&quot;250&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;iloc&lt;/strong&gt; works the same but, instead of using an index value, you should use an integer representing the position of both rows and columns. Following the previous example, to get the same result with &lt;strong&gt;iloc&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;iloc full syntax&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;people.iloc[0, [0, 2]]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if you only want to get all values of a certain column. The brackets syntax can be used to select only a given column. For instance, getting all cities in the DataFrame:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;column selection bracket syntax&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;people[&quot;city&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a rule of thumb, stick to bracket syntax to get &lt;strong&gt;ONLY&lt;/strong&gt; column values, and &lt;strong&gt;iloc&lt;/strong&gt; and &lt;strong&gt;loc&lt;/strong&gt; to do a more advanced row selection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_dataframe/query_overview.png&quot; alt=&quot;query overview&quot; height=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dropping_columnsrows&quot;&gt;Dropping columns/rows&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When cleaning messy data, we might want to get rid of unnecessary data. That could mean get rid of some rows or maybe some columns. To get a new DataFrame without rows indexed by index value &quot;UAM&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;drop rows by index value&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

peterj = {&quot;name&quot;: &quot;Peter Johnson&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 22}
marcus = {&quot;name&quot;: &quot;Marcus Ron&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23}
annagu = {&quot;name&quot;: &quot;Anna Guta&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 24}

people = pd.DataFrame([peterj, marcus, annagu], index=[&quot;UAM&quot;, &quot;UAM&quot;, &quot;UCM&quot;])
new_people = people.drop(&quot;UCM&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_dataframe/loc_by_university.png&quot; alt=&quot;university&quot; height=&quot;160&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This returns a new DataFrame instead of changing the source DataFrame in place. For changing the DataFrame in place set the &lt;strong&gt;inplace&lt;/strong&gt; parameter to &lt;strong&gt;True&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;drop rows in place&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;people.drop(&quot;UCM&quot;, inplace=True)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However if you&amp;#8217;d like to drop certain columns you can &lt;strong&gt;change the axis&lt;/strong&gt; you are looking into, where &lt;strong&gt;axis=0&lt;/strong&gt; is for deleting rows and &lt;strong&gt;axis=1&lt;/strong&gt; for deleting columns:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;drop columns&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

peterj = {&quot;name&quot;: &quot;Peter Johnson&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 22}
marcus = {&quot;name&quot;: &quot;Marcus Ron&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23}
annagu = {&quot;name&quot;: &quot;Anna Guta&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 24}

people = pd.DataFrame([peterj, marcus, annagu], index=[&quot;UAM&quot;, &quot;UAM&quot;, &quot;UCM&quot;])
new_people = people.drop(&quot;age&quot;, axis=1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_dataframe/drop_columns.png&quot; alt=&quot;drop columns&quot; height=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;filtering_a_dataframe_boolean_masks&quot;&gt;Filtering a DataFrame: boolean masks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same way we query a database using SQL expressions it would be nice to have a where-like expressions to query a given DataFrame. There is such type of expression, the &lt;strong&gt;Boolean Mask&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;strong&gt;boolean Mask&lt;/strong&gt; is an expression representing a filter that can be applied to a given DataFrame. By itself represents a Series object, but when applied to a DataFrame it returns a new filtered DataFrame.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following example I&amp;#8217;d like to get a DataFrame containing people older than 22 years old. First of all I need to create a &lt;strong&gt;boolean mask&lt;/strong&gt; about the &lt;strong&gt;age&lt;/strong&gt; column.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;creating a boolean mask&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

peterj = {&quot;name&quot;: &quot;Peter Johnson&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 22}
marcus = {&quot;name&quot;: &quot;Marcus Ron&quot;, &quot;city&quot;: &quot;NYC&quot;, &quot;age&quot;: 23}
annagu = {&quot;name&quot;: &quot;Anna Guta&quot;, &quot;city&quot;: &quot;PAR&quot;, &quot;age&quot;: 24}

people = pd.DataFrame([peterj, marcus, annagu], index=[&quot;UAM&quot;, &quot;UAM&quot;, &quot;UCM&quot;])
older_than_22 = people[&quot;age&quot;] &amp;gt; 22
older_than_22&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_dataframe/boolean_mask_creation.png&quot; alt=&quot;boolean mask creation&quot; height=&quot;500&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see the &lt;strong&gt;boolean mask&lt;/strong&gt; itself represents a list of indexes. Therefore I can apply those indexes to filter out our people DataFrame to get only the interesting rows in a new DataFrame instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;applying a boolean mask to a DataFrame&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;people_older_than_22 = people[older_than_22]
people_older_than_22&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/09/ds_pandas_dataframe/boolean_mask_applied.png&quot; alt=&quot;boolean mask creation&quot; height=&quot;450&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/python-data-analysis&quot;&gt;Introduction to Data Science in Python course at Coursera&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/&quot;&gt;Pandas site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html&quot;&gt;Pandas basic data structures explained&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>DS - Pandas - Series</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/09/ds_pandas_series.html"/>
        <updated>2020-09-01T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/09/ds_pandas_series.html</id>
        <category term="ds"/>
        <category term="pandas"/>
        <category term="series"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is part of a series of articles dedicated to study Data Science using Python. This article
tries to explain the basics of using the Series abstraction from the Pandas library.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what_is_a_series_object&quot;&gt;What is a Series object ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following the Pandas documentation, a &lt;strong&gt;Series&lt;/strong&gt; object represents a one-dimensional &lt;strong&gt;dnarray&lt;/strong&gt; with axis labels (including time-series). On the other hand a &lt;strong&gt;ndarray&lt;/strong&gt;, which is an abstraction from the Numpy library, is an array representing a multidimensional, homogeneous array of fixed-sized items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Long story short, the way you can think of if is like if it was a data structure having 2 columns, the first one contains the indexes, and the second one the actual data, the values we will be providing as content to the Series object, for instance:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Index&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;300&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;creating_a_series_object&quot;&gt;Creating a Series object&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So lets say we want to provide a series of population for three cities:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;create a new Series object&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

city_population_2020 = pd.Series([6.7, 21, 8.5])
city_population_2020&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will show:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.7&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;21&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8.5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;series_indexes&quot;&gt;Series indexes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don&amp;#8217;t explicitly provide indexes for the values by default the indexes will be a series of integer values beginning at 0. It&amp;#8217;s important to provide the right indexes because those indexes will enable us to access data later on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can provide custom indexes in three ways. Firstly when creating the Series object, &lt;strong&gt;using the index parameter&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;change at creation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

city_population_2020 = pd.Series([6.7, 21, 8.5], index=[&quot;MAD&quot;, &quot;MEXDF&quot;, &quot;NYC&quot;])
city_population_2020&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now the Series object will look like:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MAD&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.7&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MEXDF&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;21&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NYC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8.5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also change the indexes after creating a Series object, &lt;strong&gt;setting the index property&lt;/strong&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;change after creation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

city_population_2020 = pd.Series([6.7, 21, 8.5])
city_population_2020.index = [&quot;MAD&quot;, &quot;MEXDF&quot;, &quot;NYC&quot;]
city_population_2020&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, you can create a Series object &lt;strong&gt;from a Python dictionary&lt;/strong&gt;, where keys in the dictionary will become the indexes in the Series object:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

city_population_2020 = pd.Series({&quot;MAD&quot;: 6.7, &quot;MEXDF&quot;: 21, &quot;NYC&quot;: 8.5})
city_population_2020&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;accessing_data_iloc_loc&quot;&gt;Accessing data: iloc, loc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an iterable you can iterate over the Series object like any other array in Python:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;iterating over a Series&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;for value in city_population_2020:
    print(&quot;-&amp;gt; {}&quot;.format(value))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;output&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;-&amp;gt; 6.7
-&amp;gt; 21
-&amp;gt; 8.5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But if you&amp;#8217;d like to access in a more surgical way, you can access specific set of values by index. There&amp;#8217;re two functions in the Series objects that can give you a hand with that: &lt;strong&gt;iloc&lt;/strong&gt; and &lt;strong&gt;loc&lt;/strong&gt; functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
invocations to &lt;strong&gt;iloc&lt;/strong&gt; and &lt;strong&gt;loc&lt;/strong&gt; return another Series object.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;iloc&lt;/strong&gt; function gets the data by the order is stored in the Series object. For instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;getting values by index order (iloc)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

city_population_2020 = pd.Series([6.7, 21, 8.5], index=[&quot;MAD&quot;, &quot;MEXDF&quot;, &quot;NYC&quot;])
city_population_2020.iloc[0]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Will get &lt;strong&gt;6.7&lt;/strong&gt; as it is the first value stored in the Series object. But what if wanted to get a value stored under a certain index. Then we could use the &lt;strong&gt;loc&lt;/strong&gt; function. The &lt;strong&gt;loc&lt;/strong&gt; function retrieves a value by the index is stored under. That means it can return None, one value or many values. The following example contains several values stored under the same index:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;getting values by index name (loc)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import pandas as pd

people = pd.Series([&quot;Marcos&quot;, &quot;Ana&quot;, &quot;Jules&quot;], index=[&quot;MAD&quot;, &quot;MAD&quot;, &quot;PAR&quot;])

people.loc[&quot;MAD&quot;] # returns Marcos and Ana in another Series object&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you try to get values by a non existent index, you will get an error.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/python-data-analysis&quot;&gt;Introduction to Data Science in Python course at Coursera&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/&quot;&gt;Pandas site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html&quot;&gt;Pandas basic data structures explained&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Groovy Shots - Collections - Set Theory</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/07/groovy-shots-set-theory.html"/>
        <updated>2020-07-30T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/07/groovy-shots-set-theory.html</id>
        <category term="groovy"/>
        <category term="collections"/>
        <category term="sets"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes I feel like I&amp;#8217;m using certain data structures as if they were all the same.
But it turns out if you dig a little on the theory of each of them you may realize there&amp;#8217;re
data structures that fit better than others for a specific type of problems. In this article
I&amp;#8217;m reviewing some set theory basics with Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;groovy_shell&quot;&gt;Groovy Shell&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To write the examples I&amp;#8217;m using the &lt;a href=&quot;https://groovy-lang.org/groovysh.html&quot;&gt;Groovy shell&lt;/a&gt;. To start the Groovy shell go to your terminal and start the Groovy shell:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;start groovy shell&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[user]$ groovysh -q
groovy:000&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve minimized the verbosity of the Groovy shell in the examples by replacing the &lt;code&gt;groovy:000&amp;gt;&lt;/code&gt; prompt by just &lt;code&gt;&amp;gt;&lt;/code&gt;. Also remember that in the Groovy shell
you may not want to use the &lt;code&gt;def&lt;/code&gt; keyword to define a variable (&lt;a href=&quot;https://groovy-lang.org/groovysh.html#GroovyShell-Variables&quot;&gt;here&lt;/a&gt; you can see why)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what_is_a_set&quot;&gt;What is a set ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A set is a well-defined collection of distinct elements. For example, if we define the following set
in Groovy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;distinct elements&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; A = [1, 1, 2, 2] as Set
&amp;gt; assert A == [1, 2] as Set&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The set only cares about distinct elements, repeated elements will be discarded.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;on_groovy_sets&quot;&gt;On Groovy sets&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Groovy set could be created with the list-like syntax but using coercion to note that it&amp;#8217;s a Set. By default
if you coerce a list to &lt;code&gt;Set&lt;/code&gt; a &lt;code&gt;java.util.LinkedHashSet&lt;/code&gt; will be created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;list-like syntax&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; A = [1, 2, 3, 3] as Set     // ===&amp;gt; LinkedHashSet
&amp;gt; B = [4, 5, 6] as HashSet    // ===&amp;gt; HashSet
&amp;gt; C = [1, 1, 1, 1] as TreeSet // ===&amp;gt; TreeSet&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyway you could also create a set like you do in Java:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; A = new HashSet()
&amp;gt; B = new TreeSet()
&amp;gt; C = new LinkedHashSet()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;union_intersection_difference&quot;&gt;Union, intersection, difference&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first set operation that springs to mind is adding up two sets together. Given a set A and a set B the union of A and B is all elements of A and B.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/07/gs-set-theory/union.png&quot; alt=&quot;Union&quot; height=&quot;250&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can use the &lt;code&gt;+&lt;/code&gt; operator in Groovy to add one set with another set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;union&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; A = [&quot;john&quot;, &quot;peter&quot;] as Set
&amp;gt; B = [&quot;anne&quot;, &quot;robby&quot;, &quot;robby&quot;] as Set // notice I&apos;ve repeated robby deliberately ;)
&amp;gt; unionAB = A + B
&amp;gt; assert unionAB == [&quot;john&quot;, &quot;peter&quot;, &quot;anne&quot;, &quot;robby&quot;] as Set&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we&amp;#8217;d like to know which elements of A are not in B we could calculate the difference between A and B using the &lt;code&gt;-&lt;/code&gt; operator:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/07/gs-set-theory/difference.png&quot; alt=&quot;Difference&quot; height=&quot;250&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;difference&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; A = [&quot;john&quot;, &quot;peter&quot;, &quot;corie&quot;] as Set
&amp;gt; B = [&quot;anne&quot;, &quot;robby&quot;, &quot;peter&quot;] as Set
&amp;gt; diffAB = A - B
&amp;gt; diffBA = B - A
&amp;gt; assert diffAB == [&quot;john&quot;, &quot;corie&quot;] as Set
&amp;gt; assert diffBA == [&quot;anne&quot;, &quot;robby&quot;] as Set&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The difference between two sets is also used to introduce the &lt;strong&gt;relative complement&lt;/strong&gt; of a given set. If A - B is everything
that is in A that is not in B, the relative complement is everything that is not in A that is in B. Or
in plain english, just the opposite. So if the difference between A and B is noted as &lt;code&gt;A - B&lt;/code&gt;
the relative complement of A related to B is noted &lt;code&gt;B \ A&lt;/code&gt;, but effectively is equal to &lt;code&gt;B - A&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/07/gs-set-theory/relative-complement.png&quot; alt=&quot;Complement&quot; height=&quot;250&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;relative complement&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; A = [&quot;john&quot;, &quot;peter&quot;, &quot;corie&quot;] as Set
&amp;gt; B = [&quot;anne&quot;, &quot;robby&quot;, &quot;peter&quot;] as Set
&amp;gt; relCompOfA = B - A // ==&amp;gt; A \ B
&amp;gt; assert relCompOfA == [&quot;anne&quot;, &quot;robby&quot;] as Set&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why is important to know the relative complement ? It helps you to calculate the &lt;strong&gt;symmetric difference&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;symmetric_difference&quot;&gt;Symmetric difference&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At some point you may want to know all elements of A and elements of B without the elements that are common to both sets.
That&amp;#8217;s called the symmetric difference between A and B. Basically all you have to do is to sum the relative complement of both sets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/07/gs-set-theory/simmetric-difference.png&quot; alt=&quot;Simmetric&quot; height=&quot;250&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can create a closure containing the formula of the relative complement and then use it to calculate the simmetric difference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;symetric difference&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; A = [&quot;john&quot;, &quot;peter&quot;, &quot;corie&quot;] as Set
&amp;gt; B = [&quot;anne&quot;, &quot;robby&quot;, &quot;peter&quot;] as Set
&amp;gt; relComplement = { a, b -&amp;gt; b - a }
&amp;gt; symmetricDiff = { a, b -&amp;gt; relComplement(a, b) + relComplement(b, a) } // ===&amp;gt; (B \ A) U (A \ B)
&amp;gt; assert symmetricDiff(A, B) == [&quot;anne&quot;, &quot;robby&quot;, &quot;john&quot;, &quot;corie&quot;] as Set&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;intersection&quot;&gt;Intersection&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another very common problem is to know which elements are shared between sets, or in other words what&amp;#8217;s the &lt;strong&gt;intersection&lt;/strong&gt; between
them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2020/07/gs-set-theory/intersection.png&quot; alt=&quot;Intersection&quot; height=&quot;250&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;intersection&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; A = [1, 2, 3, 4] as Set
&amp;gt; B = [1, 3, 5, 6] as Set
&amp;gt; C = [1, 7] as Set
&amp;gt; assert A.intersect(B) == [1, 3] as Set
&amp;gt; assert B.intersect(C) == [1] as Set&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The intersection also is an &lt;strong&gt;associative&lt;/strong&gt; and &lt;strong&gt;commutative&lt;/strong&gt; operation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;intersection properties&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; assert (A.intersect(B)).intersect(C) == A.intersect(B.intersect(C)) // associative
&amp;gt; assert A.intersect(B).intersect(C)   == C.intersect(B).intersect(A) // commutative&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But maybe you are only interested in knowing if two different sets have nothing in common. Then
you may want to know if they are disjoint sets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;disjoint&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; A = [1, 3, 5] as Set
&amp;gt; B = [2, 4, 6] as Set
&amp;gt; assert A.disjoint(B) == true // A and B have nothing in common&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;versions&quot;&gt;Versions&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Groovy 2.5.13&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/basecs/set-theory-the-method-to-database-madness-5ec4b4f05d79&quot;&gt;Set Theory: the Method To Database Madness&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://groovy-lang.org/documentation.html&quot;&gt;Groovy Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Groovy Shots - Collections - Spread operator</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2020/07/groovy-shots-lists-maps-spread.html"/>
        <updated>2020-07-29T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2020/07/groovy-shots-lists-maps-spread.html</id>
        <category term="groovy"/>
        <category term="collections"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes it looks more natural handling collections and maps using operators rather than to use
the correspondent method call. The spread operator in Groovy is one of those.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;groovy_shell&quot;&gt;Groovy Shell&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To write the examples I&amp;#8217;m using the &lt;a href=&quot;https://groovy-lang.org/groovysh.html&quot;&gt;Groovy shell&lt;/a&gt;. To start the Groovy shell go to your terminal and start the Groovy shell:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;start groovy shell&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[user]$ groovysh -q
groovy:000&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve minimized the verbosity of the Groovy shell in the examples by replacing the &lt;code&gt;groovy:000&amp;gt;&lt;/code&gt; prompt by just &lt;code&gt;&amp;gt;&lt;/code&gt;. Also remember that in the Groovy shell
you may not want to use the &lt;code&gt;def&lt;/code&gt; keyword to define a variable (&lt;a href=&quot;https://groovy-lang.org/groovysh.html#GroovyShell-Variables&quot;&gt;here&lt;/a&gt; you can see why)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course the first case is to create an empty list:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;empty list&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; empty = []
&amp;gt; assert empty.size() == 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice you can initialize the new list with any number of elements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding an element&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; myList = [1]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now I would like to add one more element &lt;strong&gt;to the end&lt;/strong&gt; of the previous list. Here the spread operator is used
to add all elements from &lt;strong&gt;myList&lt;/strong&gt; inside &lt;strong&gt;newList&lt;/strong&gt; before the new element &lt;strong&gt;2&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding new element at the end&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; myList  = [1]
&amp;gt; newList = [*myList, 2]
&amp;gt; assert newList == [1, 2]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or adding a new element &lt;strong&gt;at the beginning&lt;/strong&gt; of the previous list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding new element at the beginning&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; myList  = [1]
&amp;gt; newList = [0, *myList]
&amp;gt; assert newList == [0, 1]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The previous examples were pretty trivial, and could be also be tackled by other operators available to lists:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding elements simpler&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; myList = [1]
&amp;gt; myList = [0] + myList // adding at the beginning
&amp;gt; myList = myList &amp;lt;&amp;lt; 2  // adding at the end
&amp;gt; assert myList == [0, 1, 2]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But when adding in the middle of some lists, the spread operator really shines:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding in the middle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; myList  = [4, 5]
&amp;gt; newList = [1, 2, 3, *myList, 6, 7, 8]
&amp;gt; assert newList == [1, 2, 3, 4, 5, 6, 7, 8]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you can also add two different lists:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding two lists&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; topTen = [*[1, 3, 5, 7, 9], *[2, 4, 6, 8, 10]]
&amp;gt; assert topTen == [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which is the same as adding one list to the other with simply + operators:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding two lists&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; topTen = [1, 3, 5, 7, 9] + [2, 4, 6, 8, 10]
&amp;gt; assert topTen == [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also use array syntax to specify which elements of the list you would like to use.
In the following example I&amp;#8217;m combining two lists using a range as the initial source list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;combining two lists&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; range = (0..10)
&amp;gt; mirror = [*range[1..6], *range[5..1]]
&amp;gt; assert mirror == [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What about removing elements from a given list. Deleting one element is as simple as using the &lt;code&gt;-&lt;/code&gt; operator:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;remove one element&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; myList = [1, 2, 3, 4, 5] - 5
&amp;gt; assert myList = [1, 2, 3, 4]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can delete more than one element by subtracting one list to another:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;remove more than one element&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; myList = [1, 2, 3, 4, 5] - [3, 5]
&amp;gt; assert myList = [1, 2, 4]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;maps&quot;&gt;Maps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In maps spread operator can also be useful, specially when overriding values from a given map. Lets say
we have a configuration map, and some of the entries are common to all scenarios whereas some elements
can be changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;override values&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; common = [y: 200, x: 100, type: &quot;circle&quot;, color: &quot;green&quot;]
&amp;gt;
&amp;gt; pointA = [
&amp;gt;   *: common,
&amp;gt;   x: 200,
&amp;gt; ]
&amp;gt;
&amp;gt; assert pointA == [y: 200, x: 200, type: &quot;circle&quot;, color: &quot;green&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously changing the order will lead to always override my values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;override values&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; common = [y: 200, x: 100, type: &quot;circle&quot;, color: &quot;green&quot;]
&amp;gt;
&amp;gt; pointA = [
&amp;gt;   x: 200,
&amp;gt;   *: common,
&amp;gt; ]
&amp;gt;
&amp;gt; assert pointA == [y: 200, x: 100, type: &quot;circle&quot;, color: &quot;green&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, like we did in the lists examples we can do normal operations such as adding up whole maps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding two maps&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; mapA = [a: 1, b: 2, c: 3]
&amp;gt; mapB = [d: 4]
&amp;gt; mapAB = [*: mapA, *: mapB]
&amp;gt; assert mapAB == [a: 1, b: 2, c: 3, d: 4]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To add only some elements of a map to another map there&amp;#8217;s no operator for the &lt;strong&gt;subMap&lt;/strong&gt; method. For completeness
I&amp;#8217;m adding here an example using the &lt;strong&gt;subMap&lt;/strong&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;subMap&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; mapA = [a: 1, b: 2, c: 3]
&amp;gt; mapB = [d: 4]
&amp;gt; mapAB = [*: mapA.subMap(&quot;a&quot;, &quot;c&quot;), *: mapB]
&amp;gt; assert mapAB == [a: 1, c: 3, d: 4]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly you can remove entries from a map with the &lt;strong&gt;minus&lt;/strong&gt; operator as we did previously in list:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;removing elements from map&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; mapA = [a: 1, b: 2, c: 3, d: 4, e: 5]
&amp;gt; mapB = mapA - [b: 2, c: 3, d: 4]
&amp;gt; assert mapB == [a: 1, e: 5]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again is also important to highlight the &lt;strong&gt;subMap&lt;/strong&gt; method here as the example could be simplified:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;subMap&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&amp;gt; mapA = [a: 1, b: 2, c: 3, d: 4, e: 5]
&amp;gt; mapB = mapA - mapA.subMap(&quot;b&quot;..&quot;d&quot;)
&amp;gt; assert mapB == [a: 1, e: 5]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice how &lt;strong&gt;subMap&lt;/strong&gt; can take a range of map keys as parameter, building a map with a series of map entries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;versions&quot;&gt;Versions&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Groovy 2.5.13&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://groovy-lang.org/operators.html#_spread_list_elements&quot;&gt;Spread list operator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://groovy-lang.org/operators.html#_spread_map_elements&quot;&gt;Spread map operator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://groovy-lang.org/operators.html&quot;&gt;Groovy operators&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://groovy-lang.org/documentation.html&quot;&gt;Groovy Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Configuring resolv.conf in Fedora 30</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2019/10/fedora_set_nameserver.html"/>
        <updated>2019-10-15T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2019/10/fedora_set_nameserver.html</id>
        <category term="devops"/>
        <category term="fedora"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve recently configured a DNS server at home and I&amp;#8217;d like to
resolve all server names through it. For that every time
I try to resolve any domain name I have to make sure the
first DNS hit is mine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resolv_conf&quot;&gt;resolv.conf&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Normally my linux distro (Fedora 30) will look into the
&lt;strong&gt;/etc/resolv.conf&lt;/strong&gt; file and ask the servers put in there
in order from top to bottom:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/resolv.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;# Generated by NetworkManager
search Home
nameserver 8.8.8.8
nameserver 4.4.4.4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the idea is to add a &lt;strong&gt;nameserver&lt;/strong&gt; entry on top of
the rest and that&amp;#8217;s it. I can do that, but the problem
is that this file is generated everytime the system
reboots, so I&amp;#8217;d be happy just until I shutdown the
system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;networkmanager_conf&quot;&gt;NetworkManager.conf&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to make my system stop regenerating the
&lt;strong&gt;/etc/resolv.conf&lt;/strong&gt; file is to tell it so in the
&lt;strong&gt;/etc/NetworkManager/NetworkManager.conf&lt;/strong&gt;. You
only need to add &lt;strong&gt;dns=none&lt;/strong&gt; inside the &lt;strong&gt;[main]&lt;/strong&gt;
section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/NetworkManager/NetworkManager.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[main]
dns=none&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now go back to your &lt;strong&gt;resolv.conf&lt;/strong&gt; file and
add the new DNS entry:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/etc/resolv.conf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;search Home
nameserver 192.168.1.89
nameserver 8.8.8.8
nameserver 4.4.4.4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Remember to add it on top of the rest &lt;strong&gt;nameserver&lt;/strong&gt;
entries
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally the only thing remaining to see the
changes is to restart the network.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;restart_network&quot;&gt;Restart network&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Fedora you can just restart your network service by executing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;restart network service&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;nmcli con reload eth0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where &lt;strong&gt;eth0&lt;/strong&gt; is the name of the network interface you&amp;#8217;re
reloading&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to set DNS resolver in Fedora [&lt;a href=&quot;https://unix.stackexchange.com/questions/90035/how-to-set-dns-resolver-in-fedora-using-network-manager&quot; class=&quot;bare&quot;&gt;https://unix.stackexchange.com/questions/90035/how-to-set-dns-resolver-in-fedora-using-network-manager&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to &lt;a href=&quot;https://serverfault.com/questions/982376/how-do-you-restart-the-network-service-on-fedora-30&quot;&gt;restart the network service on Fedora 30&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Using Yaml in a Python app</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2019/10/python_yaml.html"/>
        <updated>2019-10-14T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2019/10/python_yaml.html</id>
        <category term="yaml"/>
        <category term="python"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;d like to load an Yaml file and get values from it
&lt;strong&gt;without using a plain Python dictionary&lt;/strong&gt; syntax (which
I don&amp;#8217;t like much) but also &lt;strong&gt;without having to map the yaml structure to classes&lt;/strong&gt;
in order to access values in a property invocation style (e.g.: a.b.c)
Finally I&amp;#8217;d like also to &lt;strong&gt;load different config files depending on the environment&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;using_pyyaml_and_addict&quot;&gt;Using PyYaml and addict&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The library chosen to load yaml was &lt;a href=&quot;https://pyyaml.org/&quot;&gt;PyYaml&lt;/a&gt;.
PyYaml works really straight forward, it loads a yaml
file and returns a Python dictionary. The problem
with Python dictionaries is that the syntaxis
required to access a deep node in the tree
structure is a little bit verbose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;deep node access&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;config[&apos;auth&apos;][&apos;fields&apos;][&apos;username&apos;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, I was looking more for something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;deep node access&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;config.auth.fields.username&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to achieve the required property-like syntax
I found &lt;a href=&quot;https://github.com/mewwts/addict&quot;&gt;Addict&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;YamlConfigLoader&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import logging
import os

from addict import Dict
from yaml import load, Loader, YAMLError


log = logging.getLogger(&quot;config&quot;)


class YamlConfigLoader:
    def load(self, path):
        if path and os.path.exists(path):
            with open(path, &apos;r&apos;) as ymlfile:
                try:
                    yaml = load(ymlfile, Loader=Loader) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                    conf = Dict(yaml) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

                    return conf
                except YAMLError as error:
                    log.error(&quot;config/error/yaml: {}&quot;.format(error))
        else:
            log.error(&quot;config/error/not_found: {}&quot;.format(path))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;loads yaml with PyYaml to get a Python dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;converts a Python dictionary to an Addict dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now lets say I have my app config file &lt;code&gt;config.yml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;database:
  dialect: postgres+pg8000
  user: john
  password: supersecret
  host: localhost
  port: 5432

log:
  loggers:
    - name: security
      level: INFO
    - name: api
      level: DEBUG&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can access configuration properties using the property-dot syntax:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def test_simple():
    yaml = YamlConfigLoader().load(&quot;config.yml&quot;)

    assert yaml.database.user     == &quot;john&quot;
    assert yaml.database.password == &quot;supersecret&quot;
    assert yaml.database.dialect  == &quot;postgres+pg8000&quot;
    assert yaml.database.host     == &quot;localhost&quot;
    assert yaml.database.port     == 5432

    assert len(yaml.log.loggers) == 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;environments&quot;&gt;Environments&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It make sense in many projects to load different properties depending
on the environment we&amp;#8217;re deploying the application to. Lets see how
our code looks like when adding environment as a parameter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;YamlConfigLoader&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import logging
import ntpath
import os

from addict import Dict
from yaml import load, Loader, YAMLError


log = logging.getLogger(&quot;config&quot;)


class YamlConfigLoader:
    def load(self, env, path):
        path = self.resolve_name_with_environment(env, path)

        if path and os.path.exists(path):
            with open(path, &apos;r&apos;) as ymlfile:
                try:
                    yaml = load(ymlfile, Loader=Loader) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                    conf = Dict(yaml) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

                    return conf
                except YAMLError as error:
                    log.error(&quot;config/error/yaml: {}&quot;.format(error))
        else:
            log.error(&quot;config/error/not_found: {}&quot;.format(path))

    def resolve_name_with_environment(self, env, path):
        parent, filename = ntpath.split(path)
        name, ext = filename.split(&quot;.&quot;)

        if env:
            return os.path.join(parent,&quot;{}-{}.{}&quot;.format(name, env, ext))
        else:
            return os.path.join(parent, filename)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now our application may use some system environment variable to receive
the name of the environment the app is going to use:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;using test environments&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def test_simple():
    # given: a yaml loader
    loader = YamlConfigLoader()

    # when: loading a pro configuration file (myapp-pro.yml)
    yaml_pro = loader.load(&quot;pro&quot;, &quot;myapp.yml&quot;)

    # then: we should get a value from pro environment
    assert yaml_pro.database.user == &quot;john_from_pro&quot;

    # when: loading a test configuration file (myapp-test.yml)
    yaml_pro = loader.load(&quot;test&quot;, &quot;myapp.yml&quot;)

    # then: we should get a value from test environment
    assert yaml_pro.database.user == &quot;john_from_test&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;using_system_environment_variables&quot;&gt;Using system environment variables&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s more and more common to deploy applications as containers. In this kind
of environments usually some configuration properties are passed as
system environment variables. Can we create our yaml file with
some values taken from system environment variables ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;PyYaml to the rescue!. Here we have the &lt;strong&gt;config-env.yml&lt;/strong&gt; file with
that idea in mind:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;config-env.yml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;database:
  dialect: postgres+pg8000
  user: !env USERNAME
  password: !env PASSWORD
  host: !env HOST:localhost
  port: !env PORT&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to PyYaml we can get the values marked with &lt;strong&gt;!env&lt;/strong&gt; and
process them to get the value from system environment variables.
Moreover, look at the logging configuration, we can also
provide a default value following the syntax:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;key: !env VARIABLE:default_value&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to make it work, we&amp;#8217;re adding a constructor, which is
basically a yaml directive processor responsible for transforming
the values found in a yaml node after a specific directive.
The constructor is applied globally to PyYaml so you can
add the constructor anywhere in your code via the
&lt;strong&gt;add_constructor&lt;/strong&gt; function. And the use the previous
version of &lt;strong&gt;YamlConfigLoader&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;adding constructor&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import logging
import ntpath
import os

from addict import Dict
from yaml import add_constructor, load, Loader, YAMLError


log = logging.getLogger(&quot;config&quot;)


def process_env_directive(loader, node):
    log.info(&quot;procesing !env: {}&quot;.format(node.value))

    node_val = node.value
    splitted = node_val.split(&quot;:&quot;)

    if len(splitted) == 2: &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        key, value = splitted

        return os.environ.get(key) or value &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    else:
        return os.environ.get(node_val) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;


add_constructor(u&apos;!env&apos;, process_env_directive)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;checks whether it has a default value or not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;if there is a default value tries to resolve env variable if not returns default value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;if there is not a default value tries to resolve env variable&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This way we can test the whole thing with the previous &lt;strong&gt;config-env.yml&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;using directives&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def test_simple():
    # given: a yaml loader
    loader = YamlConfigLoader()

    # when: setting a environment variable
    os.environ[&quot;USERNAME&quot;] = &quot;outsider&quot;

    # and: loading a pro configuration file (config-env.yml)
    yaml_pro = loader.load(&quot;env&quot;, &quot;config.yml&quot;)

    # then: we should get a value from environment variable
    assert yaml_pro.database.user == &quot;outsider&quot;

    # and: because we didn&apos;t set the logger variable we get it
    # from the default value
    assert yaml_pro.database.host == &quot;localhost&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When calling to &lt;code&gt;yaml.load(&amp;#8230;&amp;#8203;)&lt;/code&gt; make sure you&amp;#8217;re using the &lt;code&gt;yaml.Loader&lt;/code&gt; loader as  &lt;a href=&quot;https://github.com/yaml/pyyaml/issues/266&quot;&gt;described here&lt;/a&gt;, otherwise directive processing
wont&apos; work
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pyyaml.org/&quot;&gt;PyYaml&lt;/a&gt;: A very widely used library to load yaml.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mewwts/addict&quot;&gt;Addict&lt;/a&gt;: a library that uses a different
approach when dealing with dictionary structures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From StackOverflow: How to &lt;a href=&quot;https://stackoverflow.com/questions/8384737/extract-file-name-from-path-no-matter-what-the-os-path-format&quot;&gt;Extract file name from path, no matter what the os/path format&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to use &lt;a href=&quot;https://github.com/yaml/pyyaml/issues/141&quot;&gt;environment variables in our yaml files&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Pytest and Testcontainers</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2019/10/pytest_fixtures.html"/>
        <updated>2019-10-11T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2019/10/pytest_fixtures.html</id>
        <category term="test"/>
        <category term="python"/>
        <category term="pytest"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve been a Java programmer for a very long time, but nowadays I&amp;#8217;m involved
in a Python project at work. One of the things I was missing from the Java
ecosystem was &lt;a href=&quot;https://www.testcontainers.org/&quot;&gt;TestContainers&lt;/a&gt;. Long story short
Testcontainers is a project enabling your project to run Docker containers
for integration testing purposes. It turns out there&amp;#8217;s a port for
Python and I&amp;#8217;d like to figure out how to use it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the_challenge&quot;&gt;The challenge&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m creating a persistence layer with SQLAlchemy and I&amp;#8217;d like to
use TestContainers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;to &lt;strong&gt;startup&lt;/strong&gt; a PostgreSQL container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to &lt;strong&gt;create the schema&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to &lt;strong&gt;run the tests&lt;/strong&gt; against the database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to &lt;strong&gt;truncate all tables&lt;/strong&gt; before running each test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to &lt;strong&gt;stop the database&lt;/strong&gt; at the end of the test suite (end of pytest session)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The source code of this entry can be found at &lt;a href=&quot;https://github.com/mariogarcia/mariogarcia.github.io/tree/working/sources/2019/10/pytest_testcontainers&quot;&gt;Github&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s my Pipfile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Dependencies&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;[[source]]
name = &quot;pytest_testcontainers&quot;
url = &apos;https://pypi.python.org/simple&apos;
version = &quot;0.1.0&quot;
description = &quot;&quot;

[packages]
sqlalchemy = &quot;&amp;gt;=1.3&quot;
pg8000 = &quot;&amp;gt;=1.13&quot;
psycopg2-binary = &quot;*&quot;

[dev-packages]
pytest = &quot;&amp;gt;=3.0&quot;
pytest-cov = &quot;&amp;gt;=2.7.1&quot;
flake8 = &quot;&amp;gt;=3.7&quot;
testcontainers = &quot;&amp;gt;=2.5&quot;

[requires]
python = &quot;&amp;gt;=3.7&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that althoug I&amp;#8217;ve added bonth &lt;strong&gt;pg8000&lt;/strong&gt; or &lt;strong&gt;psycopg2&lt;/strong&gt;. I&amp;#8217;m
only using the latter in this example. There&amp;#8217;s a note about
why at the end of the blog entry.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;repository&quot;&gt;Repository&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m creating a repository which wraps the calls to the SQLAlchemy session.
In a Python project, or at least what I&amp;#8217;m seeing lately in some Python projects,
the SQLAlchemy session is created statically somewhere from the configuration file
and repositories import that reference and use it. The problem with that
is that TestContainers by default creates a Docker container
with your database with a &lt;strong&gt;random port&lt;/strong&gt; meaning that you won&amp;#8217;t know all
the connection details until the container is running. Bottom line,
the cleanest solution I could think of was dependency injection via class
constructor injection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Although by default TestContainers look for a random port by default
you can specify one port explicitly.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is how the repository may look like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;repository with injected session&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from blog.models import BlogEntry

class BlogEntryRepository:
    def __init__(self, session):
        self.session = session

    def find_by_id(self, id):
        return self.session.query(BlogEntry).filter_by(id=id).first()

    def find_all_by_title_starts_with(self, title_starts_with):
        by_startswith = BlogEntry.title.startswith(title_starts_with)

        return self.session.query(BlogEntry).filter(by_startswith).all()

    def save(self, blog_entry):
        self.session.add(blog_entry)
        self.session.flush()

        return blog_entry&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pytest_fixtures_conftest_py&quot;&gt;Pytest fixtures (conftest.py)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next step is to optimize the creation and disposal of the database. Basically I don&amp;#8217;t
want to create an instance of the database per each test function, that would be such
a waste. Instead I would like to &lt;strong&gt;create an instance of the database spanning the whole
pytest session&lt;/strong&gt; and eventually shutdown the database. Apart from that, once the database
is up and running I need to &lt;strong&gt;create a session and pass it to every test in case they may need it&lt;/strong&gt;
for injecting it to, for instance, a repository. So the idea is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;to start the container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to create the session with the container details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to inject the session in every test so that it can be used to initialize the repository&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to do that I&amp;#8217;m using &lt;a href=&quot;https://docs.pytest.org/en/latest/fixture.html&quot;&gt;Pytest fixtures&lt;/a&gt;
which will help me reusing some parts among my tests (SQLAlchemy session) and run the Docker
container in a more efficient way (One database instance for all my tests). There&amp;#8217;re several
places where you can put your fixtures so that test can be aware of them. I&amp;#8217;m using the
&lt;strong&gt;conftest.py&lt;/strong&gt; file to put all my fixtures there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Although one &lt;code&gt;conftest.py&lt;/code&gt; file at the top of your project modules can be visible
to all your tests, you can also use one &lt;code&gt;conftest.py&lt;/code&gt; file
&lt;a href=&quot;https://docs.pytest.org/en/latest/writing_plugins.html#conftest-py-plugins&quot;&gt;per directory&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are the required imports to create my database session fixture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;imports&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import logging

import pytest

from sqlalchemy import create_engine
from sqlalchemy.orm import (scoped_session, sessionmaker)

from testcontainers.postgres import PostgresContainer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;session_fixtures&quot;&gt;Session fixtures&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Session fixtures are shared among all tests during a Pytest execution. So it makes sense to
create a fixture starting up the Docker container, and shutting it down once the session
ends.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;fixtures for pytest session and per function&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;log = logging.getLogger()


@pytest.fixture(scope=&quot;session&quot;)
def session(request):
    log.info(&quot;[fixture] starting db container&quot;)

    postgres = PostgresContainer(&quot;postgres:9.5&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    postgres.start()

    log.info(&quot;[fixture] connecting to: {}&quot;.format(postgres.get_connection_url()))

    # create session with db container information
    engine = create_engine(postgres.get_connection_url()) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    session = scoped_session(sessionmaker(autocommit=False,autoflush=False,bind=engine))

    # create schema in database
    Base.metadata.create_all(engine) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

    def stop_db(): &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
        log.info(&quot;[fixture] stopping db container&quot;)
        postgres.stop()

    request.addfinalizer(stop_db) &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

    return session &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Create and start the PostgreSQL container (9.5)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Create database session from container&amp;#8217;s detail&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Recreate database schema&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Create a session finalizer to stop the container once the session ends&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the finalizer to pytest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Returns the database session. That will inject the database session in whatever function demanding it&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
An alternative option for executing teardown code is to make use of the addfinalizer method of the
request-context object to register finalization functions. That&amp;#8217;s why we declare the &lt;code&gt;request&lt;/code&gt; parameter
in our fixtures, to be able to get the request-context object.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dependency injection also works with session fixtures theirselves. If you would like
to provide a pytest fixture that requires a previous configured pytest session fixture
you only have to declare the dependency as a fixture parameter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;injecting fixtures as parameters in another fixture&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;@pytest.fixture(scope=&quot;session&quot;)
def factories(request, session):
    return Factories(session)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here to create some factories to create domain objects in my tests I
need the configured database session. Declaring the dependency as
a parameter will execute first the dependency and then pytest will
inject it in this fixture.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;function_fixtures&quot;&gt;Function fixtures&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Something I&amp;#8217;d like to happen before I&amp;#8217;m running a new test is to make sure all data from
other tests has been erased prior to run the current test. Therefore it seems like I good
idea to create a function fixture that truncates all tables before each new test execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;fixtures for pytest session and per function&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;@pytest.fixture(scope=&quot;function&quot;,autouse=True)
def cleanup(request, session): &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    log.info(&quot;[fixture] truncating all tables&quot;)

    # truncating all tables
    for table in reversed(Base.metadata.sorted_tables): &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        session.execute(table.delete())

    def function_ends(): &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        log.info(&quot;[fixture] closing db session&quot;)
        session.commit()
        session.close()

    request.addfinalizer(function_ends) &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;injecting database session from previous pytest session fixture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;truncating all tables from schema&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;create a finalizer function to commit and close session after each test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;add the finalizer function to pytest lifecycle to happen at the end of each test&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tests&quot;&gt;Tests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that the database is running and the database session is created thanks
to the pytest fixtures we just created, we can use them in our tests, just
declaring them as test parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests using db session and factories&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from blog.repositories import BlogEntryRepository


def test_find_by_id(session, factories):
    # given: a new blog entry
    saved_entry = factories.create_blog_entry()

    # and: a blog entry repository
    repository = BlogEntryRepository(session)

    # when: trying to find it by its id
    blog_entry = repository.find_by_id(saved_entry.id)

    # then: I should be able to get it back
    assert str(blog_entry.id) == str(saved_entry.id)


def test_find_all_by_startswith(session, factories):
    # given: a new blog entry
    for i in range(2):
        factories.create_blog_entry(
            title=&quot;Pytest introduction {}&quot;.format(i)
        )

    # and: saving all those entries
    repository = BlogEntryRepository(session)

    # when: looking for entries starting with Pytest
    results = repository.find_all_by_title_starts_with(&quot;Pytest&quot;)

    # then: there should be
    assert len(results) == 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, maybe to be coherent with the rest of the application, I could create
a test configuration file, and fullfil the container startup configuration
with configuration values there. Most of the connection parameters are
available programatically when bootstraping a PostgreSQL container.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In TestContainers 2.5 the PostgreSQL connection dialect is
hardcoded to &lt;code&gt;psycopg2+postgres&lt;/code&gt; if you&amp;#8217;d like to change it to, for example,
&lt;strong&gt;pg8000&lt;/strong&gt; you&amp;#8217;ll have to inherit from &lt;code&gt;PostgresContainer&lt;/code&gt; and
overwrite the &lt;code&gt;get_connection_url&lt;/code&gt; function.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.pytest.org/en/latest/fixture.html&quot;&gt;Pytest fixtures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://testcontainers-python.readthedocs.io/en/latest/&quot;&gt;TestContainers for Python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Packer and Vault</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2019/09/packer_and_vault.html"/>
        <updated>2019-09-15T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2019/09/packer_and_vault.html</id>
        <category term="devops"/>
        <category term="hashicorp"/>
        <category term="packer"/>
        <category term="vault"/>
        <content type="html">
            &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;packer_and_vault&quot;&gt;Packer and Vault&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.packer.io&quot;&gt;Packer&lt;/a&gt; is an open source tool for creating identical machine images for multiple
platforms from a single source configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.vaultproject.io&quot;&gt;Vault&lt;/a&gt; Secure, store and tightly control access
to tokens, passwords, certificates, encryption keys for protecting secrets and other sensitive
data using a UI, CLI, or HTTP API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I wrote a little intro about Packer at &lt;a href=&quot;/blog/2019/09/packer_intro.html&quot;&gt;previous post&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When building Packer images you have to handle secrets such as the root user/password of your new image, and
you don&amp;#8217;t want to keep that kind of sensible data neither hardcoded in a versioned template, nor unversioned
in your local machine. Vault could be a great partner for keeping and managing that kind of things under
control. I&amp;#8217;m showing an example about creating some secrets inside Vault and reference them in a Packer
template so that Packer can ask Vault for those secrets when building a new image.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;startup_vault&quot;&gt;Startup Vault&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all start up a new Vault instance. I&amp;#8217;m starting Vault in development mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;startup vault (dev)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost$] vault server -dev
...
WARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory
and starts unsealed with a single unseal key. The root token is already
authenticated to the CLI, so you can immediately begin using Vault.

You may need to set the following environment variable:

    $ export VAULT_ADDR=&apos;http://127.0.0.1:8200&apos;

The unseal key and root token are displayed below in case you want to
seal/unseal the Vault or re-authenticate.

Unseal Key: wYZVb0bkahGPeVdyjGWBs/UPZ4qoSLFXhubpsl7fiEM=
Root Token: s.3vMd4W3jEpGtbp5no1IpUt3d

Development mode should NOT be used in production installations!
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Not use this development mode in production
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open another shell and export &lt;strong&gt;VAULT_ADDR&lt;/strong&gt; and &lt;strong&gt;VAULT_DEV_ROOT_TOKEN_ID&lt;/strong&gt; (Root Token).
That&amp;#8217;ll enable Packer to access Vault values in this shell:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost$] export VAULT_ADDR=&apos;http://127.0.0.1:8200&apos;
[mario@localhost$] export VAULT_DEV_ROOT_TOKEN_ID=&apos;s.3vMd4W3jEpGtbp5no1IpUt3d&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create_a_packer_secret_store&quot;&gt;Create a Packer secret store&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next step is to create a secrets store of type &lt;strong&gt;kv&lt;/strong&gt; in the path &lt;strong&gt;packer&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;enable secret store&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost$] vault secrets enable -path=packer kv&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not I can store the &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt; I&amp;#8217;m going to use in my
Debian VM later on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;enter secrets in new path&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost$] vault write packer/debian username=admindebian password=supersecret&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets make sure both value are in there&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;checking values&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost$] vault get kv packer/debian&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reference_your_secrets_in_templates&quot;&gt;Reference your secrets in templates&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we&amp;#8217;ve entered our secrets in Vault, we can reference those
values in our Packer templaes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;use vault values in templates&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;variables&quot;: {
        &quot;username&quot;: &quot;{{ vault `packer/debian` `username` }}&quot;,
        &quot;password&quot;: &quot;{{ vault `packer/debian` `password`}}&quot;
    },
    &quot;builders&quot;:
    [
        {
            &quot;type&quot;: &quot;qemu&quot;,
            &quot;vm_name&quot;: &quot;debian-10-{{build_type}}&quot;,

            &quot;iso_url&quot;: &quot;https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-10.1.0-amd64-netinst.iso&quot;,
            &quot;iso_checksum&quot;: &quot;7915fdb77a0c2623b4481fc5f0a8052330defe1cde1e0834ff233818dc6f301e&quot;,
            &quot;iso_checksum_type&quot;: &quot;sha256&quot;,

            &quot;memory&quot;: &quot;2048&quot;,
            &quot;disk_size&quot;: &quot;5000&quot;,
            &quot;cpus&quot;: 2,

            &quot;ssh_username&quot;: &quot;{{ user `username` }}&quot;,
            &quot;ssh_password&quot;: &quot;{{ user `password` }}&quot;,
            &quot;shutdown_command&quot;: &quot;echo &apos;{{ user `password` }}&apos; | sudo -S shutdown -h now&quot;,
            &quot;ssh_timeout&quot;: &quot;10m&quot;,

            &quot;http_directory&quot;: &quot;http&quot;,
            &quot;boot_command&quot;: [
                &quot;&amp;lt;esc&amp;gt;&amp;lt;wait&amp;gt;&amp;lt;wait&amp;gt;&quot;,
                &quot;install &quot;,
                &quot;auto=true &quot;,
                &quot;priority=critical &quot;,
                &quot;interface=auto &quot;,

                &quot;url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/debian-10-vault.cfg &quot;,

                &quot;passwd/user-fullname=Debian Admin &quot;,
                &quot;passwd/username={{ user `username` }} &quot;,
                &quot;passwd/user-password={{ user `password` }} &quot;,
                &quot;passwd/user-password-again={{ user `password` }} &quot;,

                &quot;&amp;lt;enter&amp;gt;&quot;
            ]
        }
    ],
    &quot;provisioners&quot;: [
        {
            &quot;type&quot;: &quot;shell&quot;,
            &quot;scripts&quot;: [
                &quot;scripts/update.sh&quot;
            ]
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can only reference vault values as default values &lt;strong&gt;in variables block&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have to use the &lt;strong&gt;vault function&lt;/strong&gt; with the secret store name and the name of the value stored&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;vault values as default variable values&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;variables&quot;: {
    &quot;username&quot;: &quot;{{ vault `packer/debian` `username` }}&quot;,
    &quot;password&quot;: &quot;{{ vault `packer/debian` `password`}}&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can then use the &lt;strong&gt;user function&lt;/strong&gt; in the rest of the template&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;user function&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;...
&quot;ssh_username&quot;: &quot;{{ user `username` }}&quot;
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;profit&quot;&gt;Profit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now if you execute a Packer build, build will ask Vault to give it the secrets referenced
in its templates, so that you don&amp;#8217;t have to be worried about storing or managing that kind
of information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vault &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;web site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vault &lt;a href=&quot;https://learn.hashicorp.com/vault&quot;&gt;getting started tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packer &lt;a href=&quot;https://www.packer.io&quot;&gt;web site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packer &lt;a href=&quot;https://www.packer.io/docs/templates/user-variables.html&quot;&gt;variables&lt;/a&gt;. Among other things it explains how to use Vault secrets in Packer templates&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Packer by Hashicorp</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2019/09/packer_intro.html"/>
        <updated>2019-09-12T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2019/09/packer_intro.html</id>
        <category term="devops"/>
        <category term="hashicorp"/>
        <category term="packer"/>
        <category term="fedora"/>
        <content type="html">
            &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;about_packer&quot;&gt;About Packer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Packer is an open source tool for creating identical machine images for multiple
platforms from a single source configuration. One of the worst things I
have to do when creating a new VM is to go through the installation process
as I were doing it in a physical machine. Imagine if you had to do it
for different platforms (Vagrant, Xen, KVM)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
About how to install Packer, you can go directly to the
&lt;a href=&quot;https://www.packer.io/intro/getting-started/install.html&quot;&gt;Packer installation&lt;/a&gt; page. TLDR if
your are a Linux user you can download the binary directly and make it available in your shell PATH.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;packer_builders&quot;&gt;Packer builders&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A builder in Packer describes how the image is going to be built for a
specific platform (AWS EC2, KVM, Docker&amp;#8230;&amp;#8203;). In a Packer configuration
file you can add as many builders as type of images you want to build.
For instance, in this post I&amp;#8217;m only using the Qemu builder because
my target environment is KVM.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuration_file&quot;&gt;Configuration file&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Packer configuration file is just a JSON file with some group of properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;variables&lt;/strong&gt;: variable declaration. You can declare variables and default values and reference
those variables along the rest of the configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;builders&lt;/strong&gt;: As I mentioned in the beggining a builder represents the way in which the image machine
is going to be built in a given environment (qemu in here)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;provisioners&lt;/strong&gt;: Provisioners can be used to configure or install new software in the image after booting (e.g Ansible as provisioner).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;post-processors&lt;/strong&gt;: Post processors run after the image is built and provisioners have finished (e.g uploading the image to a remote registry).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My hello world example is to build a Debian 10 VM for Qemu environment. The structure of the project is:
example is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;structure&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;+--http
|   +
|   |
|   +---debian-10.cfg
|
+--debian-10.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;debian-10.json&lt;/strong&gt;: Packer configuration file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;debian-10.cfg&lt;/strong&gt;: Debian 10 preseed file&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Packer entry file is &lt;strong&gt;debian-10.json&lt;/strong&gt;, is where the builders, provisioners, post-processors and variables
are set:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;.debian-10.json&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;builders&quot;:
    [
        {
            &quot;type&quot;: &quot;qemu&quot;,
            &quot;vm_name&quot;: &quot;debian-10-{{build_type}}&quot;,
            &quot;headless&quot;: true,

            &quot;iso_url&quot;: &quot;https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-10.1.0-amd64-netinst.iso&quot;,
            &quot;iso_checksum&quot;: &quot;7915fdb77a0c2623b4481fc5f0a8052330defe1cde1e0834ff233818dc6f301e&quot;,
            &quot;iso_checksum_type&quot;: &quot;sha256&quot;,

            &quot;memory&quot;: &quot;2048&quot;,
            &quot;disk_size&quot;: &quot;5000&quot;,
            &quot;cpus&quot;: 2,

            &quot;ssh_username&quot;: &quot;admindebian&quot;,
            &quot;ssh_password&quot;: &quot;Pa55w0rd&quot;,
            &quot;shutdown_command&quot;: &quot;echo &apos;Pa55w0rd&apos;|sudo -S shutdown -h now&quot;,
            &quot;ssh_timeout&quot;: &quot;10m&quot;,

            &quot;http_directory&quot;: &quot;http&quot;,
            &quot;boot_command&quot;: [
                &quot;&amp;lt;esc&amp;gt;&amp;lt;wait&amp;gt;&amp;lt;wait&amp;gt;&quot;,
                &quot;install &quot;,
                &quot;auto=true &quot;,
                &quot;priority=critical &quot;,
                &quot;interface=auto &quot;,
                &quot;url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/debian-10.cfg &quot;,
                &quot;&amp;lt;enter&amp;gt;&quot;
            ]
        }
    ],
    &quot;provisioners&quot;: [
        {
            &quot;type&quot;: &quot;shell&quot;,
            &quot;scripts&quot;: [
                &quot;scripts/update.sh&quot;
            ]
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Packer file configures just one builder, which builds a Qemu compatible Debian 10 qcow2 image with
the following properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;builder basic properties&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;type&quot;: &quot;qemu&quot;,
&quot;vm_name&quot;: &quot;debian-10&quot;,
&quot;headless&quot;: true,&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The builder is of type &lt;strong&gt;qemu&lt;/strong&gt;, the resulting virtual machine will be named &lt;strong&gt;debian-10&lt;/strong&gt; and
the installation is automated so I don&amp;#8217;t need to see it working (&lt;strong&gt;headless&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;base image retrieval&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;iso_url&quot;: &quot;https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-10.1.0-amd64-netinst.iso&quot;,
&quot;iso_checksum&quot;: &quot;7915fdb77a0c2623b4481fc5f0a8052330defe1cde1e0834ff233818dc6f301e&quot;,
&quot;iso_checksum_type&quot;: &quot;sha256&quot;,&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m taking an official image from the Debian site (&lt;strong&gt;iso_url&lt;/strong&gt;), and to make sure the image hasn&amp;#8217;t been tampered
I&amp;#8217;m going to check its signature (&lt;strong&gt;iso_checksum&lt;/strong&gt;) with the right algorithm (&lt;strong&gt;iso_checksum_type&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;phisical features&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;memory&quot;: &quot;2048&quot;,
&quot;disk_size&quot;: &quot;5000&quot;,
&quot;cpus&quot;: 2,&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When building the image, it will have 2GB of &lt;strong&gt;memory&lt;/strong&gt; a &lt;strong&gt;disk_size&lt;/strong&gt; of 5G and 2 &lt;strong&gt;cpus&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ssh information&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;ssh_username&quot;: &quot;admindebian&quot;,
&quot;ssh_password&quot;: &quot;Pa55w0rd&quot;,
&quot;shutdown_command&quot;: &quot;echo &apos;Pa55w0rd&apos;|sudo -S shutdown -h now&quot;,
&quot;ssh_timeout&quot;: &quot;12m&quot;,&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ssh information is required to help Packer to communicate with the image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
It&amp;#8217;s always a good idea to add a &lt;strong&gt;ssh_timeout&lt;/strong&gt;, a connection loss or
a timeout due to rebooting can happen at any time.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;preseed_files&quot;&gt;Preseed files&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because we want to automate the whole installation step-by-step process, we would like to
pass like a guide to the installer in order to tell it what to do. That&amp;#8217;s what the preseed
files are for. In order to make the installer aware of the preseed file we need:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To tell Packer the directory where the preseed file is by setting the &lt;strong&gt;http&lt;/strong&gt; property&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To pass the &lt;strong&gt;url&lt;/strong&gt; property to the boot command with the whole url where the preseed file is going to be available&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;debian-10.json&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    ...
    &quot;http_directory&quot;: &quot;http&quot;,
    &quot;boot_command&quot;: [
        ...
        &quot;url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/debian-10.cfg &quot;,
        &quot;&amp;lt;enter&amp;gt;&quot;
    ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a preseed file you would find instructions for every step: networking, root account, setting the
system locale, timezone&amp;#8230;&amp;#8203; For example, here&amp;#8217;s a sample of the preseed file for my Debian 10 image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;debian-10.cfg&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;### Networking
d-i netcfg/choose_interface select auto
d-i netcfg/wireless_wep string
d-i netcfg/get_hostname string unassigned-hostname
d-i netcfg/get_domain string unassigned-domain
d-i mirror/protocol string http
d-i mirror/country string manual
d-i mirror/http/hostname string httpredir.debian.org
d-i mirror/http/directory string /debian
d-i mirror/http/proxy string

### Users
d-i passwd/root-login boolean false
d-i passwd/user-fullname string Debian Admin
d-i passwd/username string admindebian
d-i passwd/user-password password Pa55w0rd
d-i passwd/user-password-again password Pa55w0rd&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Every OS may need a different type of preseed file. Checkout some examples in this
 &lt;a href=&quot;https://github.com/kaorimatz/packer-templates&quot;&gt;Github repository&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;packer_provisioners&quot;&gt;Packer provisioners&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, once we&amp;#8217;ve built the image, we may want to install some packages, or configure some
services&amp;#8230;&amp;#8203;etc,  that is to say to provision the image. You can reference several ways
and tools to provision the image: Ansible, Puppet, shell script&amp;#8230;&amp;#8203; For this example I&amp;#8217;m
using a simple shell script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;provisioners example&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;provisioners&quot;: [
    {
        &quot;type&quot;: &quot;shell&quot;,
        &quot;scripts&quot;: [
            &quot;scripts/update.sh&quot;
        ]
    }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you may notice, the &lt;strong&gt;provisioners&lt;/strong&gt; property is a list with possible provisioners. I&amp;#8217;m
just using the type &lt;strong&gt;shell&lt;/strong&gt; pointing to a list with just one shell script. This script
will be loaded to the built image and executed there (by default is copied to /tmp). The
&lt;strong&gt;update.sh&lt;/strong&gt; script is just updating apt indexes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/usr/bin/env bash

echo &quot;==&amp;gt; Provisioning image&quot;
echo &quot;==&amp;gt; Updating indexes [started]&quot;

sudo apt-get -y update

echo &quot;==&amp;gt; Updating indexes [finished]&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Packer &lt;a href=&quot;https://www.packer.io/intro/&quot;&gt;website&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github repository with a good set of &lt;a href=&quot;https://github.com/kaorimatz/packer-templates&quot;&gt;Packer templates&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Terraform + KVM</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2019/09/terraform_kvm.html"/>
        <updated>2019-09-11T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2019/09/terraform_kvm.html</id>
        <category term="devops"/>
        <category term="terraform"/>
        <category term="kvm"/>
        <content type="html">
            &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;terraformkvmlibvirt&quot;&gt;Terraform/KVM/libvirt&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; is a tool for provisioning,
and managing infrastructure. It describes a given infrastructure
as code, maintains the state of the infrastructure described so
that an administrator can manage it, adding, removing or updating
resources. One of the things I like the most about Hashicorp is that all its
products are one executable binary in Linux. That makes incredibly
easy to start using them. In this case I just had to download the &lt;code&gt;tar.gz&lt;/code&gt; file containing
the executable, put the executable in my shell PATH, and checking
that it works just executing in my shell:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost]$ terraform --version&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linux-kvm.org/page/Main_Page&quot;&gt;KVM&lt;/a&gt; or Kernel Virtual Machine is a virtualization environment consisting on a Linux
Kernel module capable of providing a virtualization infrastructure. You have to check how to install KVM in your Linux distribution,
in Fedora 30 is as easy as executing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost]$ sudo dnf install @virtualization&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@virtualization&lt;/code&gt; alias is just an aggregation of the required
packages to start using KVM in your local machine. You can check
which packages are included by executing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost]$ dnf group info virtualization&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://libvirt.org/&quot;&gt;Libvirt&lt;/a&gt; is a virtualization API, meaning an
API able to interact with different virtualization environments such
as KVM, Xen&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;terraform_libvirt_provider&quot;&gt;Terraform libvirt provider&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the time Terraform is well known for using it in cloud environments such as AWS, Azure,
Alibaba&amp;#8230;&amp;#8203; but the truth is that it has integrations with more than 90 types of environments thanks
to Terraform&amp;#8217;s &lt;a href=&quot;https://www.terraform.io/docs/providers/index.html&quot;&gt;providers&lt;/a&gt;. Unfortunately
among those official providers there&amp;#8217;s none for KVM. But don&amp;#8217;t worry there&amp;#8217;s an amazing project
providing us with the provider we need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dmacvicar/terraform-provider-libvirt&quot;&gt;Terraform libvirt provider&lt;/a&gt; as its Github repository says is: &quot;Terraform provider to provision infrastructure with Linux&amp;#8217;s KVM using libvirt&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Nowadays because Terraform libvirt provider is not an official provider it&amp;#8217;s to be installed manually in your system. The last
release &lt;a href=&quot;https://github.com/dmacvicar/terraform-provider-libvirt/releases&quot;&gt;has binaries&lt;/a&gt; for some Linux distributions. Anyway you can always
&lt;a href=&quot;https://github.com/dmacvicar/terraform-provider-libvirt#building-from-source&quot;&gt;build it from source&lt;/a&gt; and then
&lt;a href=&quot;https://github.com/dmacvicar/terraform-provider-libvirt#installing&quot;&gt;install the resulting binary&lt;/a&gt; which happens to be what I did.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hello_kvm&quot;&gt;Hello KVM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first Terraform file just creates a Debian 10 VM in
my local KVM. The image is a &lt;code&gt;qcow2&lt;/code&gt; image file created with
&lt;a href=&quot;https://www.packer.io/intro/&quot;&gt;Packer&lt;/a&gt; another Hashicorp tool
for creating images (not only VMs but also Docker images as well). A simple Terraform template contains &lt;strong&gt;providers&lt;/strong&gt; and &lt;strong&gt;resources&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;provider&lt;/strong&gt; is an abstraction over the final environment, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;resource&lt;/strong&gt; is a part of the infrastructure we want to create.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;sample structure&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;provider &quot;libvirt&quot; { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    ...
}

resource &quot;libvirt_volume&quot; &quot;os_image&quot; { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    ...
}

resource &quot;libvirt_domain&quot; &quot;new_vm&quot; { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The provider for dealing with libvirt compatible environments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A resource representing a volume in a VM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A resource representing the VM we want to create&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets see a real example creating a Debian 10 VM in my local KVM
environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;hello_world.tf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;provider &quot;libvirt&quot; { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  uri = &quot;qemu:///system&quot;
}

resource &quot;libvirt_volume&quot; &quot;os_image&quot; { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  name   = &quot;os_image&quot;
  pool   = &quot;default&quot;
  source = &quot;/home/mario/Development/devops/hashicorp-tools/packer/out/packer-buster&quot;
}

resource &quot;libvirt_domain&quot; &quot;new_vm&quot; { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  name   = &quot;postgres&quot;
  memory = &quot;1024&quot;
  vcpu   = &quot;2&quot;

  disk {
    volume_id = &quot;${libvirt_volume.os_image.id}&quot;
  }

  network_interface {
    hostname = &quot;postgresvm&quot;
  }

  graphics {
    listen_type = &quot;address&quot;
  }

  console {
    type        = &quot;pty&quot;
    target_port = &quot;0&quot;
    target_type = &quot;virtio&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Declaring the provider&lt;/strong&gt;: There provider knows about the underlying infrastructure. In this case, because we&amp;#8217;re creating
VMs in an libvirt compatible environment, we&amp;#8217;re using the libvirt
provider. This time is pointing to my local environment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Declaring which image to use&lt;/strong&gt;: The base of the VM created in the infrastructure is going to be a Debian 10. The image can be
created in several ways. I&amp;#8217;ve created mine using Hashicorp&amp;#8217;s Packer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Describing how everything stick together&lt;/strong&gt;: Once I&amp;#8217;ve
described the different resources that I&amp;#8217;m going to use, I should
create a domain resource.  The domain glues all the previous resources.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before doing anything we need &lt;strong&gt;to init the project&lt;/strong&gt;. This
is required because Terraform checks whether it has the providers
required to accomplish the plan:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost]$ terraform init

Initializing the backend...

Initializing provider plugins...

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running &quot;terraform plan&quot; to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, altough is not mandatory, but in order to keep all templates with the
same format I like to pass the formatter. This will format all
Terraform files found in the current directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost]$ terraform fmt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before executing the terraform plan, I can validate the template:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost]$ terraform validate&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally we can execute our plan:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost]$ terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # libvirt_domain.new_vm will be created
  + resource &quot;libvirt_domain&quot; &quot;new_vm&quot; {
      + arch        = (known after apply)
      + emulator    = (known after apply)
      + fw_cfg_name = &quot;opt/com.coreos/config&quot;
...
Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only &apos;yes&apos; will be accepted to approve.

  Enter a value:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;apply&lt;/strong&gt; command shows you the resources it&amp;#8217;s going to
apply and requires from you to confirm before going any
further. Only if you write &lt;strong&gt;yes&lt;/strong&gt; will continue. You can then
check that the VM is up and running. I&amp;#8217;d normally open the
Virtual Machine Manager desktop app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock external&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/2019/09/terraform_kvm/hello_kvm_running.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;/img/2019/09/terraform_kvm/hello_kvm_running.png&quot; alt=&quot;hello kvm running&quot; width=&quot;550&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point Terraform updates the state of your infrastructure so
that if wanted to destroy everything it knows what to do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost]$ terraform destroy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After confirming again that you want to destroy your infrastructure
Terraform will take over and destroy it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;variables&quot;&gt;Variables&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At some point we may like to reuse our templates. A first step
could be setting some variables in the template and passing their
values when executing the plan. We can change our initial template
and declare some variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;hello_world.tf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;variable &quot;kvm_destination_uri&quot; {
  type        = string
  description = &quot;kvm instance uri where the vm is going to be deployed&quot;
}

variable &quot;hostname&quot; {
  type        = string
  description = &quot;hostname of the vm&quot;
}

variable &quot;memory&quot; {
  type        = string
  description = &quot;amount of memory&quot;
}

variable &quot;image_path&quot; {
  type        = string
  description = &quot;where is located the qcow2 image&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we have declared the variables we can substitue the literals
by the variables. You only have to add the prefix &lt;code&gt;var.&lt;/code&gt; and the
name of the variable in the part of the template you want to use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;hello_world.tf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;provider &quot;libvirt&quot; {
  uri = var.kvm_destination_uri
}

resource &quot;libvirt_volume&quot; &quot;os_image&quot; {
  name   = &quot;os_image&quot;
  pool   = &quot;default&quot;
  source = var.image_path
}

resource &quot;libvirt_domain&quot; &quot;new_vm&quot; {
  name   = var.hostname
  memory = var.memory
  vcpu   = &quot;2&quot;

  disk {
    volume_id = &quot;${libvirt_volume.os_image.id}&quot;
  }

  network_interface {
    hostname = var.hostname
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally you can execute your plan and pass the variables along
with the command. Here for example we would like to create a VM in a remote KVM host.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;passing variables values to terraform apply&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mario@localhost]$ terraform apply \
    -var=&quot;kvm_destination_uri=qemu+ssh:root@my.cloud.example.com/system&quot; \
    -var=&quot;hostname=firewall&quot; \
    -var=&quot;memory=1024&quot; \
    -var=&quot;image_path=/tmp/myimage.qcow2&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or writing those key=value in a variables file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;hello_world.tfvars&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;kvm_destination_uri=&quot;qemu+ssh:root@my.cloud.example.com/system&quot;
hostname=&quot;firewall&quot;
memory=&quot;1024&quot;
image_path=&quot;/tmp/myimage.qcow2&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And pass the file name to the Terraform apply command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;passing variables filename to terraform apply&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;terraform apply -var-file=hello_world.tfvars&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you don&amp;#8217;t pass the variables to the command line nor
passing a variables file, still Terraform could prompt you to give
it the values for the required variables.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;modules&quot;&gt;Modules&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One step further when reusing our templates is to create modules. A module represents a set of resources and variables that are meant to be used together. The basic structure of a module directory is to have three files: -&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;main.tf&lt;/code&gt;: where the resources are declared&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;variables.tf&lt;/code&gt;: where the variables are declared&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;outputs.tf&lt;/code&gt;: where the output variables are declared&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please notice that &lt;code&gt;variables.tf&lt;/code&gt; is where the definition of the
variables are declared, not the values, that, again could be
in a different file &lt;code&gt;.tfvars&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m creating the following folder structure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ditaa&quot; data-lang=&quot;ditaa&quot;&gt;+---modules
       +-----debian (module)
       |        +-----main.tf
       |        |
       |        +-----variables.tf
       |
       +-----myplan.tf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This structure &lt;strong&gt;modules/debian&lt;/strong&gt; represents a module called &lt;strong&gt;debian&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Terraform plan &lt;strong&gt;myplan.tf&lt;/strong&gt; will be reusing the &lt;strong&gt;debian&lt;/strong&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to follow using the previous example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Split the previous version of the terraform file &lt;strong&gt;hello_world_variables.tf&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Put the variables in the &lt;strong&gt;variables.tf&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Put the resource declaration in the &lt;strong&gt;main.tf&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These two files will be located at &lt;strong&gt;modules/debian&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;variables.tf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;variable &quot;kvm_destination_uri&quot; {
  type        = string
  description = &quot;kvm instance uri where the vm is going to be deployed&quot;
}

variable &quot;hostname&quot; {
  type        = string
  description = &quot;hostname of the vm&quot;
}

variable &quot;memory&quot; {
  type        = string
  description = &quot;amount of memory&quot;
}

variable &quot;bridge_name&quot; {
  type        = string
  description = &quot;name of the bridge configured in the host&quot;
}

variable &quot;cpu_count&quot; {
  type        = string
  description = &quot;number of cpus used by vm&quot;
}

variable &quot;os_image&quot; {
  type        = string
  description = &quot;name of the vm volume&quot;
}

variable &quot;image_source_path&quot; {
  type        = string
  description = &quot;qcow2 image path&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;main.tf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;provider &quot;libvirt&quot; {
  uri = var.kvm_destination_uri
}

resource &quot;libvirt_volume&quot; &quot;os_image&quot; {
  name   = &quot;os_image${var.os_image}&quot;
  pool   = &quot;default&quot;
  source = var.image_source_path
}

resource &quot;libvirt_domain&quot; &quot;new_vm&quot; {
  name   = var.hostname
  memory = var.memory
  vcpu   = var.cpu_count

  disk {
    volume_id = &quot;${libvirt_volume.os_image.id}&quot;
  }

  network_interface {
    hostname = var.hostname
    bridge   = var.bridge_name
  }

  graphics {
    listen_type = &quot;address&quot;
  }

  console {
    type        = &quot;pty&quot;
    target_port = &quot;0&quot;
    target_type = &quot;virtio&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally I can reference the &lt;strong&gt;debian&lt;/strong&gt; module in my new plan overriding
any declared variable in the module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;myplan.tf&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;module &quot;k8s_master&quot; {
  source = &quot;./debian&quot;

  kvm_destination_uri = &quot;qemu+ssh://maintainer@future/system&quot;
  image_source_path   = pathexpand(&quot;~/Development/devops/hashicorp-tools/packer/out/packer-buster&quot;)
  hostname            = &quot;k8s_master&quot;
  memory              = &quot;2048&quot;
  cpu_count           = &quot;2&quot;
  bridge_name         = &quot;br0&quot;
  os_image            = &quot;master_volume&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I&amp;#8217;d recommend you to start checking the &lt;a href=&quot;https://learn.hashicorp.com/terraform/getting-started/install.html&quot;&gt;getting started&lt;/a&gt; guide&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dealing with &lt;a href=&quot;https://www.terraform.io/docs/configuration/variables.html&quot;&gt;input variables&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to create &lt;a href=&quot;https://www.terraform.io/docs/modules/index.html&quot;&gt;modules&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Terraform libvirt provider&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Official repository and docs at &lt;a href=&quot;https://github.com/dmacvicar/terraform-provider-libvirt&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;KVM&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linux-kvm.org/page/Main_Page&quot;&gt;KVM site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the Fedora virtualization guide at &lt;a href=&quot;https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-virtualization/&quot;&gt;Fedora virtualization guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cyberciti.biz/faq/find-ip-address-of-linux-kvm-guest-virtual-machine/&quot;&gt;How to find ip address of Linux KVM guest virtual machine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>CS: Asymptotic notation</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2019/01/asymptotic_notation.html"/>
        <updated>2019-01-02T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2019/01/asymptotic_notation.html</id>
        <category term="cs"/>
        <category term="asymptotic-notation"/>
        <content type="html">
            &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;omicron_or_big_o&quot;&gt;Omicron or Big-O (&amp;#x039F;)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Big-O sets the &lt;strong&gt;upper limit of a given function f(n)&lt;/strong&gt;. The set of
functions &amp;#x039F;(g(n)) is all f(n) functions defined by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/9321e17836700f7c25ebd23db9b51dfe.png&quot; alt=&quot;9321e17836700f7c25ebd23db9b51dfe.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which basically means that, given &lt;code&gt;n&lt;sub&gt;0&lt;/sub&gt;&lt;/code&gt;, c * g(n) it&amp;#8217;s always greater
equals than f(n). It&amp;#8217;s supposed to be it&amp;#8217;s upper limit. To demostrate
that a given function is in the set of functions of &lt;code&gt;&amp;#x039F;(g(n))&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/5350bb29b0ba717c96295c82fc4fc543.png&quot; alt=&quot;5350bb29b0ba717c96295c82fc4fc543.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will be neccessary to find any pair of values for &lt;code&gt;c &amp;gt; 0&lt;/code&gt; and &lt;code&gt;n&lt;sub&gt;0&lt;/sub&gt;
&amp;gt; 0&lt;/code&gt; in order to prove that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/328a1ed3bc1940174402e61384cfcb63.png&quot; alt=&quot;328a1ed3bc1940174402e61384cfcb63.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Demostrate that &lt;strong&gt;6n + 2 &amp;#x2208; &amp;#x039F;(n)&lt;/strong&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; example
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Step &lt;strong&gt;1&lt;/strong&gt;: To find the right &lt;code&gt;c&lt;/code&gt; constant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step &lt;strong&gt;2&lt;/strong&gt;: To find &lt;code&gt;n &amp;gt; 0&lt;/code&gt; so that &lt;code&gt;6n + 2 &amp;#x2264; cn&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s enough to find two possible values. For instance, a possible
&lt;strong&gt;solution&lt;/strong&gt; could be: &lt;code&gt;c = 6&lt;/code&gt; it&amp;#8217;s valid for all &lt;code&gt;n &amp;#x2265; 2&lt;/code&gt;,
therefore we can use &lt;code&gt;n&lt;sub&gt;0&lt;/sub&gt; = 2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;omega&quot;&gt;Omega (&amp;#x03A9;)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;theta&quot;&gt;Theta (&amp;#x03F4;)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=v4cd1O4zkGw&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=v4cd1O4zkGw&lt;/a&gt;[Big O Notation (HackerRank)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>echarts: Linking charts</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2018/12/echarts_sync.html"/>
        <updated>2018-12-27T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2018/12/echarts_sync.html</id>
        <category term="js"/>
        <category term="charts"/>
        <category term="echarts"/>
        <content type="html">
            &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I need to link two different charts at work. The motivation is that
one chart is showing the data and the other one just quickly shows
where you can find a peak. The chart on the top is going to be of type
&apos;line` and the chart at the bottom is going to be of type &apos;bar&apos;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both charts have to be synchronized to each other in order to show
peaks aligned with data above and also to keep it proportional when
using the zoom feature in the upper chart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For the chart showing the hot areas I could have used oneof type
&lt;code&gt;line&lt;/code&gt;, and then showing the area created by those lines. The problem
is that at the moment you can&amp;#8217;t register a click event on the area,
and I needed to allow the user to click over the area to show more
information.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Summary:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To see a &lt;strong&gt;guiding line&lt;/strong&gt; to see where the cursor is in both charts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To be able to register a click event on the chart below&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep line &lt;strong&gt;chart points aligned with the bars below&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keep proportionality&lt;/strong&gt; in the bar chart &lt;strong&gt;when zooming&lt;/strong&gt; in the line chart&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;div id=&quot;echarts_main&quot; style=&quot;width: 80%;height:400px;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;echarts_secondary&quot; style=&quot;width: 80%;height:200px;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;echarts_info&quot; style=&quot;width: 20%; height: 50px; border: 1px solid #ccc; padding: 10px;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    window.onload = () =&gt; {
        var firstChart = echarts.init(document.getElementById(&apos;echarts_main&apos;));
        var secondChart = echarts.init(document.getElementById(&apos;echarts_secondary&apos;));

        var firstOptions = {
            tooltip: {
              formatter: (params, ticket, callback) =&gt; {
                const values = params[0].data

                return `${values[0]} tickets sold at ${values[1]}`
              },
              trigger: &apos;axis&apos;,
            },
            toolbox: {
              feature: {
                dataZoom: {
                    yAxisIndex: &apos;none&apos;,
                    title: {
                      zoom: &apos;zoom&apos;,
                      back: &apos;back&apos;
                    }
                }
              }
            },
            xAxis: {
               type: &apos;value&apos;,
               axisPointer: {
                 type: &apos;line&apos;
               }
            },
            yAxis: {
              type: &apos;value&apos;
            },
            series: [{
                type: &apos;line&apos;,
                data: [
                      [5, 100],
                      [7, 100],
                      [10, 100],
                      [14, 5],
                      [16, 30],
                      [18, 56],
                      [26, 20],
                      [30, 90],
                      [40, 29],
                      [50, 23]
               ]
            }],
            grid: {
              left: &apos;0&apos;
            }
        };

        var secondOptions = {
            tooltip: {
              formatter: &apos;Click to see information &lt;br/&gt; on the &lt;b&gt;box below&lt;/b&gt;&apos;,
              trigger: &apos;axis&apos;
            },
            toolbox: {
              show: false,
              feature: {
                dataZoom: {}
              }
            },
            xAxis: {
               type: &apos;value&apos;,
               axisTick: {
                 show: false
               },
               axisLabel: {
                 show: false
               },
               axisPointer: {
                 type: &apos;line&apos;
               }
            },
            yAxis: {
              show: false
            },
            series: [{
                type: &apos;bar&apos;,
                emphasis: {
                  label: {
                    show: false
                  },
                  itemStyle: {
                    color: &apos;#cd3138&apos;
                  }
                },
                itemStyle: {
                  color: &apos;#cd3138&apos;
                },
                data: [
                      [5, 100],
                      [7, 100],
                      [10, 100],
                      [14, null],
                      [16, null],
                      [18, 100],
                      [26, null],
                      [30, 100],
                      [40, null],
                      [50, null]
                ]
            }],
            grid: {
              top: &apos;0&apos;,
              left: &apos;0&apos;
            }
        };

        firstChart.setOption(firstOptions);
        secondChart.setOption(secondOptions);

        echarts.connect([firstChart, secondChart])
        secondChart.on(&apos;click&apos;, (params) =&gt; {
          document.querySelector(&apos;#echarts_info&apos;).textContent = `x: ${params.data[0]}`
        })
    }
&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://ecomfe.github.io/echarts-doc/public/en/index.html&quot;&gt;Echarts site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Propositional logic: Contrapositive</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2018/12/propositional_logic_contrapositive.html"/>
        <updated>2018-12-23T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2018/12/propositional_logic_contrapositive.html</id>
        <category term="cs"/>
        <category term="logic"/>
        <content type="html">
            &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just a quick note about the &lt;code&gt;contrapositive&lt;/code&gt; is that it&amp;#8217;s very useful
to prove some statement. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
All drivers in Madrid, drive a bike
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; original statement
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/50c8bc1a5046d2c61e4af316a3ce3777.png&quot; alt=&quot;50c8bc1a5046d2c61e4af316a3ce3777.png&quot; width=&quot;200&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now if we can prove that the &lt;strong&gt;contrapositive&lt;/strong&gt; is true, then we can
prove that the original statement was wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
All non-bike drivers, live outside Madrid
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; contrapositive
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/16198337375010f3fd72425bf893ce04.png&quot; alt=&quot;16198337375010f3fd72425bf893ce04.png&quot; width=&quot;200&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only proving that at leat one non-bike driver lives in Madrid will
prove the initial statement to be wrong.&lt;/p&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Propositional logic: exercises</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2018/12/propositional_logic_exercises.html"/>
        <updated>2018-12-22T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2018/12/propositional_logic_exercises.html</id>
        <category term="cs"/>
        <category term="logic"/>
        <content type="html">
            &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;exercises&quot;&gt;Exercises&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some exercises to train propositional logic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If anyone sees an error please raise an issue in the blog
repository, thanks :).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;exercise_1&quot;&gt;Exercise 1&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s consider a &lt;strong&gt;propositional language&lt;/strong&gt; where:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt;: Is Monday&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt;: John goes running&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt;: Elsa goes running&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Formalize the following sentences:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
If it&amp;#8217;s Monday, John and Elsa go running
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; A
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
If it&amp;#8217;s Monday John goes running
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; B
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
If it&amp;#8217;s other day than Monday, Elsa goes running, but John doesn&amp;#8217;t
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; C
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Solutions&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/15cf1d5e3870ce537725c72f59ba8b51.png&quot; alt=&quot;15cf1d5e3870ce537725c72f59ba8b51.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Solution to A&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/4746161d80e6233cd4e033b11d76f630.png&quot; alt=&quot;4746161d80e6233cd4e033b11d76f630.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Solution to B&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2869e7f1a17332d42352718625fea878.png&quot; alt=&quot;2869e7f1a17332d42352718625fea878.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Solution to C&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Table of truth&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/c94965721b3f779852da1cb2cbc97854.png&quot; alt=&quot;c94965721b3f779852da1cb2cbc97854.png&quot; height=&quot;150&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. table of truth&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;exercise_2&quot;&gt;Exercise 2&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s consider a &lt;strong&gt;propositional language&lt;/strong&gt; where:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt;: John buys lottery tickets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt;: Is Christmas time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt;: John feels lucky&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Formalize the following sentences:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
If is Christmas time, or John feels lucky, then John buys lottery
tickets
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; A
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
If it&amp;#8217;s not Christmas, and John doesn&amp;#8217;t feel lucky, he doesn&amp;#8217;t buy
lottery
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; B
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Solutions&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/644cc113c4e2e43fed228da526309215.png&quot; alt=&quot;644cc113c4e2e43fed228da526309215.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Solution to A&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/4a9b2fa4c9f484a58c366527cf3744de.png&quot; alt=&quot;4a9b2fa4c9f484a58c366527cf3744de.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Solution to B&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Table of truth&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/e94b6da93ef97104907195b148d451d4.png&quot; alt=&quot;e94b6da93ef97104907195b148d451d4.png&quot; width=&quot;450&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. table of truth&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Propositional logic</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2018/12/propositional_logic.html"/>
        <updated>2018-12-16T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2018/12/propositional_logic.html</id>
        <category term="cs"/>
        <category term="logic"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Logic will get you from A to B. Imagination will take you everywhere
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Albert Einstein
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The use of logic helps us to establish the validity of a given
statement. It&amp;#8217;s important to notice that a logical statement doesn&amp;#8217;t
have to make any sense, it only has to be structured following certain
rules or formal steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;re two main types of logic systems, &lt;strong&gt;propositional logic&lt;/strong&gt;, and
&lt;strong&gt;predicate logic&lt;/strong&gt;. In a propositional system, formal steps make use of
&lt;strong&gt;propositions&lt;/strong&gt; sometimes connected with &lt;strong&gt;logical operators&lt;/strong&gt; to make
new propositions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;propositions&lt;/strong&gt;: things we want to assess. Statements that can only
be true or false.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Logical operators&lt;/strong&gt;: the way the former variables are connected to
each other.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This entry will cover the following topics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#simple_propositions&quot;&gt;Simple propositions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#complex_propositions&quot;&gt;Complex propositions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#conditional_propositions&quot;&gt;Conditional propositions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#negation&quot;&gt;Negation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#contrapositive&quot;&gt;Contrapositive&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#biconditional&quot;&gt;Biconditional&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;simple_propositions&quot;&gt;Simple propositions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I was saying a &lt;strong&gt;proposition&lt;/strong&gt; is a sentence that can only represent
true or false but can&amp;#8217;t represent both at the same time. Examples of
this could be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2 x 2 = 4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Ferrari F450 is faster than a Volkswagen Polo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The capital of Spain is Seville&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These three statements are propositions. However while the two first
propositions are true, and the last one is obviously false.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand there&amp;#8217;re sentences that can&amp;#8217;t be considered as
propositions because &lt;strong&gt;they don&amp;#8217;t represent a true/false kind of
statements&lt;/strong&gt;. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Are you happy ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do the right thing!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;x + y = 2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;complex_propositions&quot;&gt;Complex propositions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can build up new propositions from pre-existent ones combining them
with the use of &lt;strong&gt;logical operators&lt;/strong&gt;. When dealing with complex
sequences of statements, instead of repeating all of them all over
again, we use variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;and&quot;&gt;AND&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance the proposition &quot;&lt;strong&gt;The sky is blue and the snow is white&lt;/strong&gt;&quot;
has two parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt;: The sky is blue&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt;: The snow is white&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And both parts are combined using the &lt;code&gt;AND&lt;/code&gt; operator (&lt;code&gt;&amp;#x2227;&lt;/code&gt;). Mathematically can be
expressed as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/4aa32bf3a4aa6239a102af7635373072.png&quot; alt=&quot;4aa32bf3a4aa6239a102af7635373072.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. and&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The use of the &lt;code&gt;&amp;#x2227;&lt;/code&gt; means that the proposition is true when both &lt;strong&gt;p&lt;/strong&gt;
and &lt;strong&gt;q&lt;/strong&gt; are true. Another way to represent the possible values for this
propositions is using a &lt;strong&gt;truth table&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/22f8f28238ea878dc92c096384f52043.png&quot; alt=&quot;22f8f28238ea878dc92c096384f52043.png&quot; height=&quot;150&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. truth table&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Here I&amp;#8217;m not using the &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; variables in the truth
table. However in general I should be using them to keep the verbosity
to a minimum.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;or&quot;&gt;OR&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now what if we would like to express that some two propositions
together are true, if any of them is true. We can express that with
the &lt;code&gt;OR&lt;/code&gt; operator (&lt;code&gt;&amp;#x2228;&lt;/code&gt;). Imagine you&amp;#8217;re at a raffle, they&amp;#8217;re
giving away a car, and you and your couple have tickets. I guess, it&amp;#8217;s
a win whether she/he has a winner ticket or you have a ticket
winner. The worst case scenario would be that neither of you have a
winner ticket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Long story short, if we consider &lt;code&gt;p&lt;/code&gt; your couple having a winner
ticket and &lt;code&gt;q&lt;/code&gt; you having a winner ticket, a proposition will be true
if any of you have a winner ticket. Mathematically:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/e24a5601777c447da6dcdab4efb64f53.png&quot; alt=&quot;e24a5601777c447da6dcdab4efb64f53.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. or&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But, if you would like to go through all the possibilities then you
can write down the truth table:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/21606cc5359143bb8ba10398d7567961.png&quot; alt=&quot;21606cc5359143bb8ba10398d7567961.png&quot; height=&quot;150&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. truth table&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;xor&quot;&gt;XOR&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes there could be a situation when we may want to assess that
two propositions are incompatible. So the result of that proposition
should be true every time one of the propositions is true and the
other is false.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conditional_propositions&quot;&gt;Conditional propositions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conditional statements are a very common form of complex propositions
having the form of an hyphotesis followed by a conclusion&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Think of conditional statements as if/then type statements.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;code&gt;IF THE NEXT PROJECT USES JAVA, THEN I&amp;#8217;M IN&lt;/code&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first thing we should do is to map the expression to
&lt;strong&gt;propositions&lt;/strong&gt; or &lt;strong&gt;logical variables&lt;/strong&gt;. Those are the parts of the
expression we want to evaluate. In this case we have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;A&lt;/code&gt;: IF THE NEXT PROJECT USES JAVA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;B&lt;/code&gt;: THEN I&amp;#8217;M IN&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also say that the conditional statement has a &lt;strong&gt;hypothesis&lt;/strong&gt;
(IF&amp;#8230;&amp;#8203;) and a clause (I&amp;#8217;m in). We can also notice the dependency
between both propositions. &lt;strong&gt;A&lt;/strong&gt; implies that &lt;strong&gt;B&lt;/strong&gt; can happen. This can
be expressed as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/50c8bc1a5046d2c61e4af316a3ce3777.png&quot; alt=&quot;50c8bc1a5046d2c61e4af316a3ce3777.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. implies&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;negation&quot;&gt;Negation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can also express just the opposite of a given &lt;strong&gt;proposition&lt;/strong&gt; with
the negation operator. Lets negate the propositions at hand:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;!A&lt;/code&gt;: IF THE NEXT PROJECT DOESN&amp;#8217;T USE JAVA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;!B&lt;/code&gt;: THEN I&amp;#8217;M NOT IN&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
It&amp;#8217;s important to notice that here I&amp;#8217;m using the &lt;code&gt;!&lt;/code&gt; operator as
a conditional variable operator, that&amp;#8217;s because most of the time we
programmers use it to negate boolean expressions. However the
mathematical symbol of boolean negation is &lt;code&gt;&amp;#x00AC;&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So how the statement looks like with its propositions negated ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/7d7d1fdf66bb95d608df4f75c4fb7645.png&quot; alt=&quot;7d7d1fdf66bb95d608df4f75c4fb7645.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. negation&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which leads me to the next concept, the &lt;strong&gt;contrapositive&lt;/strong&gt; of the
initial statement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;contrapositive&quot;&gt;Contrapositive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if I would like to represent the same statement in a negative
way:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;code&gt;IF THE NEXT PROJECT DOESN&amp;#8217;T USE JAVA, THEN I&amp;#8217;M OUT&lt;/code&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This would imply that I didn&amp;#8217;t join the project, because the next
project is not using Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/7d7d1fdf66bb95d608df4f75c4fb7645.png&quot; alt=&quot;7d7d1fdf66bb95d608df4f75c4fb7645.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. contrapositive&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the &lt;strong&gt;contrapositive&lt;/strong&gt; version of our initial statement. In
logic a conditional statement and its contrapositive are logically
equivalents, meaning that that both try to express the same thing but
from different perspectives, positive and negative. In mathematical
syntax:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/798c57e9c0d61965f651e302b5fb2cb1.png&quot; alt=&quot;798c57e9c0d61965f651e302b5fb2cb1.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. implies vs contrapositive&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;biconditional&quot;&gt;Biconditional&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets remind our initial propositional sentence: &lt;strong&gt;IF THE NEXT PROJECT
USES JAVA, THEN I&amp;#8217;M IN&lt;/strong&gt;. What if I also say:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;code&gt;IF THE NEXT PROJECT USE PYTHON, THEN I&amp;#8217;M I&amp;#8217;M&lt;/code&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Am I saying something contradictory to the previous sentence ? Not at
all. I could be interested in a project using Python or Java. So if I
wanted to be very explicit about the fact that I&amp;#8217;m willing to do the
next project &lt;strong&gt;only if&lt;/strong&gt; Java is on the table, then I have to express
the statement using the biconditional operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/5b82cec87b8710817fbc5922dbc9331b.png&quot; alt=&quot;5b82cec87b8710817fbc5922dbc9331b.png&quot; height=&quot;50&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 9. biconditional&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This expression now reflects that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;code&gt;IF, AND ONLY IF THE NEXT PROJECT USE JAVA, THEN I&amp;#8217;M IN&lt;/code&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So now you&amp;#8217;ve narrowed the posibilities of interpretation of your
initial proposition.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://mfleck.cs.illinois.edu/building-blocks/&quot;&gt;Building Blocks for Theoretical of Computer Science&lt;/a&gt; by Margaret M. Fleck&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pragprog.com/book/mcmath/good-math&quot;&gt;Good Maths&lt;/a&gt; by Mark C. Chu-Carroll&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://code.energy/computer-science-distilled&quot;&gt;Computer Science Distilled&lt;/a&gt; by Wladston Ferreira Filno&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Contraposition&quot;&gt;Wikipedia: Contraposition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>ELISP: testing with ERT</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2018/11/elisp-ert.html"/>
        <updated>2018-11-18T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2018/11/elisp-ert.html</id>
        <category term="elisp"/>
        <category term="testing"/>
        <category term="ert"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the past few weeks I&amp;#8217;ve been working on a small project to get used
to elisp programming, and I got to a point when I needed to make sure
I wasn&amp;#8217;t breaking anything in the process. There&amp;#8217;re several solutions
out there but the first I put my hands on was
&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/ert/index.html&quot;&gt;ERT&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what_is_ert&quot;&gt;What is ERT ?&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
ERT is a tool for automated testing in Emacs Lisp. Its main features
are facilities for defining tests, running them and reporting the
results, and for debugging test failures interactively.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; ERT main page
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;writing_a_buggy_function&quot;&gt;Writing a buggy function&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to show how ERT works, I&amp;#8217;m creating a buggy function. The
function is supposed to sort a list of strings in ascending order by
default. But in fact it returns by default the strings in descending
order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;sort list tests&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;(defun sort-by-string-length (list &amp;amp;optional asc-desc)
  &quot;Sort a LIST of strings by their length.
Apply direction by ASC-DESC value which could be &apos;asc&apos; or &apos;desc&apos;.&quot;
  (progn
    (fset &apos;direction
          (if (equal asc-desc &quot;asc&quot;) &apos;&amp;gt; &apos;&amp;lt;))
    (sort list (lambda (a b)
                 (direction (length a) (length b))))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;writing_tests&quot;&gt;Writing tests&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to make sure the function does what it claims to do, we
should write a test. An ERT test normally looks like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;basic form&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;(ert-deftest name-of-the-test ()
             (should ...)) ;; assertions&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An ERT test uses the macro &lt;code&gt;ert-deftest&lt;/code&gt; to declare a new test. Then
it uses &lt;code&gt;should&lt;/code&gt; to check assertions results. There&amp;#8217;re more
possibilities other than &lt;code&gt;should&lt;/code&gt;: &lt;code&gt;should-not&lt;/code&gt; or &lt;code&gt;should-error&lt;/code&gt;. I&amp;#8217;m
talking about them a little bit later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;sort list tests&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;(ert-deftest test-sort-by-default () &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  (should
   (equal (sort-by-string-length &apos;(&quot;a&quot; &quot;aaa&quot; &quot;aa&quot;)) &apos;(&quot;a&quot; &quot;aa&quot; &quot;aaa&quot;))))

(ert-deftest test-sort-by-desc () &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  (should (equal (sort-by-string-length &apos;(&quot;a&quot; &quot;aaa&quot; &quot;aa&quot;) &quot;desc&quot;) &apos;(&quot;aaa&quot; &quot;aa&quot; &quot;a&quot;))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Tests default sort (ascending) by string length&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Tests descending sort by string length&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;executing_tests&quot;&gt;Executing tests&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can execute ERT test in different ways, but the one I prefer is
batch execution via command line. Is the one I think I would use in a
CI environmnet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Of course, you will have to install Emacs in your CI environment
in order to be able to execute these tests.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;shell execution&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;emacs -batch -l ert -l /path/to/file_containing_tests.el -f ert-run-tests-batch-and-exit&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And because I&amp;#8217;ve made a mistake with the default sorting this is what I got:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;test output&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;Running 2 tests (2018-11-18 16:08:14+0100)
   passed  1/2  test-sort-by-default
Test test-sort-by-desc backtrace:
...
Test test-sort-by-desc condition:
    (ert-test-failed
     ((should
       (equal
        (sort-by-string-length-ko ... &quot;desc&quot;)
        &apos;...))
      :form
      (equal
       (&quot;a&quot; &quot;aa&quot; &quot;aaa&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
       (&quot;aaa&quot; &quot;aa&quot; &quot;a&quot;)) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      :value nil :explanation
      (list-elt 0
                (arrays-of-different-length 1 3 &quot;a&quot; &quot;aaa&quot; first-mismatch-at 1))))
   FAILED  2/2  test-sort-by-desc

Ran 2 tests, 1 results as expected, 1 unexpected (2018-11-18 16:08:14+0100)

1 unexpected results:
   FAILED  test-sort-by-desc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Expected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Actual result&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;asserts_with_should&quot;&gt;Asserts with should&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ERT provides different macros to help you make your tests easier to
read and understand. The most common is &lt;code&gt;should&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;should&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;(ert-deftest test-sum-is-commutative ()
  (should (= (+ 1 2) (+ 2 1))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes you may want to assert that the result is not what is
expected, for example to assert that the division operation is not
commutative. For that you can use &lt;code&gt;should-not&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;should-not&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;(ert-deftest test-division-not-commutative ()
  (should-not (= (/ 1 2) (/ 2 1))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And I&amp;#8217;m sure that at some point, you&amp;#8217;ll need to assert that some
function is throwing an error under some circumstances. In that case
you can use &lt;code&gt;should-error&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;should-error&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;(ert-deftest test-error ()
  (should-error
   (signal &apos;singularity-error nil)
   :type &apos;singularity-error))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example I&amp;#8217;m checking that the function throws an error and
also that error is of type &lt;strong&gt;&apos;singularity-error&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;:type&lt;/code&gt; is optional
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;fixing_function&quot;&gt;Fixing function&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now it&amp;#8217;s time to do the fix and make the test pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;(defun sort-by-string-length (list &amp;amp;optional asc-desc)
  &quot;Sort a LIST of strings by their length.
Apply direction by ASC-DESC value which could be &apos;asc&apos; or &apos;desc&apos;.&quot;
  (progn
    (fset &apos;direction
          (if (equal asc-desc &quot;desc&quot;)
              &apos;&amp;gt;
            &apos;&amp;lt;))
    (sort list (lambda (a b)
                 (direction (length a) (length b))))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Running tests again shows the following output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;Running 2 tests (2018-11-18 16:38:00+0100)
   passed  1/2  test-sort-by-default
   passed  2/2  test-sort-by-desc

Ran 2 tests, 2 results as expected (2018-11-18 16:38:00+0100)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now everything works as expected&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mariogarcia/blog/tree/master/sources/2018/11/elisp-ert&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/ert/index.html&quot;&gt;ERT main page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.emacswiki.org/emacs/UnitTesting&quot;&gt;EMACS unit testing tools&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Writing JS posts with JBake : React JS</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2018/11/react.html"/>
        <updated>2018-11-12T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2018/11/react.html</id>
        <category term="js"/>
        <category term="react"/>
        <category term="jbake"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this second entry about adding JS programming entries to JBake
posts I&amp;#8217;ve included a typical React TODO item example&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The JS example I&amp;#8217;m using here is just a quick draft just to
show how to include JS and CSS code in a post entry. Don&amp;#8217;t take it too
seriosly.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add_required_resources&quot;&gt;Add required resources&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be able to work with react, and load the example script, I need to add the &lt;code&gt;scripts&lt;/code&gt; attribute in the post header:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-adoc&quot; data-lang=&quot;adoc&quot;&gt;:scripts: https://unpkg.com/react@16/umd/react.development.js|https://unpkg.com/react-dom@16/umd/react-dom.development.js|js/2018/11/react.js&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basically, I&amp;#8217;ve included the &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-dom&lt;/code&gt; libraries at the
header of the document, and then the example dependency inside the
blog project&amp;#8217;s assets &lt;code&gt;js/2018/11/react.js&lt;/code&gt; . If I would like to add a
custom css, you can add as well a &lt;code&gt;css&lt;/code&gt; entry in the post header:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-adoc&quot; data-lang=&quot;adoc&quot;&gt;:css: css/2018/11/react.css&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;no_jsx_when_using_plain_js&quot;&gt;No JSX when using plain JS&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because JSX can&amp;#8217;t be included through a `&amp;lt;script/&amp;gt;&apos; import, I had to
create a helper function to create new elements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;helper&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;const e = React.createElement;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;todopanel&quot;&gt;TodoPanel&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TodoPanel&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;class TodoPanel extends React.Component {
    constructor(props) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        super(props);
        this.state = {
            task: &apos;&apos;,
            tasks: []
        };
    }

    handleChange (e) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        this.setState({task: e.target.value})
    }

    addItem () { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        this.setState({
            tasks: [...this.state.tasks, this.state.task],
            task: &apos;&apos;
        })
    }

    deleteItem (item) { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
        this.setState({tasks: this.state.tasks.filter(x =&amp;gt; x !== item)})
    }

    render() {  &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        return e(&apos;div&apos;, {id: &apos;todo&apos;},
                 e(&apos;input&apos;, {type: &apos;text&apos;, onChange: (ev) =&amp;gt; this.handleChange(ev), value: this.state.task}),
                 e(&apos;button&apos;, {onClick: () =&amp;gt; this.addItem() }, &apos;Add&apos;),
                 e(TodoItems, {tasks: this.state.tasks, delete: (item) =&amp;gt; this.deleteItem(item)})
        );
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Create default state&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Sets which is the current item to add&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Adds the current item to the tasks list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Deletes the clicked item from the tasks list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;renders the tasks panel&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;creating_items&quot;&gt;Creating items&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;TodoItems&lt;/code&gt; component represents the tasks list. It only renders
an &lt;code&gt;ul&lt;/code&gt; elements containing as many items as tasks found in the task
list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TodoItems&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;class TodoItems extends React.Component {
    createTask (item) {
        return e(TodoItem, {key: item, delete: this.props.delete, item: item}, null)
    }

    render () {
        return e(&apos;ul&apos;, {key: &apos;items&apos;, className: &apos;items&apos;}, this.props.tasks.map(x =&amp;gt; this.createTask(x)))
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every item of the task list is built using the &lt;code&gt;TodoItem&lt;/code&gt; component&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TodoItem&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;class TodoItem extends React.Component {
    render () {
        const { item } = this.props
        const itemSpan = e(&apos;p&apos;, {key: `item-p-${item}`}, item)
        const deleteButton = e(&apos;button&apos;,
                               {value: &apos;delete&apos;, key: `item-delete-${item}`, onClick: () =&amp;gt; this.props.delete(item)},
                               &apos;Delete&apos;)

        return e(&apos;li&apos;, {key: item},
                 e(&apos;span&apos;, {className: &apos;item&apos;}, [itemSpan, deleteButton]))
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;render_example&quot;&gt;Render example&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, in order to render the &lt;code&gt;TodoPanel&lt;/code&gt; in this document we need
to link the component with an available dom element.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Render&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;const domContainer = document.querySelector(&apos;#like_button_container&apos;);
ReactDOM.render(e(TodoPanel), domContainer);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;div id=&quot;like_button_container&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It seems easy to add simple vanilla JS examples to a post. However
trying to create more complex examples would require a proper build
tool such as plain npm scripts or webpack.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Writing JS posts with JBake</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2018/11/echarts.html"/>
        <updated>2018-11-10T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2018/11/echarts.html</id>
        <category term="js"/>
        <category term="jbake"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During this year I&amp;#8217;ve been working as a front-end developer, and now
that I&amp;#8217;ve revamped the blog I was wondering how to include blog
entries with embedded html + js.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;change_jbake_templates&quot;&gt;Change Jbake templates&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to load extra custom js scripts in the document header of the
blog entry, I&amp;#8217;ve changed the template responsible for rendering the
footer part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;footer.tpl&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;script(src:&quot;${config.site_contextPath}js/jquery.min.js&quot;){} newLine()
script(src:&quot;${config.site_contextPath}js/browser.min.js&quot;){} newLine()
script(src:&quot;${config.site_contextPath}js/breakpoints.min.js&quot;){} newLine()
script(src:&quot;${config.site_contextPath}js/util.js&quot;){} newLine()
script(src:&quot;${config.site_contextPath}js/main.js&quot;){} newLine()
script(src:&quot;${config.site_contextPath}js/highlight.pack.js&quot;){} newLine()
script(type: &quot;text/javascript&quot;) {
    yieldUnescaped &quot;&quot;&quot;
        document.addEventListener(&apos;DOMContentLoaded&apos;, (event) =&amp;gt; {
            document.querySelectorAll(&apos;pre code&apos;).forEach((block) =&amp;gt; {
                hljs.highlightBlock(block);
            });
        });
    &quot;&quot;&quot;
}

content.scripts?.split(&apos;\\|&apos;)?.each { uri -&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    script(src: uri ==~ &apos;http.*&apos;
        ? uri
        : &quot;${config.site_contextPath}${uri}&quot;, type=&quot;javascript&quot;) {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Takes &lt;strong&gt;content.scripts&lt;/strong&gt; variable&amp;#8217;s uris (in case there&amp;#8217;s any)o and creates &lt;code&gt;script&lt;/code&gt; tags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basically if the entry has a &lt;code&gt;scripts&lt;/code&gt; variable with a list of scripts
uris, the html document will render them within the &lt;code&gt;head&lt;/code&gt; tag.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add_extra_js_uris_to_the_blog_entry&quot;&gt;Add extra JS uris to the blog entry&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then it&amp;#8217;s up to us to use the &lt;code&gt;scripts&lt;/code&gt; tag adding as many script uris
as we need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Post entry header&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;= Title of the new entry
@bla
2018-11-09
:jbake-type: post
:jbake-status: published
:jbake-tags: js, jbake
:scripts: https://cdnjs.cloudflare.com/ajax/libs/echarts/4.1.0/echarts.js|https://cdnjs.cloudflare.com/ajax/libs/echarts/4.1.0/echarts-en.min.js
:idprefix:

== Intro
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can add as many script entries just separated by the &lt;code&gt;|&lt;/code&gt; character.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add_embedded_html_with_asciidoctor&quot;&gt;Add embedded html with Asciidoctor&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To include raw html in asciidoctor you have to use a special block
delimited by &lt;strong&gt;+&amp;#43&amp;#43+&lt;/strong&gt; rows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Embedded html&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;++++
&amp;lt;div id=&quot;echarts_main&quot; style=&quot;width: 600px;height:400px;&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    window.onload = () =&amp;gt; {
        // based on prepared DOM, initialize echarts instance
        var myChart = echarts.init(document.getElementById(&apos;echarts_main&apos;));

        // specify chart configuration item and data
        var option = {
            tooltip: {},
            legend: {
                data:[&apos;Sales&apos;]
            },
            xAxis: {
                data: [&quot;shirt&quot;,&quot;cardign&quot;,&quot;chiffon shirt&quot;,&quot;pants&quot;,&quot;heels&quot;,&quot;socks&quot;]
            },
            yAxis: {},
            series: [{
                name: &apos;Sales&apos;,
                type: &apos;bar&apos;,
                data: [5, 20, 36, 10, 10, 20]
            }]
        };

        // use configuration item and data specified to show chart
        myChart.setOption(option);
    }
&amp;lt;/script&amp;gt;
++++&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example I&amp;#8217;m showing a basic example of
Echarts. &lt;a href=&quot;https://ecomfe.github.io/echarts-doc/public/en/index.html&quot;&gt;Echarts&lt;/a&gt;
is a charting js library from the chinese search engine Baidu.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;echarts_main&quot; style=&quot;width: 600px;height:400px;&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    window.onload = () =&gt; {
        // based on prepared DOM, initialize echarts instance
        var myChart = echarts.init(document.getElementById(&apos;echarts_main&apos;));

        // specify chart configuration item and data
        var option = {
            tooltip: {},
            legend: {
                data:[&apos;Sales&apos;]
            },
            xAxis: {
                data: [&quot;shirt&quot;,&quot;cardign&quot;,&quot;chiffon shirt&quot;,&quot;pants&quot;,&quot;heels&quot;,&quot;socks&quot;]
            },
            yAxis: {},
            series: [{
                name: &apos;Sales&apos;,
                type: &apos;bar&apos;,
                data: [5, 20, 36, 10, 10, 20]
            }]
        };

        // use configuration item and data specified to show chart
        myChart.setOption(option);
    }
&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#escaping-text&quot;&gt;Asciidoctor reference about escaping html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://mrhaki.blogspot.com/2014/06/awesome-asciidoc-include-raw-html.html&quot;&gt;Mr Haki entry about escaping html with Asciidoctor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://ecomfe.github.io/echarts-doc/public/en/index.html&quot;&gt;Echarts site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Kubernetes: Using MetalLB to expose a service</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2018/05/kubernetes_02.html"/>
        <updated>2018-05-06T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2018/05/kubernetes_02.html</id>
        <category term="kubernetes"/>
        <category term="devops"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we have our Kubernetes cluster, it&amp;#8217;s time to deploy something in
it. I&amp;#8217;m going to follow a simple deploying a Ratpack application I did
sometime ago and that I packed as a docker image at Bintray.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installing_pod&quot;&gt;Installing POD&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pod_declaration&quot;&gt;Pod declaration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the POD declaration I&amp;#8217;m defining the Docker image url. And the port
where the application is exposed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: v1
kind: Pod
metadata:
  name: pnlp-pod
spec:
  containers:
    - name: pnlp-pod
      image: pacotheai-docker-public.bintray.io/pnlp:0.1.0
      ports:
        containerPort: 5050&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how_to_deploy_my_pod&quot;&gt;How to deploy my POD&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;kubectl create -f pnlp-pod.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how_to_see_deployed_pod_details&quot;&gt;How to see deployed  POD details&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we want to see things like which private IP is the app exposed, we
can use:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;kubectl describe pods/pnlp-pod.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how_to_destroy_my_pod&quot;&gt;How to destroy my POD&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case we would like to terminate the POD:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;kubectl delete pods pnlp-pod.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installing_service&quot;&gt;Installing service&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re using a &lt;code&gt;Load Balancer&lt;/code&gt; to expose our service to a public IP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;metallb_configuration&quot;&gt;MetalLB configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MetalLB is nowadays the only load balancer available for a barebone
Kubernetes solution. It will expose our application in the available
public IPs. In order to provide MetalLB with a range of available IPs
we can deploy a MetalLB configuration to Kubernetes like the
following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I&amp;#8217;m using my Vagrant Kubernetes image which already has
MetalLB installed and configured.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: my-ip-space
      protocol: layer2
      addresses:
      - 192.168.250.112/29&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service_definition&quot;&gt;Service definition&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok so we&amp;#8217;ve already deployed our application but it&amp;#8217;s not publicly
available, it would be nice to publish it to the outside world. In order
to do that we need to define a service of type &lt;code&gt;LoadBalancer&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: v1
kind: Service
metadata:
  name: pnlp-pod
  labels:
    name: pnlp-pod
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    name: pnlp-pod&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how_to_deploy_service&quot;&gt;How to deploy service&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;kubectl create -f pnlp-service.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;check_where_the_services_been_deployed&quot;&gt;Check where the service&amp;#8217;s been deployed ?&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;kubectl get services&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Kubernetes: Installation</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2018/05/kubernetes_01.html"/>
        <updated>2018-05-05T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2018/05/kubernetes_01.html</id>
        <category term="kubernetes"/>
        <category term="devops"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve been working with Docker containers for a while, even my
development environment has been &lt;strong&gt;dockerized&lt;/strong&gt;, but apart from
creating and running Docker images, I haven&amp;#8217;t gone any further than
that. Nowadays containers are everywhere, and there&amp;#8217;re many products
for provisioning and orchestrating containers. I&amp;#8217;d say that the most
important is &lt;a href=&quot;https://kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Kubernetes is an open-source system for automating deployment,
scaling, and management of containerized applications.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; kubernetes.io
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a result I&amp;#8217;ve created a
&lt;a href=&quot;https://github.com/mariogarcia/vagrant_images/tree/master/kubernetes&quot;&gt;Vagrant
installation&lt;/a&gt; to ease the creation of a Kubernetes cluster with
&lt;code&gt;flannel&lt;/code&gt; as a POD network and &lt;code&gt;metallb&lt;/code&gt; as load balancer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before creating the cluster I need to create two virtual machines
(master + slave) and install the required libraries in order
Kubernetes to work. Because I&amp;#8217;m using
&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; and
&lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; to create and provision master and
slave virtual machines, it&amp;#8217;s required to install both before going any
further.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;vagrant_images&quot;&gt;Vagrant images&lt;/h3&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For more information about Vagrant go to &lt;a href=&quot;https://www.vagrantup.com/&quot; class=&quot;bare&quot;&gt;https://www.vagrantup.com/&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this POC I&amp;#8217;ve created a couple of VMs with Vagrant to mimic
barebone machines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2018/05/kubernetes_installation/project-structure.png&quot; alt=&quot;project structure&quot; width=&quot;460&quot; height=&quot;182&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Vagrantfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;###########################
###### UTIL METHODS #######
###########################

# Extracts the ip of a given node by its role name
def get_ip_by_role(nodes, role)
  node = nodes.find { |name, ndata|
    ndata[:role] == role
  }

  return node.last()[:ip]
end

# Extracts master node ip from the list of nodes
def get_master_ip(nodes)
  return get_ip_by_role(nodes, &quot;master&quot;)
end

# Extracts nfs server ip
def get_nfs_ip(nodes)
  return get_ip_by_role(nodes, &quot;nfs&quot;)
end

# Returns true if there is a node with :role =&amp;gt; &apos;nfs&apos;
def is_nfs_active(nodes)
  is_there_nfs = nodes
            .select { |name, ndata| ndata[:role] == &apos;nfs&apos;}
            .size() &amp;gt; 0

  return is_there_nfs ? &quot;yes&quot; : &quot;no&quot;
end

###########################
####### VARIABLES #########
###########################

# nodes to be built
nodes = {
  &quot;baker&quot;: {
    ip: &quot;192.168.250.104&quot;,
    role: &apos;nfs&apos;,
    memory: &quot;1024&quot;,
    disk: &quot;10GB&quot;
  },
  &quot;sherlock&quot;: {
    ip: &quot;192.168.250.102&quot;,
    role: &apos;master&apos;,
    memory: &quot;4096&quot;,
    disk: &quot;10GB&quot;
  },
  &quot;watson&quot;: {
    ip: &quot;192.168.250.103&quot;,
    role: &apos;slave&apos;,
    memory: &quot;4096&quot;,
    disk: &quot;10GB&quot;
  }
}

# cluster default gateway ip
gateway_ip = &quot;192.168.250.1&quot;

# metallb network mask to get ips from the pool
metallb_netmask = &quot;192.168.250.112/29&quot;

# master_ip
master_ip = get_master_ip(nodes)

# mount nfs
nfs_active = is_nfs_active(nodes)
nfs_ip = get_nfs_ip(nodes)
nfs_netmask = &quot;192.168.250.0/24&quot;

# shell provisioning
del_default_gateway = &quot;route del default gw 0&quot;
add_gateway_command = &quot;route add default gw #{ gateway_ip }&quot;

###########################
#### VAGRANT CONFIGURE ####
###########################

Vagrant.configure(&quot;2&quot;) do |config|
  # loop through all configured nodes
  nodes.each { |name, ndata|
    config.vm.define name do |node|

      node.vm.box = &quot;ubuntu/xenial64&quot;
      node.disksize.size = ndata[:disk]

      node.vm.hostname = name
      node.vm.network &quot;public_network&quot;, ip: ndata[:ip]
      node.vm.provision &quot;shell&quot;, inline: del_default_gateway
      node.vm.provision &quot;shell&quot;, inline: add_gateway_command
      node.vm.provider &quot;virtualbox&quot; do |vb|
        vb.memory = ndata[:memory]
      end

      node.vm.provision &quot;ansible&quot; do |ansible|
        ansible.playbook = &quot;ansible/playbook-#{ ndata[:role] }.yml&quot;
        ansible.extra_vars = {
          master_ip: master_ip,
          metallb_addresses: metallb_netmask,
          nfs_active: nfs_active,
          nfs_netmask: nfs_netmask,
          nfs_ip: nfs_ip
        }
      end

    end
  }
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Make sure master and slave hostnames are different
otherwise Kubernetes won&amp;#8217;t show the slave machine when listing
available nodes.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Make sure you&amp;#8217;ve installed the &lt;code&gt;vagrant-disksize&lt;/code&gt; plugin
before building vagrant boxes: &lt;code&gt;vagrant plugin install
vagrant-disksize&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ansible_provisioning&quot;&gt;Ansible provisioning&lt;/h3&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For more information about Ansible go to &lt;a href=&quot;https://www.ansible.com/&quot; class=&quot;bare&quot;&gt;https://www.ansible.com/&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Vagrant files are using an Ansible playbook in order to install
the system requirements in order Kubernetes to work. Depending on
whether the node has been declared as master or slave it will make use
of one playbook or the other. Master playbook:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;master playbook&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;- hosts: all
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3

  roles:
    - base
    - kubernetes
    - init
    - podnet
    - metallb
    - nfs_common
    - nfs_client&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Base libraries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes related libraries: kubeadm, kubectl&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes cluster initialization&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes POD network installation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes MetalLB (Load Balancer) installation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And for the slave nodes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;slave playbook&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;- hosts: all
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3

  roles:
    - base
    - kubernetes
    - join
    - nfs_common
    - nfs_client&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Base libraries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes related libraries: kubeadm, kubectl&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes slave node joins master node&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to the /kubernetes directory and execute:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vagrant up&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The process will prompt you in order to choose which network device
will be used as a bridged connection. Once the process has finished
you can log in the master vm:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vagrant ssh sherlock&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And make sure both nodes are up and ready:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;kubectl get nodes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mariogarcia/vagrant_images/tree/master/kubernetes&quot;&gt;Vagrant &amp;amp; Ansible source files&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Virtualbox: Installation in Debian 9</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2018/05/virtualbox_debian_9.html"/>
        <updated>2018-05-01T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2018/05/virtualbox_debian_9.html</id>
        <category term="virtualbox"/>
        <category term="vm"/>
        <category term="devops"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add_source_list&quot;&gt;Add source list&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following line to your /etc/apt/sources.list. According to
your distribution, replace &apos;&amp;lt;mydist&amp;gt;&apos; with &apos;artful&apos;, &apos;zesty&apos;,
&apos;yakkety&apos;, &apos;xenial&apos;, &apos;trusty&apos;, &apos;stretch&apos;, &apos;jessie&apos;, or &apos;wheezy&apos; (older
versions of VirtualBox supported different distributions):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;deb https://download.virtualbox.org/virtualbox/debian stretch contrib&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add_sources_signatures&quot;&gt;Add sources signatures&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;check_signatures_optional&quot;&gt;Check signatures (optional)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The key fingerprint for oracle_vbox_2016.asc is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;B9F8 D658 297A F3EF C18D  5CDF A2F6 83C5 2980 AECF
Oracle Corporation (VirtualBox archive signing key) &amp;lt;&lt;a href=&quot;mailto:info@virtualbox.org&quot;&gt;info@virtualbox.org&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The key fingerprint for oracle_vbox.asc is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;7B0F AB3A 13B9 0743 5925  D9C9 5442 2A4B 98AB 5139
Oracle Corporation (VirtualBox archive signing key) &amp;lt;&lt;a href=&quot;mailto:info@virtualbox.org&quot;&gt;info@virtualbox.org&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install VirtualBox, do&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;sudo apt-get update
sudo apt-get install virtualbox-5.2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What to do when experiencing The following signatures were invalid:
BADSIG &amp;#8230;&amp;#8203; when refreshing the packages from the repository?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;sudo -s -H
apt-get clean
rm /var/lib/apt/lists/*
rm /var/lib/apt/lists/partial/*
apt-get clean
apt-get update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Grails 3 code coverage</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2017/04/grails_coverage.html"/>
        <updated>2017-04-11T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2017/04/grails_coverage.html</id>
        <category term="groovy"/>
        <category term="jvm"/>
        <category term="code coverage"/>
        <category term="cobertura"/>
        <category term="jacoco"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last &lt;a href=&quot;http://greachconf.com&quot;&gt;Greach&lt;/a&gt; I had the oportunity to talk to
&lt;a href=&quot;https://twitter.com/sdelamo&quot;&gt;@sdelamo&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/jeffscottbrown&quot;&gt;@jeffbrown&lt;/a&gt; about the behavior of
existing code coverage tools with Grails 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s sad but the truth is there&amp;#8217;re not so many open source code
coverage tools out there. I guess the most popular in the JVM world
are cobertura and jacoco.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;cobertura&quot;&gt;Cobertura&lt;/h4&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Cobertura is a free Java tool that calculates the percentage of code
accessed by tests. It can be used to identify which parts of your Java
program are lacking test coverage. It is based on jcoverage.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; http://cobertura.github.io/cobertura/
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;jacoco&quot;&gt;Jacoco&lt;/h4&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
JaCoCo is a free code coverage library for Java, which has been
created by the EclEmma team based on the lessons learned from using
and integration existing libraries for many years.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; http://www.jacoco.org/jacoco/
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;project&quot;&gt;Project&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The structure of the project used as example is a gradle multimodule
with the following modules:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2017/04/grails_coverage/project-modules-diagram.png&quot; alt=&quot;project modules diagram&quot; width=&quot;330&quot; height=&quot;126&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;api&lt;/code&gt;: Grails 3.2.4 application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;common&lt;/code&gt;: Groovy 2.4.10 library for common utilities&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;initial_configuration&quot;&gt;Initial configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First you have to add both plugins to Gradle configuration in your
file &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;cobertura&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;apply plugin: &apos;net.saliman.cobertura&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;jacoco&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;apply plugin: &apos;jacoco&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Jacoco is bundled with Gradle, and it has a default version. You
can change the Jacoco version. Check oficial Jacoco/Gradle documentation
at &lt;a href=&quot;https://docs.gradle.org/current/userguide/jacoco_plugin.html&quot; class=&quot;bare&quot;&gt;https://docs.gradle.org/current/userguide/jacoco_plugin.html&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can execute &lt;code&gt;cobertura&lt;/code&gt; and &lt;code&gt;jacoco&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;execute cobertura&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;./gradlew cobertura&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;execute jacoco&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;./gradlew check jacocoTestReport&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to save time and execute both tools one after the other
there&amp;#8217;s a task (thanks to &lt;a href=&quot;https://twitter.com/sdelamo&quot;&gt;@sdelamo&lt;/a&gt;) that
execute both sequentially:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;codeCoverage task&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore from now on, I&amp;#8217;ll do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;execute both&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;./gradlew codeCoverage&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Initial state&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;cobertura&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;jacoco&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock external&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://mariogarcia.github.io/blog/img/2017/04/grails_coverage/cobertura_init.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;/img/2017/04/grails_coverage/cobertura_init.png&quot; alt=&quot;cobertura init&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock external&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://mariogarcia.github.io/blog/img/2017/04/grails_coverage/jacoco_init.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;/img/2017/04/grails_coverage/jacoco_init.png&quot; alt=&quot;jacoco init&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reducing_the_noise&quot;&gt;Reducing the noise&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes when creating a new project there are classes that are part
of the framework that we rarerly consider to test. But if we don&amp;#8217;t
test them they could ruin our coverage reports, even though we&amp;#8217;re sure
they won&amp;#8217;t affect the application behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Please note that&amp;#8217;s under your responsibility to decide which
classes are eligible to be tested or not. As a rule of thumb I would
say that if you have doubts about it, you should test it.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;omiting_classes&quot;&gt;Omiting classes&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to get rid of classes we know for sure we don&amp;#8217;t want to
touch, or we think it doesn&amp;#8217;t make sense to test, we can tell
&lt;strong&gt;cobertura&lt;/strong&gt; and &lt;strong&gt;jacoco&lt;/strong&gt; to omit them from their reports.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;omiting_classes_with_cobertura&quot;&gt;Omiting classes with cobertura&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before showing how to omit those clases, I need to mention that all
cobertura related configuration will be included in the &lt;code&gt;cobertura {
}&lt;/code&gt; configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Cobertura configuration&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;cobertura {
  // cobertura configuration here
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, now, in order to tell cobertura to omit classes like &lt;code&gt;Application&lt;/code&gt; or
&lt;code&gt;UrlMappings&lt;/code&gt;&amp;#8230;&amp;#8203;etc we use the property &lt;code&gt;coverageExcludes&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Adding classes exclusions&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we execute the cobertura report again, we&amp;#8217;ll see that the excluded
classes don&amp;#8217;t appear anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Executing cobertura&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;./gradlew codeCoverage&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;omiting_classes_with_jacoco&quot;&gt;Omiting classes with jacoco&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well if you take a look at the documentation, you will find that the
configuration attribute &lt;code&gt;excludes&lt;/code&gt; can exclude classes from
&lt;strong&gt;jacoco&lt;/strong&gt;. But it seems what you&amp;#8217;re really doing is excluding the
class from the report but not from the analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This part has been taken from this post:
&lt;a href=&quot;https://liviutudor.com/2016/02/11/jacoco-gradle-excluding-source-files-and-classes&quot; class=&quot;bare&quot;&gt;https://liviutudor.com/2016/02/11/jacoco-gradle-excluding-source-files-and-classes&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to exclude a give class from both the analysis and the report
you need to add the following to your &lt;strong&gt;jacoco&lt;/strong&gt; configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inside the jacocoReport configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jacoco report configuration&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;jacocoTestReport {
  //...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add inside the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Excluding classes&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
        fileTree(dir: it,
                 exclude: [&apos;**/Application**&apos;,
                           &apos;**/BootStrap**&apos;,
                           &apos;**/UrlMappings**&apos;])
    })
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And then execute code coverage again:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;./gradlew codeCoverage&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now I got rid of the noise and I can focus on the classes that are
really important to my application.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Reducing class noise&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;cobertura&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;jacoco&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://mariogarcia.github.io/blog/img/2017/04/grails_coverage/cobertura_reduce_class_noise.png&quot;&gt;&lt;img src=&quot;/img/2017/04/grails_coverage/cobertura_reduce_class_noise.png&quot; alt=&quot;cobertura reduce class noise&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://mariogarcia.github.io/blog/img/2017/04/grails_coverage/jacoco_reduce_class_noise.png&quot;&gt;&lt;img src=&quot;/img/2017/04/grails_coverage/jacoco_reduce_class_noise.png&quot; alt=&quot;jacoco reduce class noise&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a_simple_controller&quot;&gt;A simple controller&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a simple greetings controller. It receives a &lt;code&gt;name&lt;/code&gt; and an
&lt;code&gt;age&lt;/code&gt; from a &lt;code&gt;PersonCommand&lt;/code&gt; command object, and eventually it will
return a greetings message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Greetings controller&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package api

class GreetingsController {
    def index(PersonCommand person) {
        if (person.hasErrors()) {
            response.status = 400
            respond(message: &quot;Please check name and age&quot;)
            return
        }

        if (person.name == &apos;mario&apos;) {
            respond(message: &quot;You&apos;re awesome!&quot;)
        } else {
            respond(message: &quot;You&apos;re not so awesome ${person.name} you look older than ${person.age}&quot;)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next I&amp;#8217;ll create a simple test checking one possible successful
condition, in order to get some code coverage metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Greetings controller Spec&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;void &apos;check a successful greetings message for mario&apos;() {
    given: &apos;a proper person information&apos;
    params.name = &apos;mario&apos;
    params.age = 20

    when: &apos;invoking the controller&apos;
    controller.index()

    then: &apos;we should get the expected result&apos;
    response.json.message == &quot;You&apos;re awesome!&quot;

    and: &apos;the correct status code&apos;
    response.status == 200
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now I&amp;#8217;m running both &lt;code&gt;cobertura&lt;/code&gt; and &lt;code&gt;jacoco&lt;/code&gt; to see how covered my code is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;./gradlew codeCoverage&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 3. Naive test coverage&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;cobertura&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;jacoco&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://mariogarcia.github.io/blog/img/2017/04/grails_coverage/cobertura_greetings_first.png&quot;&gt;&lt;img src=&quot;/img/2017/04/grails_coverage/cobertura_greetings_first.png&quot; alt=&quot;cobertura greetings first&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://mariogarcia.github.io/blog/img/2017/04/grails_coverage/jacoco_greetings_first.png&quot;&gt;&lt;img src=&quot;/img/2017/04/grails_coverage/jacoco_greetings_first.png&quot; alt=&quot;jacoco greetings first&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets see the metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 4. line coverage over GreetingsController.groovy&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;_&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;line coverage&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;branch coverage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;cobertura&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;42% covered&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18% covered&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;jacoco&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;missed 4/7 &amp;#8658; covered 3/7 (42%)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;25% covered (based on instructions)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line coverage&lt;/strong&gt;: If we check both reports it seems that in both
reports line coverage remains the same. But due the fact that Jacoco
shows percentages based on instructions makes harder to get line
coverage metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Branch coverage&lt;/strong&gt;: Both differ mainly because I think Jacoco
considers instructions instead of full statements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The number in parenthesis is the number of checks done by the
coverage tool in that line
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2017/04/grails_coverage/branch-coverage-diagram.png&quot; alt=&quot;branch coverage diagram&quot; width=&quot;1320&quot; height=&quot;364&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 5. branch coverage&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;code&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;cobertura&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;jacoco&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;if (person.hasErrors())&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;50% (1/2 covered)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;50% (1/2 missed)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;response.status = 400&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;respond(errors)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0%  (0/2 covered)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0%  (2/2 missed)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;if (person.name == &apos;mario&apos;)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100% (2/2 covered)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100% (0/2 missed)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;respond(message: &quot;You&amp;#8217;re awesome&quot;)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;50%  (1/2 covered)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;50%  (1/2 missed)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;respond(message: &amp;#8230;&amp;#8203;.)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12%  (1/8 covered)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12%  (7/8 missed)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I really encourage everybody to take a look at the section:
&lt;a href=&quot;http://www.jacoco.org/jacoco/trunk/doc/counters.html&quot;&gt;Coverage
counters&lt;/a&gt; to have a hint on how Jacoco create its metrics.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All sum up 16 possible checks.  Although it seems both tools are
considering the same branches both try to show opposite views of the
same event. Whereas cobertura highlights the branches covered, jacoco
informs about the missing covered branches. What do I prefer ? As long
as I understand what they&amp;#8217;re describing I&amp;#8217;m fine with both approaches
because so far, both tools are giving me the same information about my
code coverage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Still:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One thing I&amp;#8217;m &lt;strong&gt;missing from Jacoco report&lt;/strong&gt; is that in Cobertura&amp;#8217;s
class detailed view you have a progress bar that gives you a quick
hint about the whole class. Jacoco doesn&amp;#8217;t have that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jacoco is showing all Grails generated code&lt;/strong&gt; and takes it under
consideration for the general report. That&amp;#8217;s a lot of code I don&amp;#8217;t
need to know about, and definitely I don&amp;#8217;t want to be testing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
While Cobertura gives you an easy way to omit certain code at
method level Jacoco still doesn&amp;#8217;t have that. You can find the
discussion about this at
&lt;a href=&quot;https://github.com/jacoco/jacoco/wiki/FilteringOptions&quot; class=&quot;bare&quot;&gt;https://github.com/jacoco/jacoco/wiki/FilteringOptions&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;next_step_nail_line_coverage&quot;&gt;Next step: &lt;code&gt;Nail line coverage&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I really encourage everybody to take a look at the section:
&lt;a href=&quot;https://github.com/cobertura/cobertura/wiki/Line-Coverage-Explained&quot;&gt;Line
coverage explained&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;other_resources&quot;&gt;Other resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://kyleboon.org/blog/2014/04/17/code-coverage-with-groovy/&quot;&gt;Code coveage with Groovy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://liviutudor.com/2015/05/15/cobertura-issue-with-ignoring-annotated-methods&quot;&gt;Cobertura ignoring annotated methods&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Groovy Switch Case with Closures</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2017/03/groovy-switch-case.html"/>
        <updated>2017-03-22T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2017/03/groovy-switch-case.html</id>
        <category term="groovy"/>
        <category term="jvm"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yesterday I was talking to my dear friend
&lt;a href=&quot;https://twitter.com/ilopmar&quot;&gt;@ilopmar&lt;/a&gt; about his Greach presentation
about Javaslang. It was when we were comparing Javaslang&amp;#8217;s pattern
matching module vs Groovy&amp;#8217;s switch case when my Groovy instinct made
me realise how underated Groovy&amp;#8217;s switch-case statement is, specially
how closures can be applied to Groovy&amp;#8217;s switch/case statements to
create limited pattern-matching expressions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
BTW, Don&amp;#8217;t get me wrong I think Javaslang is an A-M-A-Z-I-N-G
library, and I&amp;#8217;ve been using it in my projects since the very
beginning. This entry is just a claim to use the full potential of
Groovy&amp;#8217;s switch case statement.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me show you my point. Lets say we have the &lt;code&gt;Person&lt;/code&gt; type:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Person&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package pm

import groovy.transform.Canonical
import groovy.transform.TupleConstructor

@Canonical
@TupleConstructor
class Person {
    String name
    Integer age
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next example shows how to return whether &lt;code&gt;john&lt;/code&gt; or &lt;code&gt;carl&lt;/code&gt;
depending on the exact values of the properties contained in the
&lt;code&gt;Person&lt;/code&gt; object passed as parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Initial case&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String example0(Person person) {
    if (person.name == &apos;carl&apos; &amp;amp;&amp;amp; person.age == 22) {
        return &apos;carl&apos;
    }

    if (person.name == &apos;john&apos; &amp;amp;&amp;amp; person.age == 34) {
        return &apos;john&apos;
    }

    return &apos;nobody&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We all agree it&amp;#8217;s a very verbose syntax, and bearing in mind languages
such as Haskell or Scala have already fixed this problem using pattern
matching, why should we suffering this type of syntax ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although we don&amp;#8217;t have a Scala-like pattern matching&amp;#8230;&amp;#8203; yet, we are
clearly underestimating the power of Groovy&amp;#8217;s switch/case statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;exact_matching&quot;&gt;Exact Matching&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When trying to figure out which action to take based on properties of
the object passed as parameter, we can trust object identity by
creating an object with the same values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Exact matching&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String example1a(Person person) {
    switch (person) {
        case new Person(&apos;carl&apos;, 22): return &apos;carl&apos;
        case new Person(&apos;john&apos;, 34): return &apos;john&apos;

        default:
        return &apos;nobody&apos;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s true that, by default, we can&amp;#8217;t omit the new when creating a new object instance,
but, that&amp;#8217;s just an excuse, we can always create a method with the class name that builds
the instance&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tuple Constructor without &lt;code&gt;new&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static Person Person(String name, Integer age) {
    new Person(name, age)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And then come again with this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Exact matching&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String example1(Person person) {
    switch (person) {
        case Person(&apos;carl&apos;, 22): return &apos;carl&apos;
        case Person(&apos;john&apos;, 34): return &apos;john&apos;

        default:
        return &apos;nobody&apos;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No magic here, this is just old plain java rules: &lt;code&gt;equals&lt;/code&gt; and
&lt;code&gt;hashcode&lt;/code&gt; underneath applied to out class thanks to the &lt;code&gt;@Canonical&lt;/code&gt;
transformation. But what happens when we would like to get fancy and
match using certain rules over the object&amp;#8217;s properties ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pattern_matching_with_closures&quot;&gt;Pattern matching with closures&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the previous example we were comparing values against values, but
what if we would like to compare values against certain rules or
patterns ? Now what we want is, given a data structure (an object
here), to check if its internal values match a given set of patterns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that in mind lets get back to the &lt;code&gt;Person&lt;/code&gt; example to see if we
can apply certain patterns to the object&amp;#8217;s properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Pattern matching&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String example2(Person person) {
    switch (person) {
        case Person(endsWith(&apos;arl&apos;), gt(25)): return &apos;carl&apos; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        case Person(endsWith(&apos;hn&apos;), lt(23)):  return &apos;john&apos; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        case Person(any(), gt(60)):           return &apos;maria&apos; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

        default:
        return &apos;nobody&apos; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Matches any person whose name ends with &lt;code&gt;arl&lt;/code&gt; and having an age greater than 25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Matches any person whose name ends with &lt;code&gt;hn&lt;/code&gt; and having an age less than 23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Matches any person with any name and having an age greater than 60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In any other case return &lt;code&gt;nobody&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, How is this working ? Well actually &lt;code&gt;Person(pattern, pattern)&lt;/code&gt; is
a method returning a &lt;code&gt;Closure&lt;/code&gt; acting as a &lt;code&gt;predicate&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Person w Closure&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static Closure&amp;lt;Boolean&amp;gt; Person(Closure&amp;lt;Boolean&amp;gt; name, Closure&amp;lt;Boolean&amp;gt; age) {
    return { Person p -&amp;gt;
        name(p.name) &amp;amp;&amp;amp; age(p.age)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually it will take the person instance to evaluate and it will
execute both patterns with the same value and if both executions are
correct then case expression will succeed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me show you how I built the patterns &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, and
&lt;code&gt;endsWith&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;any&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static Closure&amp;lt;Boolean&amp;gt; any() {
    return { -&amp;gt; true }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;endsWith&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static Closure&amp;lt;Boolean&amp;gt; endsWith(String ending) {
    return { String s -&amp;gt;
        s.endsWith(ending)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;gt&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static Closure&amp;lt;Boolean&amp;gt; gt(Integer lowerBound) {
    return { Integer n -&amp;gt; n &amp;gt; lowerBound }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;lt&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static Closure&amp;lt;Boolean&amp;gt; lt(Integer upperBound) {
    return { Integer n -&amp;gt; n &amp;lt; upperBound }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;altogether&quot;&gt;Altogether&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apart from using closures you can also use classes to check whether
the instance evaluated in the &lt;code&gt;case&lt;/code&gt; case is an instance of that class
or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In next example we have the following domain classes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Mammal&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package pm

import groovy.transform.Canonical

@Canonical
class Mammal {
    String name
    Integer age
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Mammal&lt;/code&gt; uses &lt;code&gt;@Canonical&lt;/code&gt; which among other things implements
&lt;strong&gt;equals&lt;/strong&gt; and &lt;strong&gt;hashCode&lt;/strong&gt; methods. And it also uses
&lt;code&gt;@TupleConstructor&lt;/code&gt; to avoid using a constructor map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Dog&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package pm

import groovy.transform.InheritConstructors

@InheritConstructors
class Dog extends Mammal { }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dog inherits &lt;code&gt;Mammal&lt;/code&gt; constructors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Cat&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package pm

import groovy.transform.InheritConstructors

@InheritConstructors
class Cat extends Mammal { }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Cat&lt;/code&gt; also inherits &lt;code&gt;Mammal&lt;/code&gt; constructors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we would like to be able to match:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Types&lt;/strong&gt;: The evaluated parameter is of certain type (a Dog, or a Cat, or a Mammal)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt;: The evaluated parameter is a certain value (properties are equal)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Patterns&lt;/strong&gt;: The evaluated parameter follows certain pattern rules&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having that in mind I came up with the following code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Pattern matching&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static String check(Mammal mammal) {
    switch (mammal) {
        case Dog:                return &apos;I dont like dogs&apos;         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        case Cat(&apos;jonas&apos;, 4):    return &apos;jonas cat is still young&apos; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        case Cat(any(), gt(10)): return &apos;it should be rocky cat&apos;   &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        case Cat:                return &apos;at least is a cat&apos;        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

        default:
        return &apos;no idea whatsoever&apos;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Matches if it is any Dog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Matches if it is a specific Cat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Matches if it is a Cat following certain patterns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Matches if it is any Cat&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a_more_advance_pattern_matching_in_groovy&quot;&gt;A more advance pattern matching in Groovy ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I said at the beggining, Groovy&amp;#8217;s switch/case is not a full pattern
matching solution. I would point out at least the fact that it doesn&amp;#8217;t
have value destructuring, which is very useful in data structures such
as lists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The good news is that &lt;a href=&quot;https://twitter.com/bsideup&quot;&gt;Sergei Egorov&lt;/a&gt; wrote
some years ago a library bringing pattern matching to Groovy. I
strongly recommend to check it out. These are some examples of what
can be achieved with this library:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bsideup/groovy-pattern-match/blob/feature/dsl-like-matching/src/test/groovy/ru/trylogic/groovy/pattern/PatternMatchingMacroMethodsTest.groovy&quot;&gt;Examples (I)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bsideup/groovy-pattern-match/blob/master/src/test/groovy/ru/trylogic/groovy/pattern/PatternMatchingMacroMethodsTest.groovy&quot;&gt;Examples (II)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.groovy-lang.org/semantics.html#_switch_case&quot;&gt;Groovy official documentation on switch/case&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mariogarcia/blog&quot;&gt;The blog sources&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Linux LVM: Resize logical volumes (ext4)</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/11/linux_lvm_resize.html"/>
        <updated>2016-11-16T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/11/linux_lvm_resize.html</id>
        <category term="linux"/>
        <category term="lvm"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most (if not the most) important reasons you might end
using LVM is the ability to resize volumes. In this entry I&amp;#8217;ll be
covering only the task of resizing &lt;code&gt;logical volumes&lt;/code&gt; (LV) with &lt;code&gt;ext4&lt;/code&gt;
filesystems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Why &lt;code&gt;EXT4&lt;/code&gt; ? We&amp;#8217;ll because it&amp;#8217;s easy. Other filesystems require
at least two manual steps. If you don&amp;#8217;t match blocks or sizes between
these two steps, you could ruin your data.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;initial_state&quot;&gt;Initial State&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve created two &lt;code&gt;logical volumes&lt;/code&gt;: &lt;code&gt;books&lt;/code&gt; and &lt;code&gt;music&lt;/code&gt;, but it turns
out, I&amp;#8217;m running out of space in the &lt;code&gt;music&lt;/code&gt; volume whereas I still
have plenty of space in &lt;code&gt;books&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo lvs
  LV          VG        Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  books       mymedia   -wi-a-----  14.39g
  music       mymedia   -wi-a-----  14.39g&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both logical volumes belong to the &lt;code&gt;mymedia&lt;/code&gt; volume group. The problem
is that both logical volumes took all the &lt;code&gt;volume group&lt;/code&gt; space. That
forces me to shrink one volume in favor of the other. I think I&amp;#8217;ll be
giving &apos;music` 5GB from &lt;code&gt;books&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;first_umount_the_fs&quot;&gt;First umount the FS&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo umount /dev/mymedia/books&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;shrink&quot;&gt;Shrink&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s always a rule of thumb you must follow when resizing your
logical volumes, to reduce the underlying file system first. You can
do that manually and take the risk of losing your data or just use one
single command to do both resizing the filesystem and resizing the
logical volume at once with &lt;code&gt;lvresize&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Please, please, please, don&amp;#8217;t forget to add &lt;code&gt;--resizefs&lt;/code&gt; to
the following command.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo lvresize --resizefs -L-5GB /dev/mymedia/books
fsck from util-linux 2.28.2
/dev/mapper/mymedia-books: clean, 11/944704 files, 85936/3772416 blocks
resize2fs 1.43.3 (04-Sep-2016)
Resizing the filesystem on /dev/mapper/mymedia-books to 2461696 (4k) blocks.
The filesystem on /dev/mapper/mymedia-books is now 2461696 (4k) blocks long.

  Size of logical volume mymedia/books changed from 14.39 GiB (3684 extents) to 9.39 GiB (2404 extents).
  Logical volume mymedia/books successfully resized.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--resizefs&lt;/code&gt;: Use resize2fs to reduce the underlying filesystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-L-5GB&lt;/code&gt;: Reduces in 5GB the actual size.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
It&amp;#8217;s important to notice the &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; between the &lt;code&gt;L&lt;/code&gt; and
&lt;code&gt;5GB&lt;/code&gt;. If the volume is 10GB and you write &lt;code&gt;-L 5GB&lt;/code&gt; the final size of
the &lt;code&gt;logical volume&lt;/code&gt; will be &lt;code&gt;5GB whereas if you write `-L-1GB&lt;/code&gt; the
final size will be 4GB. The same goes for the &lt;code&gt;+&lt;/code&gt; (increment)
operator.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then if I list the logical volumes of &lt;code&gt;mymedia&lt;/code&gt; I should see that
&lt;code&gt;books&lt;/code&gt; now has 9.39GB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo lvs mymedia
  LV    VG      Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  books mymedia -wi-a-----  9.39g
  music mymedia -wi-a----- 14.39g&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;extend&quot;&gt;Extend&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll be using the same &lt;code&gt;lvresize&lt;/code&gt; command, but this time instead of
shrinking 5GB (&lt;code&gt;-L-5GB&lt;/code&gt;) I would like to increment
&lt;code&gt;/dev/mymedia/music&lt;/code&gt; 5GB (&lt;code&gt;-L+5GB&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo lvresize --resizefs -L+5GB /dev/mymedia/music
fsck from util-linux 2.28.2
/dev/mapper/mymedia-music: clean, 11/944704 files, 85936/3772416 blocks
  Size of logical volume mymedia/music changed from 14.39 GiB (3684 extents) to 19.39 GiB (4964 extents).
  Logical volume mymedia/music successfully resized.
resize2fs 1.43.3 (04-Sep-2016)
Resizing the filesystem on /dev/mapper/mymedia-music to 5083136 (4k) blocks.
The filesystem on /dev/mapper/mymedia-music is now 5083136 (4k) blocks long.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And in the end I will end up having the following layout:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo lvs mymedia
  LV    VG      Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  books mymedia -wi-a-----  9.39g
  music mymedia -wi-a----- 19.39g&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following references show both automatic and manual resizing of an
&lt;code&gt;ext4&lt;/code&gt; filesystem on LVM in Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.systutorials.com/124416/shrinking-a-ext4-file-system-on-lvm-in-linux/&quot;&gt;Shrink an ext4 File System on LVM in Linux&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.systutorials.com/5621/extending-a-mounted-ext4-file-system-on-lvm-in-linux/&quot;&gt;Extend a mounted ext4 file system on LVM in Linux&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Tesseract OCR</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/11/tesseract.html"/>
        <updated>2016-11-14T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/11/tesseract.html</id>
        <category term="linux"/>
        <category term="ocr"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Tesseract is an open source Optical Character Recognition (OCR)
Engine, available under the Apache 2.0 license. It can be used
directly, or (for programmers) using an API to extract typed,
handwritten or printed text from images. It supports a wide variety of
languages.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Tesseract Wiki at Github
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m keeping a docker repository with a Debian system with tesseract
and some other handy utilities installed. Unfortunately is not
available at DockerHub so if you want to use it to follow this entry
just follow these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clone repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git clone https://github.com/mariogarcia/docker.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to the tesseract directory&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;cd docker/tesseract&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Build the docker image&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;./bin/build.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run image&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker run -it mgg/tesseract&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That will open a &lt;code&gt;tmux&lt;/code&gt; session where you can execute all the commands
I&amp;#8217;m using for this entry.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To practice a little bit I&amp;#8217;m using spanish president Mariano Rajoy
public records found at &lt;a href=&quot;http://www.congreso.es&quot; class=&quot;bare&quot;&gt;http://www.congreso.es&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
All records related to congressmen official incomes, properties
and taxes are available from &lt;a href=&quot;http://www.congreso.es&quot; class=&quot;bare&quot;&gt;http://www.congreso.es&lt;/a&gt; in pdf
documents. Unfortunately the way these documents are fulfilled are
different from one another.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tesseract_doesnt_read_pdfs&quot;&gt;Tesseract doesn&amp;#8217;t read PDFs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to enable Tesseract to read PDF documents you have to convert
them to images. The easiest way to do so is by using &lt;code&gt;imagemagick&lt;/code&gt;. You
should make sure to convert pdf to image with the best quality you could:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;convert -density 290 image.pdf image.png&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where XX is &amp;gt;72 such as 288 (which is 4x). If the resulting image is
too big, then you can do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;convert -density 288 image.pdf -resize 25% image.png&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where &lt;code&gt;resize&lt;/code&gt;=25% or larger when &lt;code&gt;density&lt;/code&gt;=288&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ls -l
total 288
-rw-r--r-- 1 dev dev 196746 Nov 13 21:49 document.pdf
-rw-r--r-- 1 dev dev  17657 Nov 13 22:01 output-0.png
-rw-r--r-- 1 dev dev  17003 Nov 13 22:01 output-1.png
-rw-r--r-- 1 dev dev  16590 Nov 13 22:01 output-2.png
-rw-r--r-- 1 dev dev   9819 Nov 13 22:01 output-3.png
-rw-r--r-- 1 dev dev  10569 Nov 13 22:01 output-4.png&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There is a very wellknown script to improve converted text image
called
&lt;a href=&quot;http://www.fmwconcepts.com/imagemagick/textcleaner/index.php&quot;&gt;TEXTCLEANER&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;first_attempt&quot;&gt;First attempt&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m getting the first output to get document headers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;tesseract output-0.png header&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That would create a &lt;code&gt;header.txt&lt;/code&gt; output with all the recognized
data. Unless you&amp;#8217;re processing a book, most of the form-like documents
could end up as a non-sense result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;cat header.txt

51





C.DTP 319 07/07/2016 10





CORTES GENERALES XII LEGISLATURA
DECLARACIDN1 DE BIENES Y RENTAS DE DIPUTADOS Y SENADORES2

Nombre y apellidos
MARIANO RAJOY BREY

Estado civil Régimen econémico matrimonial

CASADO GANANCIALES
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Still you can use this processing for indexing purposes. However if
you happen to need to process a set of documents with certain
structure you can make use of a &lt;code&gt;uzn&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;uzn&quot;&gt;UZN&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
uzn is a simple text file format for describing sections of a scanned
image. The migneuzn tool outputs in this format for its segmentation.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; &lt;a href=&quot;https://github.com/OpenGreekAndLatin/greek-dev/wiki/uzn-format&quot; class=&quot;bare&quot;&gt;https://github.com/OpenGreekAndLatin/greek-dev/wiki/uzn-format&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this example I&amp;#8217;m using a UZN file to get only the first output
headers in a more guided way. I will tell &lt;code&gt;tesseract&lt;/code&gt; where to get
every field I&amp;#8217;m interested in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;uzn&lt;/code&gt; file is like a &lt;code&gt;csv&lt;/code&gt; file with the following fields
separated by tab/spaces:x, y, width, height, tag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;output-0.uzn&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;140 302 600 66 name
143 416 454 66 civil state
776 614 824 52 city&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to make tesseract to be aware of the uzn file you have to
make the uzn file to have the same name of the processed file and also
use a certain segmentation mode (-psm 4):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;tesseract output-0.png result_with_uzn -psm 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the content of &lt;code&gt;result_with_uzn.txt&lt;/code&gt; is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;MARIANO RAJOY BREY

CASADO

MADRID &quot;&quot;n&quot;—Tv…- r—- … ñ&quot; “ “&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not bad, but I still need a little bit of tuning to get Tesseract to
recognize these fields without the current noise, but hey this is just
a preliminary research.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My overall impression is that Tesseract is a great project but
requires from you a deeper knowledge before getting acceptable
results. Also much of the processing has to do with image processing
before even using Tesseract: contrast, bluring, quality&amp;#8230;&amp;#8203; I will
problably continuing looking into it to know more about this
interesting tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tesseract wiki: &lt;a href=&quot;https://github.com/tesseract-ocr/tesseract/wiki&quot; class=&quot;bare&quot;&gt;https://github.com/tesseract-ocr/tesseract/wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Linux LVM: Getting started (ext4)</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/11/linux_lvm_getting.html"/>
        <updated>2016-11-13T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/11/linux_lvm_getting.html</id>
        <category term="linux"/>
        <category term="lvm"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
In Linux, Logical Volume Manager (LVM) is a device mapper target that
provides logical volume management for the Linux kernel. Most modern
Linux distributions are LVM-aware to the point of being able to have
their root file systems on a logical volume.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Wikipedia
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create&quot;&gt;Create&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LVM has a lot of features, but for now, I&amp;#8217;ll be learning the basics of
LVM: creating &lt;code&gt;logical volumes&lt;/code&gt;. At the end of this entry I&amp;#8217;ll have
created two logical volumes: &lt;strong&gt;books&lt;/strong&gt; and &lt;strong&gt;videos&lt;/strong&gt;. In order to to that
I have to follow these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/2016/11/linux_lvm/lvm-ditaa-diagram.png&quot; alt=&quot;lvm ditaa diagram&quot; width=&quot;420&quot; height=&quot;294&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;partition&lt;/code&gt; in the physical drive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;physical volume&lt;/code&gt; (PV)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;volume group&lt;/code&gt; (VG)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;logical volume&lt;/code&gt; (LV)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Because I don&amp;#8217;t want to lose any important data from my
hard drive, I will be using an empty SD card while learning about
LVM. USBs or SD cards are great when learning about file systems, you
always have one at hand, and if you do something wrong, you won&amp;#8217;t be
ending installing your OS again :P
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create_a_partition&quot;&gt;Create a partition&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve a new SD card. Let&amp;#8217;s see where it&amp;#8217;s located within the system:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo fdisk -l
...
Disk /dev/mmcblk0: 28.8 GiB, 30908350464 bytes, 60367872 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x00000000
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So it is located at &lt;code&gt;/dev/mmcblk0&lt;/code&gt;, perfect. Now I would like to
create a primary partition taking the entire space. I&amp;#8217;m sticking to
&lt;code&gt;fdisk&lt;/code&gt; on this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo fdisk /dev/mmcblk0

Welcome to fdisk (util-linux 2.28.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.


Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p):

Using default response p.
Partition number (1-4, default 1):
First sector (2048-60367871, default 2048):
Last sector, +sectors or +size{K,M,G,T,P} (2048-60367871, default 60367871):

Created a new partition 1 of type &apos;Linux&apos; and of size 28.8 GiB.

Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now if I run &lt;code&gt;sudo fdisk -l&lt;/code&gt; again I should see the partition I&amp;#8217;ve
just created:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo fdisk -l
...
Disk /dev/mmcblk0: 28.8 GiB, 30908350464 bytes, 60367872 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x00000000

Device         Boot Start      End  Sectors  Size Id Type
/dev/mmcblk0p1       2048 60367871 60365824 28.8G 83 Linux
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok at this point we&amp;#8217;ve got our pillars, so to speak. Now we can start
building our LVM structure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;initialize_a_physical_volume&quot;&gt;Initialize a physical volume&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to use a given partition as a &lt;code&gt;physical volume&lt;/code&gt; you have to
initialize it first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo pvcreate /dev/mmcblk0p1
 Physical volume &quot;/dev/mmcblk0p1&quot; successfully created.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will create a volume group descriptor at the start of the
&lt;code&gt;/dev/mmcblk0p1&lt;/code&gt;. You can check your new volume executing &lt;code&gt;pvdisplay&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo pvdisplay
...
  &quot;/dev/mmcblk0p1&quot; is a new physical volume of &quot;28.78 GiB&quot;
  --- NEW Physical volume ---
  PV Name               /dev/mmcblk0p1
  VG Name
  PV Size               28.78 GiB
  Allocatable           NO
  PE Size               0
  Total PE              0
  Free PE               0
  Allocated PE          0
  PV UUID               NgHQAR-U92l-9GXv-cXcV-oCHL-pp0Y-MDA4b1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create_a_volume_group&quot;&gt;Create a volume group&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Several physical volumes can be grouped into one single volume
group. In this example I&amp;#8217;m only doing a 1-1 relationship between a
physical volume and a volume group.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo vgcreate mymedia /dev/mmcblk0p1
 Volume group &quot;mymedia&quot; successfully created&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make sure your new group has been created, let&amp;#8217;s list your system&amp;#8217;s
&lt;code&gt;volume groups&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo vgs
 VG        #PV #LV #SN Attr   VSize   VFree
  MainVG      1   3   0 wz--n- 238.22g     0
  mymedia     1   0   0 wz--n-  28.78g 28.78g&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create_logical_volumes&quot;&gt;Create logical volumes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can now create two &lt;code&gt;logical volumes&lt;/code&gt;: &lt;code&gt;books&lt;/code&gt; and &lt;code&gt;music&lt;/code&gt;. I&amp;#8217;ll
give half of the space each. First &lt;code&gt;books&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo lvcreate -l 50%VG -n books mymedia
WARNING: dos signature detected on /dev/mymedia/books at offset 510. Wipe it? [y/n]: y
  Wiping dos signature on /dev/mymedia/books.
  Logical volume &quot;books&quot; created.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then &lt;code&gt;music&lt;/code&gt; will take the rest available space for &lt;code&gt;mymedia&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo lvcreate -l 100%FREE -n music mymedia
 Logical volume &quot;music&quot; created.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual I&amp;#8217;m checking that both &lt;code&gt;logical volumes&lt;/code&gt; have been created by
listing available logical volumes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo lvs
  LV          VG        Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  books       mymedia   -wi-a-----  14.39g
  music       mymedia   -wi-a-----  14.39g&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nice! Both have exactly the same size.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Here I&amp;#8217;ve been playing with percentages, but the &lt;code&gt;lvcreate&lt;/code&gt;
command allows you, for example, to specify MB, GB. You can find some
examples
&lt;a href=&quot;https://www.centos.org/docs/5/html/Cluster_Logical_Volume_Manager/LV_create.html&quot;&gt;here&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;use_logical_volumes&quot;&gt;Use logical volumes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we&amp;#8217;ve created a logical volume, the only thing remaining is to
format our logical volumes as &lt;code&gt;ext4&lt;/code&gt; filesystems and use them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Why &lt;code&gt;ext4&lt;/code&gt; ? Well because once I wanted to see how shrink/extend
works right after this entry. And the easiest way to do it is by
formatting your &lt;code&gt;logical volume&lt;/code&gt; as &lt;code&gt;ext4&lt;/code&gt;. Other filesystems may
require extra manual steps. But of course, if you&amp;#8217;re sure about the
type of filesystem you want, go ahead!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo mkfs.ext4 /dev/mymedia/books

mke2fs 1.43.3 (04-Sep-2016)
Creating filesystem with 3772416 4k blocks and 944704 inodes
Filesystem UUID: a6ae793c-a735-4bae-8941-ddab3c680398
Superblock backups stored on blocks:
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208

Allocating group tables: done
Writing inode tables: done
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information:
done&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;user@computer&amp;gt; sudo mkfs.ext4 /dev/mymedia/music
mke2fs 1.43.3 (04-Sep-2016)
....&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you should be able to mount them and start using them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://tldp.org/HOWTO/LVM-HOWTO/index.html&quot;&gt;The Linux Documentation Project: LVM How To&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/High_Availability_Add-On_Administration/s1-LVMsetupnfs-HAAA.html&quot;&gt;Red Hat: CONFIGURING AN LVM VOLUME WITH AN EXT4 FILE SYSTEM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Generate pdf slides from reveal.js html</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/10/revealjs.html"/>
        <updated>2016-10-03T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/10/revealjs.html</id>
        <category term="reveal.js"/>
        <category term="slides"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A year ago I started using &lt;a href=&quot;http://lab.hakim.se/reveal-js/#/&quot;&gt;Reveal JS&lt;/a&gt;
for my presentations. It&amp;#8217;s really cool to use asciidoctor and gradle
to create my presentations and change them &lt;code&gt;on-the-fly&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the_problem&quot;&gt;The problem&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well it&amp;#8217;s not really a problem. But once a conference ends organizer
want you to send him/her your slides. Because &lt;strong&gt;reveal.js&lt;/strong&gt; is just
html + js, it doesn&amp;#8217;t qualify as something to send them. To do so I
have to convert them first to pdf. And that&amp;#8217;s why I need &lt;code&gt;decktape&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;decktape&quot;&gt;Decktape&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DeckTape is a high-quality PDF exporter for HTML5 presentation
frameworks. You can find the project at
&lt;a href=&quot;https://github.com/astefanutti/decktape&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Docker image&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nowadays every time I can I use docker containers. Instead of
following a given installation guide, I can have it all just pulling
the docker image from docker hub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker pull astefanutti/decktape&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Execute docker image&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you&amp;#8217;ve executed &lt;code&gt;asciidoctor&lt;/code&gt; task go to your
&lt;code&gt;build/asciidoc/revealjs/&lt;/code&gt; folder (where you should find the
&lt;code&gt;index.html&lt;/code&gt; file` and execute the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker run --rm \
       -v `pwd`:/home/user \
       astefanutti/decktape /home/user/index.html /home/user/slides.pdf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That will create a file &lt;code&gt;slides.pdf&lt;/code&gt; in the same folder. Anyway there
are plenty of other options. For further information check out the
&lt;a href=&quot;https://github.com/astefanutti/decktape&quot;&gt;project&amp;#8217;s docker hub page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Frege and parallel computation</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/10/frege_async.html"/>
        <updated>2016-10-02T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/10/frege_async.html</id>
        <category term="frege"/>
        <category term="parallel"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While attending last &lt;a href=&quot;https://www.lambda.world&quot;&gt;Lambda World&lt;/a&gt; one of the
Haskell talks mentioned multithreading programming with Haskell. I
immediately checked out what Frege had implemented upfront. This is
what I&amp;#8217;ve found so far.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;creating_a_thread&quot;&gt;Creating a &lt;code&gt;Thread&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest way of execute a given &lt;code&gt;IO&lt;/code&gt; computation parallel to the
main execution thread is creating a new thread using the &lt;code&gt;forkOS&lt;/code&gt;
function. First thing we have to keep in mind is that a new thread
computation can have side effects, and therefore it has to be declared
as an &lt;code&gt;IO&lt;/code&gt; computation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;forkOS&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;forkOS :: IO () -&amp;gt; IO Thread&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, what &lt;code&gt;forkOS&lt;/code&gt; does ?: it first receives a computation &lt;code&gt;IO ()&lt;/code&gt; as
parameter, then creates a new thread and executes the computation in
the new thread and finally, returns the new thread: &lt;code&gt;IO Thread&lt;/code&gt; Lets
see and example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;New Thread&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;executeInNewThread :: IO () -&amp;gt; IO ()
executeInNewThread action = do
  thread &amp;lt;- forkOS action &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  name   &amp;lt;- thread.getName &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  Thread.sleep 2000
  println (&quot;Thread name: &quot; ++ name)

doSomething :: IO ()
doSomething = do
  println &quot;Launching a new thread&quot;
  executeInNewThread ioAction
  println &quot;Main process continues&quot;
  where ioAction = (println . sum) [1..200]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Using &lt;code&gt;forkOS&lt;/code&gt; to launch a given &lt;code&gt;IO ()&lt;/code&gt; action in a new thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Because &lt;code&gt;forkOS&lt;/code&gt; returns the launched thread, we can do something
like getting some information about the thread&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The output of this project should be something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;output&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;Launching a new thread
Main process continues
Thread name: xxx&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;using_an_executorservice&quot;&gt;Using an &lt;code&gt;ExecutorService&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating threads directly, you would be wasting a lot of system
resources. A better way of creating new threads is creating threads
through an &lt;code&gt;ExecutorService&lt;/code&gt;. The &lt;code&gt;ExecutorService&lt;/code&gt; keeps a thread
pool and therefore threads could be reused. The Frege API provides
&lt;code&gt;forkIO&lt;/code&gt; function to execute a given computation in a new thread
coming from an ExecutorService. The signature is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Using an ExecutorService&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;forkIO :: IO () -&amp;gt; IO ()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is an example of executing the previous computation using an
executor service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Using an ExecutorService&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;executeFromThreadPool :: IO () -&amp;gt; IO ()
executeFromThreadPool action = do
  forkIO action &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  println &quot;No information of thread is provided&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, as it is mentioned in the documentation, this is not
suitable for not-ending processes, and the executor service may manage
a fixed small number of concurrent threads only.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also it would be very hard to coordinate results from several threads,
so I would only recommend it for cases when you would like to launch
unrelated tasks using a thread pool. If you wanted to coordinate
computations, then I would use &lt;code&gt;async&lt;/code&gt; or make use of &lt;code&gt;MVar&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;using_mvar&quot;&gt;Using &lt;code&gt;MVar&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although neither &lt;code&gt;forkIO&lt;/code&gt; nor &lt;code&gt;forkOS&lt;/code&gt; return anything, the primitive
&lt;code&gt;MVar&lt;/code&gt; exposes functions to store and retrieve values in a
multithreaded environment. I&amp;#8217;m not going to list all of them here, for
further details just go to
&lt;a href=&quot;https://github.com/Frege/frege/blob/master/frege/control/Concurrent.fr&quot;&gt;frege.control.Concurrent&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My example is just launching to computations and combine them to give
a result. First computation calculates a number and sleeps and the
second one just return a value. Eventually both values will be added
up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;MVar&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;useMVar = do
   mvar1 &amp;lt;- newEmptyMVar       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
   mvar2 &amp;lt;- newEmptyMVar       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
   forkIO do                   &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
     mvar1.put $ sum [2,3]     &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
     Thread.sleep 5000
     println &quot;end computation1&quot;
   forkIO do                   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
     mvar2.put 10              &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
     println &quot;end computation2&quot;
   res1 &amp;lt;- mvar1.take          &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
   res2 &amp;lt;- mvar2.take          &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
   return $ res1 + res2        &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;main&lt;/strong&gt;: Creating &lt;code&gt;mvar1&lt;/code&gt; to handle values from first computation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;main&lt;/strong&gt;: Creating &lt;code&gt;mvar2&lt;/code&gt; to handle values from second computation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;thr1&lt;/strong&gt;: Launching first computation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;thr1&lt;/strong&gt;: setting mvar1 with computation result&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;thr2&lt;/strong&gt;: Launching second computation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;thr2&lt;/strong&gt;: setting mvar2 with computation result&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;main&lt;/strong&gt;: blocking until getting a value from mvar1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;main&lt;/strong&gt;: blocking until getting a value from mvar2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;main&lt;/strong&gt;: return result from&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Please notice that when executing &lt;code&gt;mvarX.take&lt;/code&gt; it blocks
only until a value has been provided, then it will continue. That
means that when the first computation begins to sleep meanwhile &lt;code&gt;res1
+ res2&lt;/code&gt; is being resolved.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find some good examples of using &lt;code&gt;MVar&lt;/code&gt; with &lt;code&gt;forkOS&lt;/code&gt; and
&lt;code&gt;forkIO&lt;/code&gt;
&lt;a href=&quot;https://github.com/Frege/frege/blob/master/examples/Concurrent.fr&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;make_it_easier_with_async&quot;&gt;Make it easier with &lt;code&gt;async&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far it seemed we were getting too low level in order to launch a
computation in a new thread. Something like coordinating several
computations in different threads seemed a daunting task and very
difficult to reason about. The function &lt;code&gt;async&lt;/code&gt; enables the execution
of an &lt;code&gt;IO a&lt;/code&gt; computation and returns a pointer to the on-going
computation. Once you get the pointer you can choose whether to block
until getting the result, or start new computations in parallel. This
is the signature of &lt;code&gt;async&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;async&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;async :: IO a -&amp;gt; IO (MVar (Exception | a))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following example we are launching two computations, the first
one sleeps 2 seconds and then continues whereas the quick operation
just return a given value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Operations&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;slowerOp :: IO Int
slowerOp = do
  Thread.sleep(2000)
  println &quot;Returning first op&quot;
  return 20

quickOp :: IO Int
quickOp = do
  println &quot;Returning second op&quot;
  return 40&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We would like to launch both operations in parallel , eventually
extract each computation&amp;#8217;s value, and finally add them up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Execute operations asynchronously&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;divideAndConquer = do
  slowerOpRef &amp;lt;- async slowerOp &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  quickOpRef  &amp;lt;- async quickOp &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  xs          &amp;lt;- sequence $ map extractValue [slowerOpRef, quickOpRef] &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  return $ sum xs &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Launch slow operation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Launch quick operation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Block until getting each computation&amp;#8217;s values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Sum results&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to block and get the value returned by the operation I&amp;#8217;m
using the &lt;code&gt;take&lt;/code&gt; function from the
&lt;a href=&quot;https://github.com/Frege/frege/blob/master/frege/control/Concurrent.fr&quot;&gt;frege.control.Concurrent&lt;/a&gt;
module. Because the result of calling &lt;code&gt;take&lt;/code&gt; returns an &lt;code&gt;MVar
(Exception | a)&lt;/code&gt;, meaning an &lt;code&gt;MVar&lt;/code&gt; of an &lt;code&gt;Either Exception a&lt;/code&gt;, I need
to use a &lt;code&gt;case&lt;/code&gt; expression.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Extract&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;extractValue :: MVar (Exception | Int) -&amp;gt; IO Int
extractValue var = do
  value &amp;lt;- var.take &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  case value of
    Left  _ -&amp;gt; return 0
    Right x -&amp;gt; return x&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use &lt;code&gt;take&lt;/code&gt; to extract the value wrapped in &lt;code&gt;MVar&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve written a couple of alternatives to create a reusable
&lt;code&gt;extractValue&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Extract alternatives&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;extractValue2 :: MVar (Exception | a) -&amp;gt; a -&amp;gt; IO a
extractValue2 mv defaultValue = do
  value &amp;lt;- mv.take
  return $ either (\_ -&amp;gt; defaultValue) id value

extractValue3 :: MVar (Exception | a) -&amp;gt; a -&amp;gt; IO a
extractValue3 mv defaultValue = do
  value &amp;lt;- mv.take
  case value of
    Left  _ -&amp;gt; return defaultValue
    Right x -&amp;gt; return x&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Frege and QuickCheck: Combine properties</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/05/qc_frege_03_combining_properties.html"/>
        <updated>2016-05-25T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/05/qc_frege_03_combining_properties.html</id>
        <category term="frege"/>
        <category term="testing"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes our function should follow more than one property at the
same time. How can I check more than one property in a given
specification?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;combining_properties&quot;&gt;Combining properties&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following example we&amp;#8217;re pretending to be a small financial
institution that lends money.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we have a &lt;code&gt;Loan&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Loan&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;data Risk = PENDING | NORMAL | RISKY | REJECTED

derive Eq   Risk
derive Show Risk
derive Enum Risk

data Loan = Loan { name :: Maybe String , amount :: Double, risk :: Risk }

derive Show Loan&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is an example, please don&amp;#8217;t use this data as reference for
any financial development :P
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need to build a function to process an incoming loan. At this point
we only know which are the properties to reject a loan. It will be
rejected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;When it has a negative amount&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;When it goes outside the company defined boundaries&lt;/code&gt; (min: 0, max:
100000)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;When it has no name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets define these properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Min property&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;rejectNegative :: Loan -&amp;gt; Bool
rejectNegative loan = if isNegative
                      then statusResult == Risk.REJECTED
                      else true
  where isNegative   = loan.amount &amp;lt; 0
        loanResult   = calculateRisk loan
        statusResult = loanResult.risk&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Max property&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;rejectBeyondMax :: Loan -&amp;gt; Bool
rejectBeyondMax loan = if isBeyondMax
                       then statusResult == Risk.REJECTED
                       else true
  where isBeyondMax  = loan.amount &amp;gt; 100_000
        loanResult   = calculateRisk loan
        statusResult = loanResult.risk&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Name property&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;rejectAnonymous :: Loan -&amp;gt; Bool
rejectAnonymous loan = if isAnonymous
                       then statusResult == Risk.REJECTED
                       else true
  where isAnonymous  = loan.name == Nothing
        loanResult   = calculateRisk loan
        statusResult = loanResult.risk&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets see how we&amp;#8217;ve defined our function with these requirements in
mind:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Implementation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;calculateAmountRisk :: Loan -&amp;gt; Loan &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
calculateAmountRisk loan
  | inRange (1,9999) loan.amount         = loan.{ risk = NORMAL }
  | inRange (10_000,100_000) loan.amount = loan.{ risk = RISKY }
  | otherwise                            = loan.{ risk = REJECTED }

calculateAnonymousRisk :: Loan -&amp;gt; Loan &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
calculateAnonymousRisk loan = case loan of
  Loan Nothing _ _ -&amp;gt; loan.{ risk = REJECTED }
  _                -&amp;gt; loan

calculateRisk :: Loan -&amp;gt; Loan &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
calculateRisk loan = (calculateAnonymousRisk . calculateAmountRisk) loan&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Function to calculate risk based on the &lt;code&gt;loan ammount&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Function to calculate risk based on the &lt;code&gt;loan name&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Function &lt;code&gt;combining previous two&lt;/code&gt; functions&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Please notice I&amp;#8217;m not mutating the data structure when
doing &lt;code&gt;loan.{ risk = Risk.REJECTED}&lt;/code&gt;. In this case, changing a field
means copying the data structure and setting the new value in the new
copy.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, lets see if the function holds for these properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Testing properties&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;checkName = property rejectAnonymous
checkMin  = property rejectNegative
checkMax  = property rejectBeyondMax&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;quickCheck result&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;qc.CombineCheck.checkName: +++ OK, passed 100 tests
qc.CombineCheck.checkMin: +++ OK, passed 100 tests
qc.CombineCheck.checkMax: +++ OK, passed 100 tests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far we have tested our properties isolated, but in the real world I
would make sure that a given loan passes those properties all at
once. How do I do that ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well there&amp;#8217;s a function called &lt;code&gt;conjoin&lt;/code&gt; which takes care of it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Check several properties at once&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;calculateRiskCheck = conjoin [rejectNegative, rejectBeyondMax, rejectAnonymous]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Name property check&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;qc.CombineCheck.calculateRiskCheck: +++ OK, passed 100 tests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now I&amp;#8217;m sure the loan passes if all properties over a loan pass the
test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also use the conjuntion &lt;code&gt;infix&lt;/code&gt; function &lt;code&gt;.&amp;amp;&amp;amp;.&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Check several properties at once&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;calculateRiskCheck2 = rejectNegative .&amp;amp;&amp;amp;.rejectBeyondMax .&amp;amp;&amp;amp;. rejectAnonymous&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Frege and QuickCheck: Create properties</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/05/qc_frege_02_creating_properties.html"/>
        <updated>2016-05-18T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/05/qc_frege_02_creating_properties.html</id>
        <category term="frege"/>
        <category term="testing"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After going through the main parts of property base testing with
&lt;em&gt;QuickCheck&lt;/em&gt; and &lt;em&gt;Frege&lt;/em&gt; now I&amp;#8217;m focusing only in
&lt;strong&gt;properties&lt;/strong&gt;. Lets recall what was a property in the context of
&lt;em&gt;QuickCheck&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what_is_a_property&quot;&gt;What is a property&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A property is an executable specification meaning a function that
holds for a set of values using the program (function or set of
functions) you want to test.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create_a_simple_property&quot;&gt;Create a simple property&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a rule of thumb the easiest way of creating a property is to
create a function that returns a Bool. A function retuning a Bool
can be treated as a &lt;code&gt;Testable&lt;/code&gt; value. Then use the &lt;code&gt;Testable&lt;/code&gt; function
as argument of the &lt;code&gt;property&lt;/code&gt; function, to get a &lt;code&gt;Property&lt;/code&gt; value and
leave &lt;em&gt;QuickCheck&lt;/em&gt; to do the rest. In summary:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a function that returns &lt;code&gt;Bool&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoke &lt;code&gt;property&lt;/code&gt; passing the previous function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoke &lt;em&gt;QuickCheck&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets create a simple function. This function has certain properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Should double the absolute value of the number passed as argument if
that number is greater than 0 and less or equals than 10&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Otherwise returns 0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I&amp;#8217;m using &lt;code&gt;frege-gradle-plugin&lt;/code&gt; for these examples, actually I&amp;#8217;m
executing &lt;code&gt;./gradlew fregeQuickCheck --t&lt;/code&gt; which executes and waits
until the source code changes to launch the tests again. Very useful
while developing.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the specification we have to respect:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Specification&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;alwaysPositive :: Int -&amp;gt; Bool
alwaysPositive    x   = badImplementation x &amp;gt;= 0

alwaysPositiveCheck   = property (alwaysPositive)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets try a first version of our function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Bad Implementation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;badImplementation :: Int -&amp;gt; Int
badImplementation    x    = x * 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And now execute &lt;em&gt;QuickCheck&lt;/em&gt; to see if this first version holds:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Output&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;c.BasicsCheck.alwaysPositiveBadCheck: *** Failed!                                                                                                                                             (after 7 tests and 2 shrinks):
Falsifiable
-1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Error as expected. So just using a negative number as argument the
function won&amp;#8217;t hold. Ok, we should take the absolute number and then
multiply by two.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Good Implementation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;goodImplementation :: Int -&amp;gt; Int
goodImplementation    x
  | x &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt;= limit = x * 2
  | otherwise       = 0
  where limit = 10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Specification&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;alwaysPositive :: Int -&amp;gt; Bool
alwaysPositive    x   = goodImplementation x &amp;gt;= 0

alwaysPositiveCheck   = property (alwaysPositive)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Output&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;c.BasicsCheck.alwaysPositiveCheck: +++ OK, passed 100 tests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Perfect!! Ok this was a good warm up exercise, lets do something more
complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Testable&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you check the &lt;code&gt;property&lt;/code&gt; function type in the &lt;strong&gt;frege repl&lt;/strong&gt; you&amp;#8217;ll
notice that it receives a value of type &lt;code&gt;Testable&lt;/code&gt; and returns a
&lt;code&gt;Property&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt; defines an instance of &lt;code&gt;Testable&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Checking property function type&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;frege&amp;gt; import Test.QuickCheck
...
frege&amp;gt; :t property
frege&amp;gt; Testable prop =&amp;gt; prop -&amp;gt; Property&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Frege and QuickCheck: Intro</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/05/qc_frege_01_intro.html"/>
        <updated>2016-05-15T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/05/qc_frege_01_intro.html</id>
        <category term="frege"/>
        <category term="testing"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what_is_quickcheck&quot;&gt;What is QuickCheck ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;QuickCheck&lt;/strong&gt; is a property based testing library capable of
generating values for those properties in order to find out if that
property holds for the domain problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;QuickCheck was born from a paper by &lt;em&gt;Koen Claessen&lt;/em&gt; and &lt;em&gt;John
Hughes&lt;/em&gt;. They created &lt;em&gt;QuickCheck&lt;/em&gt; to look for a different way of
testing. They observed that around the 50% of the software development
was dedicated to testing. That was a huge cost and mostly due to the
fact that it was done almost manually. The goal was to reduce that
percentage by automating testing. How they planned to do so ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to understand how it
works and how to use it some concepts must be introduced first:
&lt;code&gt;Property&lt;/code&gt;, &lt;code&gt;Generator&lt;/code&gt;, &lt;code&gt;Output Feedback&lt;/code&gt;, and &lt;code&gt;Shrinking&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
BTW The &lt;em&gt;QuickCheck&lt;/em&gt; paper is also a good source to start. You
can find the QuickCheck paper at
&lt;a href=&quot;http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf&quot; class=&quot;bare&quot;&gt;http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;properties&quot;&gt;Properties&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is a property? After reviewing some definitions out there I
really liked this one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Properties are essentially executable specifications that can be
universally quantified over. They specify what you expect of your
program and can be executed against the program to ensure that it
conforms to the spec
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; &lt;a href=&quot;http://www.stuartgunter.org/intro-to-quickcheck/&quot; class=&quot;bare&quot;&gt;http://www.stuartgunter.org/intro-to-quickcheck/&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;executable specification&lt;/code&gt; means a function that holds for a set
of values using the program (function or set of functions) you want to
test.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets see a basic example. When adding up two numbers &lt;code&gt;commutativity&lt;/code&gt;
must hold: &lt;em&gt;a binary operation is commutative if changing the order
of the operands does not change the result&lt;/em&gt;. That means that if the
&lt;strong&gt;sum&lt;/strong&gt; function has been implemented property it should follow the
&lt;strong&gt;commutativity&lt;/strong&gt; property.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;commutativity&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;propertyOne :: [Int] -&amp;gt; Bool
propertyOne xs = sum xs == (sum . reverse) xs

commutativity = property (propertyOne)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Think of this example as if the &lt;code&gt;commutativity&lt;/code&gt; rule had one and
only property that must hold
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Executing &lt;code&gt;fregeQuickCheck&lt;/code&gt; will show the following output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;quickCheck output&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;qc.BasicsCheck.commutativity: +++ OK, passed 100 tests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
to execute quickCheck from the console go to the project folder
and execute &lt;code&gt;./gradlew fregeQuickCheck&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A 100 tests ? Wow, how is that ? By default, &lt;em&gt;QuickCheck&lt;/em&gt; &lt;code&gt;generates&lt;/code&gt; a
100 sets of values for the specification under test. This is a huge
difference between what we had in previous testing approaches. We
don&amp;#8217;t generate a given set of values, values are generated for us
depending on the types and the properties defined. &lt;strong&gt;That makes tests
cleaner and easier to reason about&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;em&gt;property&lt;/em&gt; in &lt;em&gt;QuickCheck&lt;/em&gt; is a value of type &lt;code&gt;Property&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a rule of thumb The easiest way of creating a property is to create
a function that returns a &lt;code&gt;Bool&lt;/code&gt; (like the propertyOne function). A
function retuning a Bool can be treated as a &lt;code&gt;Testable&lt;/code&gt; value. Then
use the &lt;code&gt;Testable&lt;/code&gt; function as argument to the &lt;code&gt;property&lt;/code&gt; function to
get a &lt;code&gt;Property&lt;/code&gt; value and leave &lt;em&gt;QuickCheck&lt;/em&gt; to do the rest. In
summary:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a function that returns &lt;code&gt;Bool&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoke &lt;code&gt;property&lt;/code&gt; passing the previous function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoke &lt;em&gt;QuickCheck&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you check the &lt;code&gt;property&lt;/code&gt; function type in the &lt;strong&gt;frege repl&lt;/strong&gt; you&amp;#8217;ll
notice that it receives a value of type &lt;code&gt;Testable&lt;/code&gt; and returns a
&lt;code&gt;Property&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt; defines an instance of &lt;code&gt;Testable&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Checking property function type&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;frege&amp;gt; import Test.QuickCheck
...
frege&amp;gt; :t property
frege&amp;gt; Testable prop =&amp;gt; prop -&amp;gt; Property&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
To open &lt;code&gt;fregeRepl&lt;/code&gt; in to load this project examples, go to the
project folder and execute &lt;code&gt;./gradlew -q fregeRepl&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;generators&quot;&gt;Generators&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default &lt;em&gt;QuickCheck&lt;/em&gt; knows how to generate values for the most used
types: Int, Double, String&amp;#8230;&amp;#8203; That&amp;#8217;s perfect, but if you create a more
complex type, or you would like to control the way values are
generated, Frege will complain because it won&amp;#8217;t be able to &lt;code&gt;generate&lt;/code&gt;
new values of that type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets say we are sure a function will only be receiving values from 0
to 100 so it makes no sense to use any other value range. We&amp;#8217;ll be
restricting the input values like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Controlling generation&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;propertyTwo :: [Int] -&amp;gt; Bool &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
propertyTwo xs = sum xs == (sum . reverse) xs

dataset = listOf $ choose (0, 100) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
rangeRestriction = forAll dataset propertyTwo &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Defining the property&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define the type of values &lt;em&gt;QuickCheck&lt;/em&gt; should generate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define the executable specification&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this simple example we&amp;#8217;ve built our own generator of list of
numbers between 0 and 100. Easy isn&amp;#8217;t it ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;output_feedback&quot;&gt;Output feedback&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes we would like to see some information while tests are
executed. There&amp;#8217;re functions to help you printing out useful
information about the execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following example we&amp;#8217;re using &lt;code&gt;collect&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Feedback&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;propertyThree :: [Int] -&amp;gt; Property &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
propertyThree xs = collect (length xs) $ sum xs == (sum . reverse) xs  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

rangeRestrictionWithFeedback = forAll dataset propertyThree &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Notice now it returns a &lt;code&gt;Property&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;collect&lt;/code&gt; function shows information about the data under tests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The way we invoke the specification is the same as before.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The execution shows the length of the list and what percentage of test
cases were executed with lists of this length.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;collect output&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;qc.BasicsCheck.rangeRestrictionWithFeedback: +++ OK, passed 100 tests:
 8% 0
 7% 6
 6% 4
 6% 16
 5% 1
 4% 49
 3% 7
 3% 58
 3% 43
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Taking a look at this output sample, first thing came to mind is that
is looks a very fair distribution. First column represent the test
case in the overall suite and the second the number of elements used
in current test case. For instance &lt;code&gt;8% 0&lt;/code&gt; means 8% of the time
&lt;em&gt;QuickCheck&lt;/em&gt; was using 0 element lists to check the property.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In Frege &lt;code&gt;repl&lt;/code&gt; you can execute your specification with
&lt;code&gt;quickCheckVerbose&lt;/code&gt;, it works the same as &lt;code&gt;quickCheck&lt;/code&gt; but it will
print out all generated values used.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;shrinking&quot;&gt;Shrinking&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a given specification fails, &lt;em&gt;QuickCheck&lt;/em&gt; tries to find the smaller
input that can make the specification fail. That comes very handy
specially where we&amp;#8217;re dealing either a big data set or a complex data
model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets create a &lt;code&gt;fregeRepl&lt;/code&gt; session to see &lt;em&gt;QuickCheck&lt;/em&gt; in action over
a wrong defined function. This time we&amp;#8217;re messing around some basic
math rule we learnt in school:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;failing specification&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;frege&amp;gt; :{
&amp;gt; substract :: Int -&amp;gt; Int -&amp;gt; Int
&amp;gt; substract x y = x - y
&amp;gt; :}

function substract :: Int -&amp;gt; Int -&amp;gt; Int

frege&amp;gt; substractProperty x y = substract x y == substract y x
function substractProperty :: Int -&amp;gt; Int -&amp;gt; Bool

frege&amp;gt; quickCheck $ property substractProperty
*** Failed! (after 2 tests and 1 shrink):
Falsifiable
1
0
()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like we expected this must fail, but &lt;em&gt;QuickCheck&lt;/em&gt; did more than
confirming the failure, it gave us a set of values to check our own: 1
and 0. Not only that, it&amp;#8217;s supposed to be the minimum set of values
that will make your property fail.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;this_is_only_the_beginning&quot;&gt;This is only the beginning&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although I went through the basic concepts of &lt;em&gt;QuickCheck&lt;/em&gt; my
feeling is that I haven&amp;#8217;t even touched the surface. the idea is to keep
digging in every topic, so stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Blog entry code&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mariogarcia/blog/tree/master/sources/2016/05/qc-frege-01&quot; class=&quot;bare&quot;&gt;https://github.com/mariogarcia/blog/tree/master/sources/2016/05/qc-frege-01&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Useful References&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.stuartgunter.org/intro-to-quickcheck/&quot; class=&quot;bare&quot;&gt;http://www.stuartgunter.org/intro-to-quickcheck/&lt;/a&gt; (Very impressive
blog entry. I&amp;#8217;ve taken many ideas from it)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://tab.snarc.org/posts/haskell/2010-12-02-using_quickcheck.html&quot; class=&quot;bare&quot;&gt;http://tab.snarc.org/posts/haskell/2010-12-02-using_quickcheck.html&lt;/a&gt; (blog post)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf&quot; class=&quot;bare&quot;&gt;http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf&lt;/a&gt; (blog post)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://tab.snarc.org/posts/haskell/2010-12-02-using_quickcheck.html&quot; class=&quot;bare&quot;&gt;http://tab.snarc.org/posts/haskell/2010-12-02-using_quickcheck.html&lt;/a&gt; (blog post)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StackOverflow&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16968549/what-is-a-shrink-with-regard-to-haskells-quickcheck&quot; class=&quot;bare&quot;&gt;http://stackoverflow.com/questions/16968549/what-is-a-shrink-with-regard-to-haskells-quickcheck&lt;/a&gt; (Explains shrinking)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Haskell&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.haskell.org/Introduction_to_QuickCheck1&quot; class=&quot;bare&quot;&gt;https://wiki.haskell.org/Introduction_to_QuickCheck1&lt;/a&gt; (An introduction to &lt;em&gt;QuickCheck&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hackage.haskell.org/package/QuickCheck&quot; class=&quot;bare&quot;&gt;https://hackage.haskell.org/package/QuickCheck&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hackage.haskell.org/package/QuickCheck-2.8.2/docs/Test-QuickCheck.html&quot; class=&quot;bare&quot;&gt;https://hackage.haskell.org/package/QuickCheck-2.8.2/docs/Test-QuickCheck.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Rasperry Pi + SSHoogr</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/04/sshoogr.html"/>
        <updated>2016-04-24T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/04/sshoogr.html</id>
        <category term="groovy"/>
        <category term="ssh"/>
        <category term="sshoogr"/>
        <content type="html">
            &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the_idea&quot;&gt;The idea&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well some time ago I wanted to build a mini raspberry pi mini tower to
do some proofs of concept about distributed computing. The time passed
and I didn&amp;#8217;t do anything&amp;#8230;&amp;#8203;until today. But the thing is attending
last &lt;a href=&quot;http://www.greachconf.es&quot;&gt;GreachConf&lt;/a&gt; I saw sshoogr (pronounced
&quot;sugar&quot;). &lt;code&gt;sshoogr&lt;/code&gt; is a Groovy-based DSL library for working with
remote servers through SSH.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It seemed something easy to use and most importantly&amp;#8230;&amp;#8203;fun! It may
well be not as powerful as Ansible but I don&amp;#8217;t really need that (at
least at the moment) and I thought it would be nice to do some devops
while using Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So steps are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Installing OS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initializing systems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install ssh keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Docker&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;os&quot;&gt;OS&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all I had to install the OS. Although many people is using
&lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot;&gt;Raspbian&lt;/a&gt;, or
&lt;a href=&quot;http://blog.hypriot.com/&quot;&gt;HypriotOS&lt;/a&gt;, I chose
&lt;a href=&quot;https://archlinuxarm.org/&quot;&gt;ArchlinuxARM&lt;/a&gt;. Among other things I liked
the idea of using the same linux flavor I&amp;#8217;m using everyday, and Arch
normally is lighter than Debian distros.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install the OS for a &lt;code&gt;rpi-2&lt;/code&gt; you can find a step-by-step
&lt;a href=&quot;https://archlinuxarm.org/platforms/armv7/broadcom/raspberry-pi-2&quot;&gt;here&lt;/a&gt;. Of
course there are distros for many &lt;strong&gt;ARM&lt;/strong&gt; micros.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course once I have install it in the first &lt;code&gt;rpi-2&lt;/code&gt; then clone it to
the other 3 machines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;commons&quot;&gt;Commons&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;base_script&quot;&gt;Base script&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because I&amp;#8217;m dealing with Groovy scripts I&amp;#8217;m using &lt;strong&gt;Grapes&lt;/strong&gt; to get
&lt;strong&gt;sshoogr&lt;/strong&gt; dependencies. However I don&amp;#8217;t want to repeat the
dependencies all over again in every script, so I created a base
script, and I will be using it through the rest of scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Base script&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package common

@Grapes([
    @Grab(&apos;com.aestasit.infrastructure.sshoogr:sshoogr:0.9.25&apos;),
    @Grab(&apos;commons-codec:commons-codec:1.10&apos;)
])
import com.aestasit.infrastructure.ssh.DefaultSsh

class Sshoogr extends DefaultSsh { }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;How to use this script in the other scripts ?&lt;/strong&gt; Well because we are
only interested in methods within &lt;code&gt;DefaultSsh&lt;/code&gt; then we should add a
static import in your script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Static import&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;import static common.Sudo.*
import static common.Util.*
import static common.Sshoogr.*&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;common_variables&quot;&gt;Common variables&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point we can only access the &lt;code&gt;rpi2&lt;/code&gt; using the default
usernames and passwords. In order to avoid copy-pasting the user names
and password every time, I put all of them in the same place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Common variables&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;Unresolved directive in &amp;lt;stdin&amp;gt; - include::../../../../../../../sources/2016/04/sshoogr/common/secrets.groovy[indent=0]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Ip of the host we&amp;#8217;re setting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Sudo prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Default usernames and passwords&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;New credentials used to replace default ones&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Path to ssh key files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A way of gaining root access through &lt;code&gt;su -&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;How these variables are included in the rest of scripts ?&lt;/strong&gt; Throug
the &lt;code&gt;evaluate&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Evaluating other scripts&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;evaluate(&apos;common/secrets.groovy&apos; as File)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When invoking the &lt;code&gt;evaluate&lt;/code&gt; method, that script will be evaluated and
included in the current script scope.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;install_new_credentials&quot;&gt;Install new credentials&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First time you access a machine it could be normal to access through
user/password, but once you&amp;#8217;ve entered the first time afterwards you
should be accessing using a ssh key. The following script will be
installing our public ssh key as an authorized key in the remote host.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Install new credentials&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;/**
 * 1.SSHOOGR CONFIG
 */
import static common.Sudo.*
import static common.Util.*
import static common.Sshoogr.*

&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
options.trustUnknownHosts = true

/**
 * 2.SHARED VARIABLES
 */
evaluate(&apos;common/secrets.groovy&apos; as File)

/**
 * 3.OWN VARIABLES
 */
PREFIX = &quot;echo $RPI_ROOT_PASSWORD | su -c &apos;&quot;
SUFFIX = &quot;&apos;&quot;

/**
 * 4.CHANGE DEFAULT CREDENTIALS
 *
 * This step is done without online connection to avoid
 * any attack at this point due the fact that machines have
 * default usernames and passwords.
 */
remoteSession(&quot;$DEF_RPI_USER_TUPLE@$IP&quot;){
    prefix(&quot;echo $DEF_RPI_ROOT_PASSWORD | su -c &apos;&quot;) {
        suffix(SUFFIX){
            exec &quot;echo \&quot;$RPI_ROOT_TUPLE\&quot; | chpasswd -m&quot;
        }
    }

    prefix(PREFIX) {
        suffix(SUFFIX) {
            exec &quot;pacman --noconfirm -S sudo&quot;
        }
    }

    prefix(PREFIX) {
        suffix(SUFFIX) {
            exec &quot;useradd -m $DOCKER_USERNAME&quot;
            exec &quot;echo \&quot;$DOCKER_TUPLE\&quot; | chpasswd -m&quot;
            exec &quot;echo \&quot;${noPasswd(DOCKER_USERNAME)}\&quot; &amp;gt;&amp;gt; /etc/sudoers&quot;
        }
    }
}

/**
 * 3.INSTALL SSH KEY
 *
 * Once machines have been initialized, they should be accessed via
 * ssh key instead of using username and password. In order to do that
 * we need to install an authorized key in every one of them.
 */

AUTHORIZED_KEYS_FILE = &quot;/home/$DOCKER_USERNAME/.ssh/authorized_keys&quot;
DOCKER_PUBLIC_KEY = new File(SUPERVISOR_SSH_PUB_KEY)
DOCKER_PRIVATE_KEY = new File(SUPERVISOR_SSH_PRI_KEY)
DOCKER_CREDENTIALS = [keyFile: DOCKER_PRIVATE_KEY]

remoteSession(&quot;$DOCKER_TUPLE@$IP&quot;) {
    exec &quot;mkdir -p ~/.ssh&quot;
    exec &quot;touch $AUTHORIZED_KEYS_FILE&quot;

    remoteFile(AUTHORIZED_KEYS_FILE).text = DOCKER_PUBLIC_KEY.text
}

/**
 * 5.DELETE DEFAULT USER
 *
 */
remoteSession(&quot;$DOCKER_USERNAME@$IP&quot;) {
    keyFile = DOCKER_PRIVATE_KEY

    exec &quot;history -c&quot;

    prefix(SUDO) {
        exec &quot;userdel -fr $DEF_RPI_USER_USERNAME&quot;
        exec &quot;pacman --noconfirm -Syu&quot;  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        exec &quot;reboot now&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Because hosts at this point doesn&amp;#8217;t have a valid ssl
certification we are telling ssh to trust a server anyway.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
the &lt;code&gt;--noconfirm&lt;/code&gt; flag should be used when you don&amp;#8217;t want the
process to ask for confirmation.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;install_firewall&quot;&gt;Install firewall&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now it&amp;#8217;s time to protect your machine, install the firewall, this time
I will be using &lt;code&gt;ufw&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Firewall&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;/**
 * 1.SSHOOGR CONFIG
 */
import static common.Sudo.*
import static common.Util.*
import static common.Sshoogr.*

options.trustUnknownHosts = true

/**
 * 2.SHARED VARIABLES
 */
evaluate(&apos;common/secrets.groovy&apos; as File)

DOCKER_PRIVATE_KEY = new File(SUPERVISOR_SSH_PRI_KEY)
/**
 * 4.INSTALL FIREWALL
 */
remoteSession(&quot;$DOCKER_USERNAME@$IP&quot;) {
    keyFile = DOCKER_PRIVATE_KEY

    prefix(SUDO) {
        exec &quot;pacman --noconfirm -S ufw&quot;  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        exec &quot;ufw allow ssh&quot;              &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        exec &quot;systemctl enable ufw&quot;       &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        exec &quot;systemctl start ufw&quot;        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Install &lt;strong&gt;ufw&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add ssh exception&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable &lt;strong&gt;ufw&lt;/strong&gt; on startup&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Start &lt;strong&gt;ufw&lt;/strong&gt; service now&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;install_docker&quot;&gt;Install Docker&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Docker&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;/**
 * 1.SSHOOGR CONFIG
 */
import static common.Sudo.*
import static common.Util.*
import static common.Sshoogr.*

options.trustUnknownHosts = true

/**
 * 2.SHARED VARIABLES
 */
evaluate(&apos;common/secrets.groovy&apos; as File)

DOCKER_PRIVATE_KEY = new File(SUPERVISOR_SSH_PRI_KEY)
/**
 * 3.INSTALL DOCKER
 *
 * Installing docker engine in all machines
 */
remoteSession(&quot;$DOCKER_USERNAME@$IP&quot;) {
    keyFile = DOCKER_PRIVATE_KEY

    prefix(SUDO) {
        exec &quot;pacman --noconfirm -S docker&quot;
        exec &quot;usermod -a -G docker $DOCKER_USERNAME&quot;
        exec &quot;systemctl enable docker&quot;
        exec &quot;systemctl start docker&quot;
    }

    exec &quot;history -c&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;check_it_out&quot;&gt;Check it out!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find &lt;code&gt;Sshoogr&lt;/code&gt; at &lt;a href=&quot;https://github.com/aestasit/sshoogr&quot; class=&quot;bare&quot;&gt;https://github.com/aestasit/sshoogr&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>I am Janus Lynd</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/04/imjanus.html"/>
        <updated>2016-04-22T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/04/imjanus.html</id>
        <category term="general"/>
        <content type="html">
            &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today I&amp;#8217;ve moved all my Frege projects to my usual account.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some time ago, I created another account
&lt;a href=&quot;https://github.com/januslynd&quot;&gt;Janus Lynd&lt;/a&gt; for playing with the
&lt;a href=&quot;http://frege-lang.com&quot;&gt;Frege&lt;/a&gt; programming language. The thing is that
my initial experiments have last like a year and have been really
rewarding, like &lt;a href=&quot;https://github.com/fregelab/chinook&quot;&gt;Chinook&lt;/a&gt; and
&lt;a href=&quot;https://github.com/fregelab/chinook&quot;&gt;Sirocco&lt;/a&gt;, but now it has become
really a problem to maintain both accounts, specially because it makes
no sense.
I&amp;#8217;ve sent a message to the Frege mailing list explaining what happened
and I&amp;#8217;ve moved all Frege related projects to
&lt;a href=&quot;https://github.com/fregelab&quot;&gt;FregeLab&lt;/a&gt; and the rest to my account. I
think is a lesson learned.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mario&lt;/p&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Frege basics: File I/O</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/03/frege-file-basic.html"/>
        <updated>2016-03-29T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/03/frege-file-basic.html</id>
        <category term="frege"/>
        <category term="io"/>
        <category term="files"/>
        <content type="html">
            &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All examples are based on &lt;code&gt;IO.fr&lt;/code&gt; module functions. You can find them
&lt;a href=&quot;https://github.com/Frege/frege/blob/master/frege/java/IO.fr&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reading&quot;&gt;Reading&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll be using the &lt;strong&gt;openReader&lt;/strong&gt; function. It creates a
&lt;strong&gt;BufferedReader&lt;/strong&gt; from a given file path in the form of a &lt;strong&gt;String&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;openReader :: String -&amp;gt; IO BufferedReader&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first example reads a file getting a list of lines out of it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;readLines :: String -&amp;gt; IO [String]
readLines path = do
  reader   &amp;lt;- openReader path
  reader.getLines&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here you have a shorter version:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;readLines&apos; :: String -&amp;gt; IO [String]
readLines&apos; path = openReader path &amp;gt;&amp;gt;= _.getLines&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Here we were using the placeholder notation &lt;code&gt;_.XXX&lt;/code&gt; to
avoid creating intermediate values.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But bear in mind that if you give a wrong path the
function call will raise an error. Here is an example returning an
empty list in case the file doesn&amp;#8217;t exists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;safeReadLines :: String -&amp;gt; IO [String]
safeReadLines path = openReader path &amp;gt;&amp;gt;= _.getLines
    `catch` (\(e :: FileNotFoundException) -&amp;gt; return [])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;writing&quot;&gt;Writing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As opposed to &lt;strong&gt;openReader&lt;/strong&gt; there is a &lt;strong&gt;openWriter&lt;/strong&gt; to write to a
file. The &lt;strong&gt;openWriter&lt;/strong&gt; and &lt;strong&gt;appendWriter&lt;/strong&gt; functions return a
&lt;strong&gt;PrintWriter&lt;/strong&gt; instance. Lets see how can we use them. In the first
example I&amp;#8217;m setting the content of a file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;writeStringToFile :: String -&amp;gt; String -&amp;gt; IO ()
writeStringToFile path line = do
    writer   &amp;lt;- openWriter path &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    writer.print line &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    writer.flush &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Getting the &lt;strong&gt;PrintWriter&lt;/strong&gt; instance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Writing to file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Flushing to reflect the changes&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
flushing is important when writing to a file.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But most of the time we would like to append information to a
file. The following example does exactly that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;appendLine :: String -&amp;gt; String -&amp;gt; IO ()
appendLine path line = do
    writer   &amp;lt;- appendWriter path &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    writer.println line &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    writer.flush &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Getting the &lt;strong&gt;PrintWriter&lt;/strong&gt; instance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Appending content to a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Flushing to reflect the changes&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Java: Method Reference composition</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2016/03/jdk8-method-reference-composition.html"/>
        <updated>2016-03-28T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2016/03/jdk8-method-reference-composition.html</id>
        <category term="jdk"/>
        <category term="lambdas"/>
        <category term="method reference"/>
        <content type="html">
            &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since JDK 8 there is the &lt;strong&gt;java.util.function&lt;/strong&gt; package responsible to
abstract everything that has to do with functions. Most of the time
you will find yourself creating your own functions but sometimes, if
you&amp;#8217;re aware of &lt;strong&gt;method references&lt;/strong&gt; you will find out that many of
those functions you were about to create were already in the jdk, or
at least you will be able to use function composition to create new
ones.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;silly_example&quot;&gt;Silly example&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets say we would like to sum two numbers and then add ten to the
result and finally return the result as a &lt;strong&gt;String&lt;/strong&gt;. Ok a first naive
implementation would be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static String doStuff(Integer a, Integer b) {
    Integer sumResult = a + b + 10;

    return sumResult.toString();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s just horrible, everything mixed up, we cannot reuse
anything. Although we can create a lambda expression to represent a
sum, there&amp;#8217;s no need for that. You can use the &lt;code&gt;Integer::sum&lt;/code&gt; method
reference that can exactly do that. The problem is that you can&amp;#8217;t do
something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// THIS WON&apos;T COMPILE
(Integer::sum).andThen((Integer a) -&amp;gt; a + 10).andThen(Object::toString);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the solution is very close. We can create a pair of utility
functions receiving a &lt;strong&gt;Function&lt;/strong&gt; or a &lt;strong&gt;BiFunction&lt;/strong&gt; to &lt;strong&gt;&quot;catch&quot;&lt;/strong&gt;
the method reference and use it like any of these type of
functions. Here are the utility functions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * Utility function to convert a method reference to a
 * {@link Function}
 *
 * @param fn method reference matching a {@link Function}
 * @return the matching {@link Function}
 */
public static &amp;lt;A,B&amp;gt; Function&amp;lt;A,B&amp;gt; use(Function&amp;lt;A,B&amp;gt; fn) {
    return fn;
}

/**
 * Utility function to convert a method reference to a
 * {@link BiFunction}
 *
 * @param fn method reference matching a {@link BiFunction}
 * @return the matching {@link BiFunction}
 */
public static &amp;lt;A,B,C&amp;gt; BiFunction&amp;lt;A,B,C&amp;gt; use(BiFunction&amp;lt;A,B,C&amp;gt; fn) {
    return fn;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And then you can, for example, compose functions with &lt;code&gt;andThen&lt;/code&gt; flavor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static String doMoreStuff(Integer a, Integer b) {
    BiFunction&amp;lt;Integer,Integer,String&amp;gt; fn = use(Integer::sum)
        .andThen(x -&amp;gt; x + 10)
        .andThen(Object::toString);

    return fn.apply(a,b);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;andThen&lt;/code&gt; seems to be more familiar to imperative programmers
because it follows a logical path: &lt;strong&gt;first this, and then that, and
then that&amp;#8230;&amp;#8203;&lt;/strong&gt;. It describes a sequence of events.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or using &lt;code&gt;compose&lt;/code&gt; flavor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static String doEvenMoreStuff(Integer a, Integer b) {
    Function&amp;lt;Integer,String&amp;gt; extras =
        use(Object::toString).compose((Integer x) -&amp;gt; x + 10); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    BiFunction&amp;lt;Integer,Integer,String&amp;gt; fn =
        use(Integer::sum).andThen(extras); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    return fn.apply(a,b);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Composing functions using &lt;code&gt;compose&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Applying previous composed functions after the result of the &lt;strong&gt;sum&lt;/strong&gt; function&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;compose&lt;/code&gt; is the type of composition you could find in languages
as Haskell where the composition evaluation is read from right to
left (first function is the one in the right hand side).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Some applicative style examples</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2015/12/frege-applicative.html"/>
        <updated>2015-12-21T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2015/12/frege-applicative.html</id>
        <category term="frege"/>
        <category term="haskell"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m not going to define what an applicative functor is, (See
references), but I would like to share some &lt;code&gt;applicative style&lt;/code&gt;
examples. After reading a bit about applicative functors I&amp;#8217;ve coined
the definition:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
functors that can be applied, meaning functors containing functions
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; My own :P
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fmap_on_steroids&quot;&gt;&lt;code&gt;fmap&lt;/code&gt; on steroids ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First step to use applicative functor style is to understand &lt;code&gt;fmap&lt;/code&gt;
and the infix notation &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;. When I try to apply a function to a
value wrapped in a &lt;code&gt;Functor&lt;/code&gt; normally I use &lt;code&gt;fmap&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;fmap (+1) (Just 1) == Just 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But there&amp;#8217;s the &lt;code&gt;applicative style&lt;/code&gt; which uses the &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; symbol. The
&lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; symbol is just the &lt;code&gt;fmap&lt;/code&gt; function, nothing else. The only
difference is that you can use this symbol &lt;code&gt;infix&lt;/code&gt;. That means the
following would work the same:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;(+1) &amp;lt;$&amp;gt; (Just 1) == Just 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And there is another feature, &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; is left associative, that means
among other things, you can avoid wrapping the right operand in
parenthesis.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the_magical&quot;&gt;The magical &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But what if I wanted to do operations over wrapped values. And most of
the time I use the &lt;code&gt;do&lt;/code&gt; notation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;sumMaybe :: (Num a) =&amp;gt; Maybe a -&amp;gt; Maybe a -&amp;gt; Maybe a
sumMaybe b c = do
  x &amp;lt;- b
  y &amp;lt;- c
  return (x + y)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This function means that for any applicative functor it would take
the contained function () and the contained value (f a) and will
return a contained value (f b).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Applicative&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;Apply f =&amp;gt; f (a-&amp;gt;b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also use &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; in combination with &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; or in other words
with &lt;code&gt;fmap&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;sumMaybe2 :: (Num a) =&amp;gt; Maybe a -&amp;gt; Maybe a -&amp;gt; Maybe a
sumMaybe2 b c = (+) &amp;lt;$&amp;gt; b &amp;lt;*&amp;gt; c&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes is easy to think that whenever you used to have a function
receiving plain values you can use the same function but combining it
as an applicative functor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;E.g here we have a function that creates a &lt;code&gt;Band&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;data Band = Band { id :: Long,
                   name :: String,
                   year :: Int}

createBand :: Long -&amp;gt; String -&amp;gt; Int -&amp;gt; Band
createBand id name year = Band { id = id, name = name, year = year }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s perfect, but what happens when have to create a Band from Maybe
instances ? No problem, let&amp;#8217;s use applicative functors:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;createBand2 :: Maybe Long -&amp;gt; Maybe String -&amp;gt; Maybe Int -&amp;gt; Maybe Band
createBand2 id name year = createBand &amp;lt;$&amp;gt; id &amp;lt;*&amp;gt; name &amp;lt;*&amp;gt; year&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What I&amp;#8217;m doing is to partially apply the applied function with the
first parameter, then with the second, and finally we resolve the
function within the context.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;list_comprehensions&quot;&gt;List comprehensions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is another use I&amp;#8217;ve found specially interesting. The use of
applicative functors for list comprehensions. Lets say I would like to
increment every value from a given list. We can use &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Using map&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;produceInc0 :: (Num a) =&amp;gt; [a] -&amp;gt; [a]
produceInc0 xs = map (+1) xs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or you may use list comprehensions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Using comprehensions&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;produceInc1 :: (Num a) =&amp;gt; [a] -&amp;gt; [a]
produceInc1 xs = [x + 1 | x &amp;lt;- xs ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But there is still another way thanks to the applicative functor
function &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Using applicative functor style&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;produceInc2 :: (Num a) =&amp;gt; [a] -&amp;gt; [a]
produceInc2 xs = [(+1)] &amp;lt;*&amp;gt; xs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pbrisbin.com/posts/applicative_functors/&quot; class=&quot;bare&quot;&gt;https://pbrisbin.com/posts/applicative_functors/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://learnyouahaskell.com/functors-applicative-functors-and-monoids&quot; class=&quot;bare&quot;&gt;http://learnyouahaskell.com/functors-applicative-functors-and-monoids&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>Property based testing</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2015/11/quick-check.html"/>
        <updated>2015-11-20T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2015/11/quick-check.html</id>
        <category term="frege"/>
        <category term="scala"/>
        <category term="clojure"/>
        <category term="groovy"/>
        <content type="html">
            &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what_is_property_based_testing&quot;&gt;What is &lt;em&gt;Property Based Testing&lt;/em&gt; ?&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Property-based tests make statements about the output of your code
based on the input, and these statements are verified for many
different possible inputs.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Source: &lt;a href=&quot;http://blog.jessitron.com/2013/04/property-based-testing-what-is-it.html&quot; class=&quot;bare&quot;&gt;http://blog.jessitron.com/2013/04/property-based-testing-what-is-it.html&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the_problem&quot;&gt;The problem&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fortunately nowadays we are used to do testing. But sometimes tests
are hard to do, hard to maintain and hard to reason about. Even if we
try our best, sometimes we forgot to add that case that made the
app to crash in the worst possible moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Property based testing claims to be able to help us to fill this gap
and make our tests easier to maintain. But I&amp;#8217;ve also heard it is also
harder to write and grasp. In this entry I&amp;#8217;m reviewing how property
based testing is handled in different programming languages. From a
more imperative like Java or Groovy to more functional languages like
Clojure, Scala and finally Frege. During this journey I&amp;#8217;ll try to
figure out which are the patterns and best practices to get advantage
of property based testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;java&quot;&gt;Java&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mariogarcia/blog/tree/master/sources/2015/11/quick-check/qc-java&quot;&gt;Code at Github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Assumptions &amp;#8658; Theories/Properties &amp;#8658; Proof
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Use case
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the Java sample I&amp;#8217;ve tried
&lt;a href=&quot;https://github.com/pholser/junit-quickcheck&quot;&gt;junit-quickcheck&lt;/a&gt;. This
library is meant to be used with &lt;a href=&quot;http://junit.org/&quot;&gt;junit&lt;/a&gt; tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;dependencies&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;testCompile &apos;com.pholser:junit-quickcheck-core:0.5&apos;
testCompile &apos;com.pholser:junit-quickcheck-generators:0.5&apos;
testCompile &apos;junit:junit:4.12&apos;
testCompile &apos;org.hamcrest:hamcrest-junit:2.0.0.0&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sample is a silly example about loans. If somebody ask for a loan,
depending on how much this person is asking, the state of the loan may
vary. The Java library works on top of the concept of theories and
assumptions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1st theory&lt;/strong&gt;: If the loan is less than or equals to 200 EUR then the
loan is &lt;code&gt;ACCEPTED&lt;/code&gt; right away.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2nd theory&lt;/strong&gt;: If the loan is between 201 and 1000 then it should be
marked as &lt;code&gt;PENDING&lt;/code&gt; until the request is studied in detail&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;3rd theory&lt;/strong&gt;: All loans beyond 1000 will be automatically
&lt;code&gt;REJECTED&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Theories aree annotated with the &lt;code&gt;@Theory&lt;/code&gt; annotation. Follow up the
theory for the automatically accepted loans:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;less or equals to 200&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Theory public void automaticallyApproved( &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    @ForAll @InRange(minDouble = 0d, maxDouble = 200d) Double amount) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    Loan loan = new Loan(State.PENDING, amount); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

    assumeThat(loan.state, equalTo(State.PENDING));
    assumeThat(loan.amount, lessThanOrEqualTo(200d)); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

    Supervisor supervisor = new Supervisor();
    Loan processedLoan = supervisor.process(loan); &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

    assertEquals(processedLoan.state, State.ACCEPTED); &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is a &lt;code&gt;@Theory&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@ForAll&lt;/code&gt; cases in this theory (by default are 100) the amount
will be provided by a &lt;code&gt;@InRange&lt;/code&gt; and it will be a number between 0 and
200 (It doesn&amp;#8217;t make sense to grant a loan of 0 EUR right ? :P)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Building a new loan with the provided amount&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Assuming the new loan state is &lt;code&gt;PENDING&lt;/code&gt; and the amount is less
than or equals 200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Processing that loan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The result should be an accepted loan&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we can create theories for the remaining use cases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;between 200 and 100&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Theory public void needsAFurtherStudy(
    @ForAll @InRange(minDouble = 201d, maxDouble = 1000d) Double amount) {

    Loan loan = new Loan(State.PENDING, amount);

    assumeThat(loan.state, equalTo(State.PENDING));
    assumeThat(loan.amount, allOf(
        greaterThan(200d),
        lessThanOrEqualTo(1000d)
    ));

    Supervisor supervisor = new Supervisor();
    Loan processedLoan = supervisor.process(loan);

    assertEquals(processedLoan.state, State.PENDING);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;beyond 1000&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Theory public void automaticallyRejected(
    @ForAll @InRange(minDouble = 1001d, maxDouble = 20000d) Double amount) {

    Loan loan = new Loan(State.PENDING, amount);

    assumeThat(loan.state, equalTo(State.PENDING));
    assumeThat(loan.amount, allOf(
        greaterThan(1000d),
        lessThanOrEqualTo(20000d)
    ));

    Supervisor supervisor = new Supervisor();
    Loan processedLoan = supervisor.process(loan);

    assertEquals(processedLoan.state, State.REJECTED);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I could have created a generator for Loan instances, but it seemed
overkill for such a little example. It was easier to call to a
predefined generator to feed a given Loan property.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;groovy&quot;&gt;Groovy&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mariogarcia/blog/tree/master/sources/2015/11/quick-check/qc-groovy&quot;&gt;Code at Github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Know the output &amp;#8658; Check a certain set of inputs give the right output
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Use case
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use property based testing with Groovy I&amp;#8217;m using
&lt;a href=&quot;https://github.com/spockframework/spock&quot;&gt;Spock&lt;/a&gt; as testing framework and
&lt;a href=&quot;https://github.com/Bijnagte/spock-genesis&quot;&gt;Spock Genesis&lt;/a&gt; which has a
set of value generators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;dependencies&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;testCompile &apos;org.spockframework:spock-core:1.0-groovy-2.4&apos;
testCompile &apos;com.nagternal:spock-genesis:0.3.0&apos;
testCompile &apos;junit:junit:4.12&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time we have a function building URIs that should follow certain
rules. First of all the final URI should follow these rules:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Rules&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static final Pattern WORD            = ~/[a-z0-9-._\-]{1,8}/
static final Pattern OPTIONAL_SLASH  = ~/[\/]{0,1}/
static final Pattern OPTIONAL_WORD   = ~/($WORD){0,1}/

static final Pattern COMPLIANT_FRAGMENT  = ~/$OPTIONAL_SLASH$OPTIONAL_WORD$OPTIONAL_SLASH/
static final Pattern COMPLIANT_URI       = ~/s3:\/\/$WORD($COMPLIANT_FRAGMENT){1,10}/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we build the function that would match that rules:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Composer&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static URI compose(String host, String bucket, String path) {
    String treatedRoot = bucket.endsWith(&apos;/&apos;) ? bucket : &quot;$bucket/&quot;
    String treatedPath = path.dropWhile { it == &apos;/&apos; }

    return URI.create(&quot;$host$treatedRoot$treatedPath&quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally lets execute a test checking that function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Test&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Unroll(&apos;Getting an URI from (h: #host, r: #root, p: #path)&apos;)
void &apos;composing URI fragments to get a full URI&apos;() {
    when: &apos;composing all pieces&apos;
    def uri = URIComposer.compose(host, root, path).toString()

    then: &apos;we should get a compliant URI&apos;
    uri ==~ COMPLIANT_URI &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    where: &apos;possible values are&apos;
    root &amp;lt;&amp;lt; fragmentProperties.take(DEFAULT) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    path &amp;lt;&amp;lt; fragmentProperties.take(DEFAULT) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

    host = &quot;s3://username&quot;
}

StringGenerator getFragmentProperties() {
    return Gen.string(COMPLIANT_FRAGMENT)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Result should be a valid (upon our rules) URI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Bucket/Root path should follow the valid fragment property&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Rest of paths should follow the valid fragment property&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s clear, I could have forgotten to add many of the possible cases
if I would have written those cases manually. This way I&amp;#8217;m taking
advantage of the declared rules to generate a bunch of use cases for
me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;scala&quot;&gt;Scala&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mariogarcia/blog/tree/master/sources/2015/11/quick-check/qc-scala&quot;&gt;Code at Github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Assumptions &amp;#8658; Theories/Properties &amp;#8658; Proof
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Use case
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because I&amp;#8217;m not yet used to Scala I&amp;#8217;ve taken the same example I did in
Java and tried to translate it to Scala to see how it looks like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we also have a function to process a given Loan:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;def process(loan: Loan) : Loan = loan.amount match { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  case x if 0   until 201  contains x  =&amp;gt; Loan(State.ACCEPTED, loan.amount) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  case x if 201 until 1001 contains x  =&amp;gt; Loan(State.PENDING,  loan.amount) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  case _                               =&amp;gt; Loan(State.REJECTED, loan.amount) &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For a given loan amount&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the amount is 0 &amp;lt; amount &amp;lt; 201&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the amount is 201 &amp;lt; amount &amp;lt; 1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the amount is anything else&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And dependending on the requested amount we should be receiving different
state. For amounts automatically accepted:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;val acceptableLoans = for {
  amount &amp;lt;- Gen.chooseNum(0,200) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
} yield Loan(State.PENDING, amount) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

property(&quot;accepted loans&quot;) = forAll(acceptableLoans) { (loan: Loan) =&amp;gt;
  Supervisor.process(loan).state == State.ACCEPTED &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Using a number generator for getting amounts from 0 to 200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Building instances of Loan with State.PENDING and 0 &amp;lt; amount &amp;lt; 200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For all provided loans once processed they all should be ACCEPTED&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those which are directly rejected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;val rejectableLoans = for {
  amount &amp;lt;- Gen.chooseNum(1001,2000) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
} yield Loan(State.PENDING, amount) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

property(&quot;rejected loans&quot;) = forAll(rejectableLoans) { (loan: Loan) =&amp;gt;
  Supervisor.process(loan).state == State.REJECTED &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Using a number generator for getting amounts from 1000 to 1999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Building instances of Loan with State.PENDING and 1000 &amp;lt; amount &amp;lt; 1999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For all provided loans once processed they all should be REJECTED&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;clojure&quot;&gt;Clojure&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mariogarcia/blog/tree/master/sources/2015/11/quick-check/qc-clojure&quot;&gt;Code at Github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Check behavior
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Use case
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure has a complete-like quick-check testing framework called
&lt;a href=&quot;https://github.com/clojure/test.check&quot;&gt;Test Check&lt;/a&gt;. It can be used
standalone but I&amp;#8217;ll be using it withing a &lt;code&gt;clojure.test&lt;/code&gt; thanks
to the &lt;code&gt;defspec&lt;/code&gt; macro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;dependencies&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;:dependencies [[org.clojure/clojure &quot;1.7.0&quot;]
               [org.clojure/test.check &quot;0.9.0&quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Clojure example has to do with numbers. Lets say I&amp;#8217;m reading a CSV
file with lines of numbers. Those lines may have numbers or
characters. I&amp;#8217;m only interested in adding up all numbers of each line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What are the properties ? Well, Given a line with elements separated by &lt;code&gt;,&lt;/code&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Numbers are all elements minus the non numeric values&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adding up all numeric elements should follow the commutativity rule&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our test we&amp;#8217;re declaring that for all possible values of a possible
empty vector of alphanumeric values, once we join those values in a
csv-like string, it doesn&amp;#8217;t matter which is the order of the included
digits, the outcome should remain the same.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Test&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns qc.core-test
  (:require [clojure.test :refer :all]
            [qc.core :refer :all]
            [clojure.string :as str]
            [clojure.test.check :as tc]
            [clojure.test.check.generators :as gen]
            [clojure.test.check.properties :as prop]
            [clojure.test.check.clojure-test :as ct :refer (defspec)]))

(defn join-chars
  [chars]
  (str/join &quot;,&quot; chars))

(defspec check-adding-up-numbers-from-line
  100 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  (prop/for-all [v (gen/vector gen/char-alphanumeric)] &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                (let [line (join-chars v)
                      reversed-line (join-chars (reverse v))]
                  (= (sum-numbers line) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                     (sum-numbers reversed-line))))) &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Number of iterations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Generators (It generates vectors of alphanumeric characters, sometimes could be empty)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Setting a sample line and a reversed version of that line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The result should be the same despite the order&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple implementation of the required function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Sum&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(defn sum-numbers
  &quot;Adds up all numbers within a CSV line expression&quot;
  [line]
  (if (empty? line) 0 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    (let [elements (str/split line #&quot;,&quot;)] &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      (-&amp;gt;&amp;gt; elements
           (filter is-digit) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
           (map to-int) &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
           (reduce +))))) &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Checking if the argument is empty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Splitting values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Filtering digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Converting to integers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Adding up all integers&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;frege&quot;&gt;Frege&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mariogarcia/blog/tree/master/sources/2015/11/quick-check/qc-frege&quot;&gt;Code at Github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Reversible processes
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Use case
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally I will be coding a very simple example representing how to
test some process that you know that applied twice gives you the
original value. The most used example for this is to reverse a string:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;reverse string&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;module qc.Reverse where

-- Reverses a string
reverseString :: String -&amp;gt; String
reverseString = packed . reverse . toList&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m defining two properties that should hold for the &lt;code&gt;reverseString&lt;/code&gt;
function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;properties&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;module qc.TestReverse where

import Test.QuickCheck
import qc.Reverse

applyTwice :: String -&amp;gt; Bool
applyTwice xs = ((reverseString . reverseString) xs) == xs

applyToOne :: Char -&amp;gt; Bool
applyToOne x = ((reverseString . packed) [x]) == packed [x]

reversible                 = property (applyTwice) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
noEffectToSingleCharacter  = property (applyToOne) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reversible&lt;/code&gt;: The function applied twice to the same word should
return the original value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;no effect to a single character&lt;/code&gt;: original word The function
applied to a single character should return the same character&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this Frege example I&amp;#8217;ve not used any generator explicitly, but
declaring the functions that are going to be used with the &lt;code&gt;property&lt;/code&gt;
function is enough for the compiler to infer what type of values
should provided to our function to test it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;About &lt;strong&gt;languages&lt;/strong&gt; and &lt;strong&gt;frameworks&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All languages and testing framewors have &lt;code&gt;generators&lt;/code&gt;, and most of
them are pretty similar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only Groovy and Java examples don&amp;#8217;t have the concept of &lt;code&gt;minimum
failure sample&lt;/code&gt; but at least Groovy has the advantage of Spock which
helps a lot defining the specification.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;About &lt;strong&gt;use cases&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some detected types:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Based on defined rules&lt;/code&gt;: generate value ranges to prove a set of
pre-defined rules&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Based on reversible processes&lt;/code&gt;: Some problems can be solved by
asking a process to execute twice: reverse is a good example of this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Based on known output&lt;/code&gt;: Problems requiring to check a wide range
of values to give the expected output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Not aimed to test result but behavior&lt;/code&gt;: Like commutativity over
sums (Clojure example).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A set of &lt;code&gt;properties&lt;/code&gt; can be considered a &lt;code&gt;specification&lt;/code&gt;. Both
Groovy and Scala languages mimic that line of thought very well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If properties are difficult to define, then it may lead to
indeterministic checking and different test results.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well I&amp;#8217;ve just started and my feeling is that I&amp;#8217;ve seen just the tip
of the iceberg. I really like the idea about trying to define what are
the general properties that a given function should obey and let the
testing framework to provide a set of possible values to challenge
those properties.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/pholser/junit-quickcheck&quot;&gt;junit-quickcheck&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://junit.org/&quot;&gt;junit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Groovy&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spockframework/spock&quot;&gt;Spock&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Bijnagte/spock-genesis&quot;&gt;Spock Genesis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scala&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.scalatest.org/&quot;&gt;Scala Test&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.scalacheck.org/&quot;&gt;Scala Check&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clojure&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/clojure/test.check&quot;&gt;Test Check&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Frege&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.frege-lang.org&quot;&gt;Frege site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Talks&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.jessitron.com/2013/04/property-based-testing-what-is-it.html&quot; class=&quot;bare&quot;&gt;http://blog.jessitron.com/2013/04/property-based-testing-what-is-it.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Z8qddDUt4hI&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=Z8qddDUt4hI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    <entry>
        <title>High Order Functions</title>
        <author>
            <name>@marioggar</name>
        </author>
        <link href="http://github.com/mariogarcia/blog/2015/11/frege-hof.html"/>
        <updated>2015-11-10T00:00:00Z</updated>
        <id>http://github.com/mariogarcia/blog/2015/11/frege-hof.html</id>
        <category term="frege"/>
        <category term="hof"/>
        <content type="html">
            &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&amp;#8230;&amp;#8203;is a function that does at least one of the following: takes one
or more functions as arguments or returns a function as its result.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Wikipedia
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me high order functions are like a tool box, a swiss-army-knife
that you can apply to many situations. But like everything in life you
have to know when to use it :P&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;usual_suspects&quot;&gt;Usual suspects&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most used high order functions are &lt;strong&gt;map&lt;/strong&gt; (transforms),
&lt;strong&gt;filter&lt;/strong&gt; (filters) and &lt;strong&gt;fold&lt;/strong&gt; (aggregates). Many other functions
are built on top of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;map&lt;/strong&gt; function is normally used to transform elements in a list
to create a new list with the transformed elements. It takes a
function and applies that function to all elements of a list to return
a new list. The signature is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can read this signature as the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(a &amp;#8594; b)&lt;/code&gt; : means this is a parameter representing a function
receiving an element of type &lt;code&gt;a&lt;/code&gt; and returning as result an element of
type &lt;code&gt;b&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[a]&lt;/code&gt;: Then we will receive a list of elements of type &lt;code&gt;a&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[b]&lt;/code&gt;: As final result we&amp;#8217;ll get a list of elements of type &lt;code&gt;b&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A silly example could be to increase all numbers within a given
collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;increase :: Num a =&amp;gt; [a] -&amp;gt; [a]
increase xs = map (+1) xs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re using a partially applied function &lt;code&gt;(+1)&lt;/code&gt; which is going to be
applied by &lt;code&gt;map&lt;/code&gt; to every element of the list and finally return a new
list with all increased values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another example could be to ask whether all numbers within a list are
even numbers or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;allEven :: [Int] -&amp;gt; Bool
allEven xs = and $ map even xs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we apply the function &lt;code&gt;even&lt;/code&gt; to every element in the list and
that will result in a new list with &lt;code&gt;Bool&lt;/code&gt; values. Then is when the
&lt;code&gt;and&lt;/code&gt; function comes to check whether all values are &lt;code&gt;true&lt;/code&gt; or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If all elements are true, then the result is true, false otherwise.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;filter&lt;/strong&gt; function, takes a function as an argument to decide which
elements of the list taken as second argument will be filtered and
which ones won&amp;#8217;t.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;filter :: (a -&amp;gt; Bool) -&amp;gt; [a] -&amp;gt; [a]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(a &amp;#8594; Bool)&lt;/code&gt;: This function is often called the &lt;code&gt;predicate&lt;/code&gt;. It
will return true if the element matches a given condition or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[a]&lt;/code&gt;: The source list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[a]&lt;/code&gt;: The result list with the non discarded elements&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the element &lt;strong&gt;doesn&amp;#8217;t match&lt;/strong&gt; the condition &lt;strong&gt;it will be
discarded&lt;/strong&gt;. Or in other words, &lt;strong&gt;only those matching the condition,
will pass&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A trivial example could be getting only the even numbers of a list of
integers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;filterEven :: [Int] -&amp;gt; [Int]
filterEven = filter even&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course you can always use a &lt;strong&gt;lambda expression&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;filterLongNames :: [String] -&amp;gt; [String]
filterLongNames = filter (\x -&amp;gt; (length x) &amp;gt; 20)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;foldr&quot;&gt;&lt;code&gt;foldr&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;foldr&lt;/strong&gt; can be used to aggregate all values from a given list
using a given function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;foldr :: (a -&amp;gt; b -&amp;gt; b) -&amp;gt; b -&amp;gt; [a] -&amp;gt; b&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(a &amp;#8594; b &amp;#8594; b)&lt;/code&gt;: a function taking a new element from the list
and the accumulated value and mix both to get a new accumulator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt;: a initial value to serve as initial accumulator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[a]&lt;/code&gt;: The list of elements we want to reduce&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt;: The result&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets say I want to sum all ages from a list of people:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;sumPeopleAge :: [Person] -&amp;gt; Integer
sumPeopleAge = foldr (\next \acc -&amp;gt; next.age + acc) 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See how I&amp;#8217;m using here a lambda expression to get only the &lt;code&gt;age&lt;/code&gt; value
from the record &lt;code&gt;Person&lt;/code&gt; and add it up to the accumulator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </content>
    </entry>
    
</feed>